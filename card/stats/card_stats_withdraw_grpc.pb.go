// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: card/stats/card_stats_withdraw.proto

package stats

import (
	context "context"
	card "github.com/MamangRust/monolith-graphql-payment-gateway-pb/card"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CardStatsWithdrawService_FindMonthlyWithdrawAmount_FullMethodName             = "/pb.card.stats.CardStatsWithdrawService/FindMonthlyWithdrawAmount"
	CardStatsWithdrawService_FindYearlyWithdrawAmount_FullMethodName              = "/pb.card.stats.CardStatsWithdrawService/FindYearlyWithdrawAmount"
	CardStatsWithdrawService_FindMonthlyWithdrawAmountByCardNumber_FullMethodName = "/pb.card.stats.CardStatsWithdrawService/FindMonthlyWithdrawAmountByCardNumber"
	CardStatsWithdrawService_FindYearlyWithdrawAmountByCardNumber_FullMethodName  = "/pb.card.stats.CardStatsWithdrawService/FindYearlyWithdrawAmountByCardNumber"
)

// CardStatsWithdrawServiceClient is the client API for CardStatsWithdrawService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardStatsWithdrawServiceClient interface {
	FindMonthlyWithdrawAmount(ctx context.Context, in *card.FindYearAmount, opts ...grpc.CallOption) (*card.ApiResponseMonthlyAmount, error)
	FindYearlyWithdrawAmount(ctx context.Context, in *card.FindYearAmount, opts ...grpc.CallOption) (*card.ApiResponseYearlyAmount, error)
	FindMonthlyWithdrawAmountByCardNumber(ctx context.Context, in *card.FindYearAmountCardNumber, opts ...grpc.CallOption) (*card.ApiResponseMonthlyAmount, error)
	FindYearlyWithdrawAmountByCardNumber(ctx context.Context, in *card.FindYearAmountCardNumber, opts ...grpc.CallOption) (*card.ApiResponseYearlyAmount, error)
}

type cardStatsWithdrawServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardStatsWithdrawServiceClient(cc grpc.ClientConnInterface) CardStatsWithdrawServiceClient {
	return &cardStatsWithdrawServiceClient{cc}
}

func (c *cardStatsWithdrawServiceClient) FindMonthlyWithdrawAmount(ctx context.Context, in *card.FindYearAmount, opts ...grpc.CallOption) (*card.ApiResponseMonthlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(card.ApiResponseMonthlyAmount)
	err := c.cc.Invoke(ctx, CardStatsWithdrawService_FindMonthlyWithdrawAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardStatsWithdrawServiceClient) FindYearlyWithdrawAmount(ctx context.Context, in *card.FindYearAmount, opts ...grpc.CallOption) (*card.ApiResponseYearlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(card.ApiResponseYearlyAmount)
	err := c.cc.Invoke(ctx, CardStatsWithdrawService_FindYearlyWithdrawAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardStatsWithdrawServiceClient) FindMonthlyWithdrawAmountByCardNumber(ctx context.Context, in *card.FindYearAmountCardNumber, opts ...grpc.CallOption) (*card.ApiResponseMonthlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(card.ApiResponseMonthlyAmount)
	err := c.cc.Invoke(ctx, CardStatsWithdrawService_FindMonthlyWithdrawAmountByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardStatsWithdrawServiceClient) FindYearlyWithdrawAmountByCardNumber(ctx context.Context, in *card.FindYearAmountCardNumber, opts ...grpc.CallOption) (*card.ApiResponseYearlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(card.ApiResponseYearlyAmount)
	err := c.cc.Invoke(ctx, CardStatsWithdrawService_FindYearlyWithdrawAmountByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardStatsWithdrawServiceServer is the server API for CardStatsWithdrawService service.
// All implementations must embed UnimplementedCardStatsWithdrawServiceServer
// for forward compatibility.
type CardStatsWithdrawServiceServer interface {
	FindMonthlyWithdrawAmount(context.Context, *card.FindYearAmount) (*card.ApiResponseMonthlyAmount, error)
	FindYearlyWithdrawAmount(context.Context, *card.FindYearAmount) (*card.ApiResponseYearlyAmount, error)
	FindMonthlyWithdrawAmountByCardNumber(context.Context, *card.FindYearAmountCardNumber) (*card.ApiResponseMonthlyAmount, error)
	FindYearlyWithdrawAmountByCardNumber(context.Context, *card.FindYearAmountCardNumber) (*card.ApiResponseYearlyAmount, error)
	mustEmbedUnimplementedCardStatsWithdrawServiceServer()
}

// UnimplementedCardStatsWithdrawServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCardStatsWithdrawServiceServer struct{}

func (UnimplementedCardStatsWithdrawServiceServer) FindMonthlyWithdrawAmount(context.Context, *card.FindYearAmount) (*card.ApiResponseMonthlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyWithdrawAmount not implemented")
}
func (UnimplementedCardStatsWithdrawServiceServer) FindYearlyWithdrawAmount(context.Context, *card.FindYearAmount) (*card.ApiResponseYearlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyWithdrawAmount not implemented")
}
func (UnimplementedCardStatsWithdrawServiceServer) FindMonthlyWithdrawAmountByCardNumber(context.Context, *card.FindYearAmountCardNumber) (*card.ApiResponseMonthlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyWithdrawAmountByCardNumber not implemented")
}
func (UnimplementedCardStatsWithdrawServiceServer) FindYearlyWithdrawAmountByCardNumber(context.Context, *card.FindYearAmountCardNumber) (*card.ApiResponseYearlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyWithdrawAmountByCardNumber not implemented")
}
func (UnimplementedCardStatsWithdrawServiceServer) mustEmbedUnimplementedCardStatsWithdrawServiceServer() {
}
func (UnimplementedCardStatsWithdrawServiceServer) testEmbeddedByValue() {}

// UnsafeCardStatsWithdrawServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardStatsWithdrawServiceServer will
// result in compilation errors.
type UnsafeCardStatsWithdrawServiceServer interface {
	mustEmbedUnimplementedCardStatsWithdrawServiceServer()
}

func RegisterCardStatsWithdrawServiceServer(s grpc.ServiceRegistrar, srv CardStatsWithdrawServiceServer) {
	// If the following call pancis, it indicates UnimplementedCardStatsWithdrawServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CardStatsWithdrawService_ServiceDesc, srv)
}

func _CardStatsWithdrawService_FindMonthlyWithdrawAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(card.FindYearAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardStatsWithdrawServiceServer).FindMonthlyWithdrawAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardStatsWithdrawService_FindMonthlyWithdrawAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardStatsWithdrawServiceServer).FindMonthlyWithdrawAmount(ctx, req.(*card.FindYearAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardStatsWithdrawService_FindYearlyWithdrawAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(card.FindYearAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardStatsWithdrawServiceServer).FindYearlyWithdrawAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardStatsWithdrawService_FindYearlyWithdrawAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardStatsWithdrawServiceServer).FindYearlyWithdrawAmount(ctx, req.(*card.FindYearAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardStatsWithdrawService_FindMonthlyWithdrawAmountByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(card.FindYearAmountCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardStatsWithdrawServiceServer).FindMonthlyWithdrawAmountByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardStatsWithdrawService_FindMonthlyWithdrawAmountByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardStatsWithdrawServiceServer).FindMonthlyWithdrawAmountByCardNumber(ctx, req.(*card.FindYearAmountCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardStatsWithdrawService_FindYearlyWithdrawAmountByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(card.FindYearAmountCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardStatsWithdrawServiceServer).FindYearlyWithdrawAmountByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardStatsWithdrawService_FindYearlyWithdrawAmountByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardStatsWithdrawServiceServer).FindYearlyWithdrawAmountByCardNumber(ctx, req.(*card.FindYearAmountCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

// CardStatsWithdrawService_ServiceDesc is the grpc.ServiceDesc for CardStatsWithdrawService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardStatsWithdrawService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.card.stats.CardStatsWithdrawService",
	HandlerType: (*CardStatsWithdrawServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMonthlyWithdrawAmount",
			Handler:    _CardStatsWithdrawService_FindMonthlyWithdrawAmount_Handler,
		},
		{
			MethodName: "FindYearlyWithdrawAmount",
			Handler:    _CardStatsWithdrawService_FindYearlyWithdrawAmount_Handler,
		},
		{
			MethodName: "FindMonthlyWithdrawAmountByCardNumber",
			Handler:    _CardStatsWithdrawService_FindMonthlyWithdrawAmountByCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyWithdrawAmountByCardNumber",
			Handler:    _CardStatsWithdrawService_FindYearlyWithdrawAmountByCardNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card/stats/card_stats_withdraw.proto",
}
