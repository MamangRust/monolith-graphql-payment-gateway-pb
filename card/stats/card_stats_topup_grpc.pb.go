// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: card/stats/card_stats_topup.proto

package stats

import (
	context "context"
	card "github.com/MamangRust/monolith-graphql-payment-gateway-pb/card"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CardStatsTopupService_FindMonthlyTopupAmount_FullMethodName             = "/pb.card.stats.CardStatsTopupService/FindMonthlyTopupAmount"
	CardStatsTopupService_FindYearlyTopupAmount_FullMethodName              = "/pb.card.stats.CardStatsTopupService/FindYearlyTopupAmount"
	CardStatsTopupService_FindMonthlyTopupAmountByCardNumber_FullMethodName = "/pb.card.stats.CardStatsTopupService/FindMonthlyTopupAmountByCardNumber"
	CardStatsTopupService_FindYearlyTopupAmountByCardNumber_FullMethodName  = "/pb.card.stats.CardStatsTopupService/FindYearlyTopupAmountByCardNumber"
)

// CardStatsTopupServiceClient is the client API for CardStatsTopupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardStatsTopupServiceClient interface {
	FindMonthlyTopupAmount(ctx context.Context, in *card.FindYearAmount, opts ...grpc.CallOption) (*card.ApiResponseMonthlyAmount, error)
	FindYearlyTopupAmount(ctx context.Context, in *card.FindYearAmount, opts ...grpc.CallOption) (*card.ApiResponseYearlyAmount, error)
	FindMonthlyTopupAmountByCardNumber(ctx context.Context, in *card.FindYearAmountCardNumber, opts ...grpc.CallOption) (*card.ApiResponseMonthlyAmount, error)
	FindYearlyTopupAmountByCardNumber(ctx context.Context, in *card.FindYearAmountCardNumber, opts ...grpc.CallOption) (*card.ApiResponseYearlyAmount, error)
}

type cardStatsTopupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardStatsTopupServiceClient(cc grpc.ClientConnInterface) CardStatsTopupServiceClient {
	return &cardStatsTopupServiceClient{cc}
}

func (c *cardStatsTopupServiceClient) FindMonthlyTopupAmount(ctx context.Context, in *card.FindYearAmount, opts ...grpc.CallOption) (*card.ApiResponseMonthlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(card.ApiResponseMonthlyAmount)
	err := c.cc.Invoke(ctx, CardStatsTopupService_FindMonthlyTopupAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardStatsTopupServiceClient) FindYearlyTopupAmount(ctx context.Context, in *card.FindYearAmount, opts ...grpc.CallOption) (*card.ApiResponseYearlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(card.ApiResponseYearlyAmount)
	err := c.cc.Invoke(ctx, CardStatsTopupService_FindYearlyTopupAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardStatsTopupServiceClient) FindMonthlyTopupAmountByCardNumber(ctx context.Context, in *card.FindYearAmountCardNumber, opts ...grpc.CallOption) (*card.ApiResponseMonthlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(card.ApiResponseMonthlyAmount)
	err := c.cc.Invoke(ctx, CardStatsTopupService_FindMonthlyTopupAmountByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardStatsTopupServiceClient) FindYearlyTopupAmountByCardNumber(ctx context.Context, in *card.FindYearAmountCardNumber, opts ...grpc.CallOption) (*card.ApiResponseYearlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(card.ApiResponseYearlyAmount)
	err := c.cc.Invoke(ctx, CardStatsTopupService_FindYearlyTopupAmountByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardStatsTopupServiceServer is the server API for CardStatsTopupService service.
// All implementations must embed UnimplementedCardStatsTopupServiceServer
// for forward compatibility.
type CardStatsTopupServiceServer interface {
	FindMonthlyTopupAmount(context.Context, *card.FindYearAmount) (*card.ApiResponseMonthlyAmount, error)
	FindYearlyTopupAmount(context.Context, *card.FindYearAmount) (*card.ApiResponseYearlyAmount, error)
	FindMonthlyTopupAmountByCardNumber(context.Context, *card.FindYearAmountCardNumber) (*card.ApiResponseMonthlyAmount, error)
	FindYearlyTopupAmountByCardNumber(context.Context, *card.FindYearAmountCardNumber) (*card.ApiResponseYearlyAmount, error)
	mustEmbedUnimplementedCardStatsTopupServiceServer()
}

// UnimplementedCardStatsTopupServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCardStatsTopupServiceServer struct{}

func (UnimplementedCardStatsTopupServiceServer) FindMonthlyTopupAmount(context.Context, *card.FindYearAmount) (*card.ApiResponseMonthlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTopupAmount not implemented")
}
func (UnimplementedCardStatsTopupServiceServer) FindYearlyTopupAmount(context.Context, *card.FindYearAmount) (*card.ApiResponseYearlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTopupAmount not implemented")
}
func (UnimplementedCardStatsTopupServiceServer) FindMonthlyTopupAmountByCardNumber(context.Context, *card.FindYearAmountCardNumber) (*card.ApiResponseMonthlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTopupAmountByCardNumber not implemented")
}
func (UnimplementedCardStatsTopupServiceServer) FindYearlyTopupAmountByCardNumber(context.Context, *card.FindYearAmountCardNumber) (*card.ApiResponseYearlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTopupAmountByCardNumber not implemented")
}
func (UnimplementedCardStatsTopupServiceServer) mustEmbedUnimplementedCardStatsTopupServiceServer() {}
func (UnimplementedCardStatsTopupServiceServer) testEmbeddedByValue()                               {}

// UnsafeCardStatsTopupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardStatsTopupServiceServer will
// result in compilation errors.
type UnsafeCardStatsTopupServiceServer interface {
	mustEmbedUnimplementedCardStatsTopupServiceServer()
}

func RegisterCardStatsTopupServiceServer(s grpc.ServiceRegistrar, srv CardStatsTopupServiceServer) {
	// If the following call pancis, it indicates UnimplementedCardStatsTopupServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CardStatsTopupService_ServiceDesc, srv)
}

func _CardStatsTopupService_FindMonthlyTopupAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(card.FindYearAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardStatsTopupServiceServer).FindMonthlyTopupAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardStatsTopupService_FindMonthlyTopupAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardStatsTopupServiceServer).FindMonthlyTopupAmount(ctx, req.(*card.FindYearAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardStatsTopupService_FindYearlyTopupAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(card.FindYearAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardStatsTopupServiceServer).FindYearlyTopupAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardStatsTopupService_FindYearlyTopupAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardStatsTopupServiceServer).FindYearlyTopupAmount(ctx, req.(*card.FindYearAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardStatsTopupService_FindMonthlyTopupAmountByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(card.FindYearAmountCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardStatsTopupServiceServer).FindMonthlyTopupAmountByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardStatsTopupService_FindMonthlyTopupAmountByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardStatsTopupServiceServer).FindMonthlyTopupAmountByCardNumber(ctx, req.(*card.FindYearAmountCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardStatsTopupService_FindYearlyTopupAmountByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(card.FindYearAmountCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardStatsTopupServiceServer).FindYearlyTopupAmountByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardStatsTopupService_FindYearlyTopupAmountByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardStatsTopupServiceServer).FindYearlyTopupAmountByCardNumber(ctx, req.(*card.FindYearAmountCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

// CardStatsTopupService_ServiceDesc is the grpc.ServiceDesc for CardStatsTopupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardStatsTopupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.card.stats.CardStatsTopupService",
	HandlerType: (*CardStatsTopupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMonthlyTopupAmount",
			Handler:    _CardStatsTopupService_FindMonthlyTopupAmount_Handler,
		},
		{
			MethodName: "FindYearlyTopupAmount",
			Handler:    _CardStatsTopupService_FindYearlyTopupAmount_Handler,
		},
		{
			MethodName: "FindMonthlyTopupAmountByCardNumber",
			Handler:    _CardStatsTopupService_FindMonthlyTopupAmountByCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyTopupAmountByCardNumber",
			Handler:    _CardStatsTopupService_FindYearlyTopupAmountByCardNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card/stats/card_stats_topup.proto",
}
