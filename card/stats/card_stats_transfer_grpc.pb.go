// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: card/stats/card_stats_transfer.proto

package stats

import (
	context "context"
	card "github.com/MamangRust/monolith-graphql-payment-gateway-pb/card"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CardStatsTransferService_FindMonthlyTransferSenderAmount_FullMethodName               = "/pb.card.stats.CardStatsTransferService/FindMonthlyTransferSenderAmount"
	CardStatsTransferService_FindYearlyTransferSenderAmount_FullMethodName                = "/pb.card.stats.CardStatsTransferService/FindYearlyTransferSenderAmount"
	CardStatsTransferService_FindMonthlyTransferReceiverAmount_FullMethodName             = "/pb.card.stats.CardStatsTransferService/FindMonthlyTransferReceiverAmount"
	CardStatsTransferService_FindYearlyTransferReceiverAmount_FullMethodName              = "/pb.card.stats.CardStatsTransferService/FindYearlyTransferReceiverAmount"
	CardStatsTransferService_FindMonthlyTransferSenderAmountByCardNumber_FullMethodName   = "/pb.card.stats.CardStatsTransferService/FindMonthlyTransferSenderAmountByCardNumber"
	CardStatsTransferService_FindYearlyTransferSenderAmountByCardNumber_FullMethodName    = "/pb.card.stats.CardStatsTransferService/FindYearlyTransferSenderAmountByCardNumber"
	CardStatsTransferService_FindMonthlyTransferReceiverAmountByCardNumber_FullMethodName = "/pb.card.stats.CardStatsTransferService/FindMonthlyTransferReceiverAmountByCardNumber"
	CardStatsTransferService_FindYearlyTransferReceiverAmountByCardNumber_FullMethodName  = "/pb.card.stats.CardStatsTransferService/FindYearlyTransferReceiverAmountByCardNumber"
)

// CardStatsTransferServiceClient is the client API for CardStatsTransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardStatsTransferServiceClient interface {
	FindMonthlyTransferSenderAmount(ctx context.Context, in *card.FindYearAmount, opts ...grpc.CallOption) (*card.ApiResponseMonthlyAmount, error)
	FindYearlyTransferSenderAmount(ctx context.Context, in *card.FindYearAmount, opts ...grpc.CallOption) (*card.ApiResponseYearlyAmount, error)
	FindMonthlyTransferReceiverAmount(ctx context.Context, in *card.FindYearAmount, opts ...grpc.CallOption) (*card.ApiResponseMonthlyAmount, error)
	FindYearlyTransferReceiverAmount(ctx context.Context, in *card.FindYearAmount, opts ...grpc.CallOption) (*card.ApiResponseYearlyAmount, error)
	FindMonthlyTransferSenderAmountByCardNumber(ctx context.Context, in *card.FindYearAmountCardNumber, opts ...grpc.CallOption) (*card.ApiResponseMonthlyAmount, error)
	FindYearlyTransferSenderAmountByCardNumber(ctx context.Context, in *card.FindYearAmountCardNumber, opts ...grpc.CallOption) (*card.ApiResponseYearlyAmount, error)
	FindMonthlyTransferReceiverAmountByCardNumber(ctx context.Context, in *card.FindYearAmountCardNumber, opts ...grpc.CallOption) (*card.ApiResponseMonthlyAmount, error)
	FindYearlyTransferReceiverAmountByCardNumber(ctx context.Context, in *card.FindYearAmountCardNumber, opts ...grpc.CallOption) (*card.ApiResponseYearlyAmount, error)
}

type cardStatsTransferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardStatsTransferServiceClient(cc grpc.ClientConnInterface) CardStatsTransferServiceClient {
	return &cardStatsTransferServiceClient{cc}
}

func (c *cardStatsTransferServiceClient) FindMonthlyTransferSenderAmount(ctx context.Context, in *card.FindYearAmount, opts ...grpc.CallOption) (*card.ApiResponseMonthlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(card.ApiResponseMonthlyAmount)
	err := c.cc.Invoke(ctx, CardStatsTransferService_FindMonthlyTransferSenderAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardStatsTransferServiceClient) FindYearlyTransferSenderAmount(ctx context.Context, in *card.FindYearAmount, opts ...grpc.CallOption) (*card.ApiResponseYearlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(card.ApiResponseYearlyAmount)
	err := c.cc.Invoke(ctx, CardStatsTransferService_FindYearlyTransferSenderAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardStatsTransferServiceClient) FindMonthlyTransferReceiverAmount(ctx context.Context, in *card.FindYearAmount, opts ...grpc.CallOption) (*card.ApiResponseMonthlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(card.ApiResponseMonthlyAmount)
	err := c.cc.Invoke(ctx, CardStatsTransferService_FindMonthlyTransferReceiverAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardStatsTransferServiceClient) FindYearlyTransferReceiverAmount(ctx context.Context, in *card.FindYearAmount, opts ...grpc.CallOption) (*card.ApiResponseYearlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(card.ApiResponseYearlyAmount)
	err := c.cc.Invoke(ctx, CardStatsTransferService_FindYearlyTransferReceiverAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardStatsTransferServiceClient) FindMonthlyTransferSenderAmountByCardNumber(ctx context.Context, in *card.FindYearAmountCardNumber, opts ...grpc.CallOption) (*card.ApiResponseMonthlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(card.ApiResponseMonthlyAmount)
	err := c.cc.Invoke(ctx, CardStatsTransferService_FindMonthlyTransferSenderAmountByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardStatsTransferServiceClient) FindYearlyTransferSenderAmountByCardNumber(ctx context.Context, in *card.FindYearAmountCardNumber, opts ...grpc.CallOption) (*card.ApiResponseYearlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(card.ApiResponseYearlyAmount)
	err := c.cc.Invoke(ctx, CardStatsTransferService_FindYearlyTransferSenderAmountByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardStatsTransferServiceClient) FindMonthlyTransferReceiverAmountByCardNumber(ctx context.Context, in *card.FindYearAmountCardNumber, opts ...grpc.CallOption) (*card.ApiResponseMonthlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(card.ApiResponseMonthlyAmount)
	err := c.cc.Invoke(ctx, CardStatsTransferService_FindMonthlyTransferReceiverAmountByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardStatsTransferServiceClient) FindYearlyTransferReceiverAmountByCardNumber(ctx context.Context, in *card.FindYearAmountCardNumber, opts ...grpc.CallOption) (*card.ApiResponseYearlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(card.ApiResponseYearlyAmount)
	err := c.cc.Invoke(ctx, CardStatsTransferService_FindYearlyTransferReceiverAmountByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardStatsTransferServiceServer is the server API for CardStatsTransferService service.
// All implementations must embed UnimplementedCardStatsTransferServiceServer
// for forward compatibility.
type CardStatsTransferServiceServer interface {
	FindMonthlyTransferSenderAmount(context.Context, *card.FindYearAmount) (*card.ApiResponseMonthlyAmount, error)
	FindYearlyTransferSenderAmount(context.Context, *card.FindYearAmount) (*card.ApiResponseYearlyAmount, error)
	FindMonthlyTransferReceiverAmount(context.Context, *card.FindYearAmount) (*card.ApiResponseMonthlyAmount, error)
	FindYearlyTransferReceiverAmount(context.Context, *card.FindYearAmount) (*card.ApiResponseYearlyAmount, error)
	FindMonthlyTransferSenderAmountByCardNumber(context.Context, *card.FindYearAmountCardNumber) (*card.ApiResponseMonthlyAmount, error)
	FindYearlyTransferSenderAmountByCardNumber(context.Context, *card.FindYearAmountCardNumber) (*card.ApiResponseYearlyAmount, error)
	FindMonthlyTransferReceiverAmountByCardNumber(context.Context, *card.FindYearAmountCardNumber) (*card.ApiResponseMonthlyAmount, error)
	FindYearlyTransferReceiverAmountByCardNumber(context.Context, *card.FindYearAmountCardNumber) (*card.ApiResponseYearlyAmount, error)
	mustEmbedUnimplementedCardStatsTransferServiceServer()
}

// UnimplementedCardStatsTransferServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCardStatsTransferServiceServer struct{}

func (UnimplementedCardStatsTransferServiceServer) FindMonthlyTransferSenderAmount(context.Context, *card.FindYearAmount) (*card.ApiResponseMonthlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTransferSenderAmount not implemented")
}
func (UnimplementedCardStatsTransferServiceServer) FindYearlyTransferSenderAmount(context.Context, *card.FindYearAmount) (*card.ApiResponseYearlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTransferSenderAmount not implemented")
}
func (UnimplementedCardStatsTransferServiceServer) FindMonthlyTransferReceiverAmount(context.Context, *card.FindYearAmount) (*card.ApiResponseMonthlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTransferReceiverAmount not implemented")
}
func (UnimplementedCardStatsTransferServiceServer) FindYearlyTransferReceiverAmount(context.Context, *card.FindYearAmount) (*card.ApiResponseYearlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTransferReceiverAmount not implemented")
}
func (UnimplementedCardStatsTransferServiceServer) FindMonthlyTransferSenderAmountByCardNumber(context.Context, *card.FindYearAmountCardNumber) (*card.ApiResponseMonthlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTransferSenderAmountByCardNumber not implemented")
}
func (UnimplementedCardStatsTransferServiceServer) FindYearlyTransferSenderAmountByCardNumber(context.Context, *card.FindYearAmountCardNumber) (*card.ApiResponseYearlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTransferSenderAmountByCardNumber not implemented")
}
func (UnimplementedCardStatsTransferServiceServer) FindMonthlyTransferReceiverAmountByCardNumber(context.Context, *card.FindYearAmountCardNumber) (*card.ApiResponseMonthlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTransferReceiverAmountByCardNumber not implemented")
}
func (UnimplementedCardStatsTransferServiceServer) FindYearlyTransferReceiverAmountByCardNumber(context.Context, *card.FindYearAmountCardNumber) (*card.ApiResponseYearlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTransferReceiverAmountByCardNumber not implemented")
}
func (UnimplementedCardStatsTransferServiceServer) mustEmbedUnimplementedCardStatsTransferServiceServer() {
}
func (UnimplementedCardStatsTransferServiceServer) testEmbeddedByValue() {}

// UnsafeCardStatsTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardStatsTransferServiceServer will
// result in compilation errors.
type UnsafeCardStatsTransferServiceServer interface {
	mustEmbedUnimplementedCardStatsTransferServiceServer()
}

func RegisterCardStatsTransferServiceServer(s grpc.ServiceRegistrar, srv CardStatsTransferServiceServer) {
	// If the following call pancis, it indicates UnimplementedCardStatsTransferServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CardStatsTransferService_ServiceDesc, srv)
}

func _CardStatsTransferService_FindMonthlyTransferSenderAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(card.FindYearAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardStatsTransferServiceServer).FindMonthlyTransferSenderAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardStatsTransferService_FindMonthlyTransferSenderAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardStatsTransferServiceServer).FindMonthlyTransferSenderAmount(ctx, req.(*card.FindYearAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardStatsTransferService_FindYearlyTransferSenderAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(card.FindYearAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardStatsTransferServiceServer).FindYearlyTransferSenderAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardStatsTransferService_FindYearlyTransferSenderAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardStatsTransferServiceServer).FindYearlyTransferSenderAmount(ctx, req.(*card.FindYearAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardStatsTransferService_FindMonthlyTransferReceiverAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(card.FindYearAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardStatsTransferServiceServer).FindMonthlyTransferReceiverAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardStatsTransferService_FindMonthlyTransferReceiverAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardStatsTransferServiceServer).FindMonthlyTransferReceiverAmount(ctx, req.(*card.FindYearAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardStatsTransferService_FindYearlyTransferReceiverAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(card.FindYearAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardStatsTransferServiceServer).FindYearlyTransferReceiverAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardStatsTransferService_FindYearlyTransferReceiverAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardStatsTransferServiceServer).FindYearlyTransferReceiverAmount(ctx, req.(*card.FindYearAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardStatsTransferService_FindMonthlyTransferSenderAmountByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(card.FindYearAmountCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardStatsTransferServiceServer).FindMonthlyTransferSenderAmountByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardStatsTransferService_FindMonthlyTransferSenderAmountByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardStatsTransferServiceServer).FindMonthlyTransferSenderAmountByCardNumber(ctx, req.(*card.FindYearAmountCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardStatsTransferService_FindYearlyTransferSenderAmountByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(card.FindYearAmountCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardStatsTransferServiceServer).FindYearlyTransferSenderAmountByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardStatsTransferService_FindYearlyTransferSenderAmountByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardStatsTransferServiceServer).FindYearlyTransferSenderAmountByCardNumber(ctx, req.(*card.FindYearAmountCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardStatsTransferService_FindMonthlyTransferReceiverAmountByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(card.FindYearAmountCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardStatsTransferServiceServer).FindMonthlyTransferReceiverAmountByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardStatsTransferService_FindMonthlyTransferReceiverAmountByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardStatsTransferServiceServer).FindMonthlyTransferReceiverAmountByCardNumber(ctx, req.(*card.FindYearAmountCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardStatsTransferService_FindYearlyTransferReceiverAmountByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(card.FindYearAmountCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardStatsTransferServiceServer).FindYearlyTransferReceiverAmountByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardStatsTransferService_FindYearlyTransferReceiverAmountByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardStatsTransferServiceServer).FindYearlyTransferReceiverAmountByCardNumber(ctx, req.(*card.FindYearAmountCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

// CardStatsTransferService_ServiceDesc is the grpc.ServiceDesc for CardStatsTransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardStatsTransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.card.stats.CardStatsTransferService",
	HandlerType: (*CardStatsTransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMonthlyTransferSenderAmount",
			Handler:    _CardStatsTransferService_FindMonthlyTransferSenderAmount_Handler,
		},
		{
			MethodName: "FindYearlyTransferSenderAmount",
			Handler:    _CardStatsTransferService_FindYearlyTransferSenderAmount_Handler,
		},
		{
			MethodName: "FindMonthlyTransferReceiverAmount",
			Handler:    _CardStatsTransferService_FindMonthlyTransferReceiverAmount_Handler,
		},
		{
			MethodName: "FindYearlyTransferReceiverAmount",
			Handler:    _CardStatsTransferService_FindYearlyTransferReceiverAmount_Handler,
		},
		{
			MethodName: "FindMonthlyTransferSenderAmountByCardNumber",
			Handler:    _CardStatsTransferService_FindMonthlyTransferSenderAmountByCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyTransferSenderAmountByCardNumber",
			Handler:    _CardStatsTransferService_FindYearlyTransferSenderAmountByCardNumber_Handler,
		},
		{
			MethodName: "FindMonthlyTransferReceiverAmountByCardNumber",
			Handler:    _CardStatsTransferService_FindMonthlyTransferReceiverAmountByCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyTransferReceiverAmountByCardNumber",
			Handler:    _CardStatsTransferService_FindYearlyTransferReceiverAmountByCardNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card/stats/card_stats_transfer.proto",
}
