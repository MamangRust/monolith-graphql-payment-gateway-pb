// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: card/stats/card_stats_balance.proto

package stats

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CardStatsBalanceService_FindMonthlyBalance_FullMethodName             = "/pb.card.stats.CardStatsBalanceService/FindMonthlyBalance"
	CardStatsBalanceService_FindYearlyBalance_FullMethodName              = "/pb.card.stats.CardStatsBalanceService/FindYearlyBalance"
	CardStatsBalanceService_FindMonthlyBalanceByCardNumber_FullMethodName = "/pb.card.stats.CardStatsBalanceService/FindMonthlyBalanceByCardNumber"
	CardStatsBalanceService_FindYearlyBalanceByCardNumber_FullMethodName  = "/pb.card.stats.CardStatsBalanceService/FindYearlyBalanceByCardNumber"
)

// CardStatsBalanceServiceClient is the client API for CardStatsBalanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardStatsBalanceServiceClient interface {
	FindMonthlyBalance(ctx context.Context, in *FindYearBalance, opts ...grpc.CallOption) (*ApiResponseMonthlyBalance, error)
	FindYearlyBalance(ctx context.Context, in *FindYearBalance, opts ...grpc.CallOption) (*ApiResponseYearlyBalance, error)
	FindMonthlyBalanceByCardNumber(ctx context.Context, in *FindYearBalanceCardNumber, opts ...grpc.CallOption) (*ApiResponseMonthlyBalance, error)
	FindYearlyBalanceByCardNumber(ctx context.Context, in *FindYearBalanceCardNumber, opts ...grpc.CallOption) (*ApiResponseYearlyBalance, error)
}

type cardStatsBalanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardStatsBalanceServiceClient(cc grpc.ClientConnInterface) CardStatsBalanceServiceClient {
	return &cardStatsBalanceServiceClient{cc}
}

func (c *cardStatsBalanceServiceClient) FindMonthlyBalance(ctx context.Context, in *FindYearBalance, opts ...grpc.CallOption) (*ApiResponseMonthlyBalance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMonthlyBalance)
	err := c.cc.Invoke(ctx, CardStatsBalanceService_FindMonthlyBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardStatsBalanceServiceClient) FindYearlyBalance(ctx context.Context, in *FindYearBalance, opts ...grpc.CallOption) (*ApiResponseYearlyBalance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseYearlyBalance)
	err := c.cc.Invoke(ctx, CardStatsBalanceService_FindYearlyBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardStatsBalanceServiceClient) FindMonthlyBalanceByCardNumber(ctx context.Context, in *FindYearBalanceCardNumber, opts ...grpc.CallOption) (*ApiResponseMonthlyBalance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMonthlyBalance)
	err := c.cc.Invoke(ctx, CardStatsBalanceService_FindMonthlyBalanceByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardStatsBalanceServiceClient) FindYearlyBalanceByCardNumber(ctx context.Context, in *FindYearBalanceCardNumber, opts ...grpc.CallOption) (*ApiResponseYearlyBalance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseYearlyBalance)
	err := c.cc.Invoke(ctx, CardStatsBalanceService_FindYearlyBalanceByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardStatsBalanceServiceServer is the server API for CardStatsBalanceService service.
// All implementations must embed UnimplementedCardStatsBalanceServiceServer
// for forward compatibility.
type CardStatsBalanceServiceServer interface {
	FindMonthlyBalance(context.Context, *FindYearBalance) (*ApiResponseMonthlyBalance, error)
	FindYearlyBalance(context.Context, *FindYearBalance) (*ApiResponseYearlyBalance, error)
	FindMonthlyBalanceByCardNumber(context.Context, *FindYearBalanceCardNumber) (*ApiResponseMonthlyBalance, error)
	FindYearlyBalanceByCardNumber(context.Context, *FindYearBalanceCardNumber) (*ApiResponseYearlyBalance, error)
	mustEmbedUnimplementedCardStatsBalanceServiceServer()
}

// UnimplementedCardStatsBalanceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCardStatsBalanceServiceServer struct{}

func (UnimplementedCardStatsBalanceServiceServer) FindMonthlyBalance(context.Context, *FindYearBalance) (*ApiResponseMonthlyBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyBalance not implemented")
}
func (UnimplementedCardStatsBalanceServiceServer) FindYearlyBalance(context.Context, *FindYearBalance) (*ApiResponseYearlyBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyBalance not implemented")
}
func (UnimplementedCardStatsBalanceServiceServer) FindMonthlyBalanceByCardNumber(context.Context, *FindYearBalanceCardNumber) (*ApiResponseMonthlyBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyBalanceByCardNumber not implemented")
}
func (UnimplementedCardStatsBalanceServiceServer) FindYearlyBalanceByCardNumber(context.Context, *FindYearBalanceCardNumber) (*ApiResponseYearlyBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyBalanceByCardNumber not implemented")
}
func (UnimplementedCardStatsBalanceServiceServer) mustEmbedUnimplementedCardStatsBalanceServiceServer() {
}
func (UnimplementedCardStatsBalanceServiceServer) testEmbeddedByValue() {}

// UnsafeCardStatsBalanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardStatsBalanceServiceServer will
// result in compilation errors.
type UnsafeCardStatsBalanceServiceServer interface {
	mustEmbedUnimplementedCardStatsBalanceServiceServer()
}

func RegisterCardStatsBalanceServiceServer(s grpc.ServiceRegistrar, srv CardStatsBalanceServiceServer) {
	// If the following call pancis, it indicates UnimplementedCardStatsBalanceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CardStatsBalanceService_ServiceDesc, srv)
}

func _CardStatsBalanceService_FindMonthlyBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindYearBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardStatsBalanceServiceServer).FindMonthlyBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardStatsBalanceService_FindMonthlyBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardStatsBalanceServiceServer).FindMonthlyBalance(ctx, req.(*FindYearBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardStatsBalanceService_FindYearlyBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindYearBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardStatsBalanceServiceServer).FindYearlyBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardStatsBalanceService_FindYearlyBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardStatsBalanceServiceServer).FindYearlyBalance(ctx, req.(*FindYearBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardStatsBalanceService_FindMonthlyBalanceByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindYearBalanceCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardStatsBalanceServiceServer).FindMonthlyBalanceByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardStatsBalanceService_FindMonthlyBalanceByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardStatsBalanceServiceServer).FindMonthlyBalanceByCardNumber(ctx, req.(*FindYearBalanceCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardStatsBalanceService_FindYearlyBalanceByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindYearBalanceCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardStatsBalanceServiceServer).FindYearlyBalanceByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardStatsBalanceService_FindYearlyBalanceByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardStatsBalanceServiceServer).FindYearlyBalanceByCardNumber(ctx, req.(*FindYearBalanceCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

// CardStatsBalanceService_ServiceDesc is the grpc.ServiceDesc for CardStatsBalanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardStatsBalanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.card.stats.CardStatsBalanceService",
	HandlerType: (*CardStatsBalanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMonthlyBalance",
			Handler:    _CardStatsBalanceService_FindMonthlyBalance_Handler,
		},
		{
			MethodName: "FindYearlyBalance",
			Handler:    _CardStatsBalanceService_FindYearlyBalance_Handler,
		},
		{
			MethodName: "FindMonthlyBalanceByCardNumber",
			Handler:    _CardStatsBalanceService_FindMonthlyBalanceByCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyBalanceByCardNumber",
			Handler:    _CardStatsBalanceService_FindYearlyBalanceByCardNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card/stats/card_stats_balance.proto",
}
