// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: card/stats/card_stats_transaction.proto

package stats

import (
	context "context"
	card "github.com/MamangRust/monolith-graphql-payment-gateway-pb/card"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CardStatsTransactionService_FindMonthlyTransactionAmount_FullMethodName             = "/pb.card.stats.CardStatsTransactionService/FindMonthlyTransactionAmount"
	CardStatsTransactionService_FindYearlyTransactionAmount_FullMethodName              = "/pb.card.stats.CardStatsTransactionService/FindYearlyTransactionAmount"
	CardStatsTransactionService_FindMonthlyTransactionAmountByCardNumber_FullMethodName = "/pb.card.stats.CardStatsTransactionService/FindMonthlyTransactionAmountByCardNumber"
	CardStatsTransactionService_FindYearlyTransactionAmountByCardNumber_FullMethodName  = "/pb.card.stats.CardStatsTransactionService/FindYearlyTransactionAmountByCardNumber"
)

// CardStatsTransactionServiceClient is the client API for CardStatsTransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardStatsTransactionServiceClient interface {
	FindMonthlyTransactionAmount(ctx context.Context, in *card.FindYearAmount, opts ...grpc.CallOption) (*card.ApiResponseMonthlyAmount, error)
	FindYearlyTransactionAmount(ctx context.Context, in *card.FindYearAmount, opts ...grpc.CallOption) (*card.ApiResponseYearlyAmount, error)
	FindMonthlyTransactionAmountByCardNumber(ctx context.Context, in *card.FindYearAmountCardNumber, opts ...grpc.CallOption) (*card.ApiResponseMonthlyAmount, error)
	FindYearlyTransactionAmountByCardNumber(ctx context.Context, in *card.FindYearAmountCardNumber, opts ...grpc.CallOption) (*card.ApiResponseYearlyAmount, error)
}

type cardStatsTransactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardStatsTransactionServiceClient(cc grpc.ClientConnInterface) CardStatsTransactionServiceClient {
	return &cardStatsTransactionServiceClient{cc}
}

func (c *cardStatsTransactionServiceClient) FindMonthlyTransactionAmount(ctx context.Context, in *card.FindYearAmount, opts ...grpc.CallOption) (*card.ApiResponseMonthlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(card.ApiResponseMonthlyAmount)
	err := c.cc.Invoke(ctx, CardStatsTransactionService_FindMonthlyTransactionAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardStatsTransactionServiceClient) FindYearlyTransactionAmount(ctx context.Context, in *card.FindYearAmount, opts ...grpc.CallOption) (*card.ApiResponseYearlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(card.ApiResponseYearlyAmount)
	err := c.cc.Invoke(ctx, CardStatsTransactionService_FindYearlyTransactionAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardStatsTransactionServiceClient) FindMonthlyTransactionAmountByCardNumber(ctx context.Context, in *card.FindYearAmountCardNumber, opts ...grpc.CallOption) (*card.ApiResponseMonthlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(card.ApiResponseMonthlyAmount)
	err := c.cc.Invoke(ctx, CardStatsTransactionService_FindMonthlyTransactionAmountByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardStatsTransactionServiceClient) FindYearlyTransactionAmountByCardNumber(ctx context.Context, in *card.FindYearAmountCardNumber, opts ...grpc.CallOption) (*card.ApiResponseYearlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(card.ApiResponseYearlyAmount)
	err := c.cc.Invoke(ctx, CardStatsTransactionService_FindYearlyTransactionAmountByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardStatsTransactionServiceServer is the server API for CardStatsTransactionService service.
// All implementations must embed UnimplementedCardStatsTransactionServiceServer
// for forward compatibility.
type CardStatsTransactionServiceServer interface {
	FindMonthlyTransactionAmount(context.Context, *card.FindYearAmount) (*card.ApiResponseMonthlyAmount, error)
	FindYearlyTransactionAmount(context.Context, *card.FindYearAmount) (*card.ApiResponseYearlyAmount, error)
	FindMonthlyTransactionAmountByCardNumber(context.Context, *card.FindYearAmountCardNumber) (*card.ApiResponseMonthlyAmount, error)
	FindYearlyTransactionAmountByCardNumber(context.Context, *card.FindYearAmountCardNumber) (*card.ApiResponseYearlyAmount, error)
	mustEmbedUnimplementedCardStatsTransactionServiceServer()
}

// UnimplementedCardStatsTransactionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCardStatsTransactionServiceServer struct{}

func (UnimplementedCardStatsTransactionServiceServer) FindMonthlyTransactionAmount(context.Context, *card.FindYearAmount) (*card.ApiResponseMonthlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTransactionAmount not implemented")
}
func (UnimplementedCardStatsTransactionServiceServer) FindYearlyTransactionAmount(context.Context, *card.FindYearAmount) (*card.ApiResponseYearlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTransactionAmount not implemented")
}
func (UnimplementedCardStatsTransactionServiceServer) FindMonthlyTransactionAmountByCardNumber(context.Context, *card.FindYearAmountCardNumber) (*card.ApiResponseMonthlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTransactionAmountByCardNumber not implemented")
}
func (UnimplementedCardStatsTransactionServiceServer) FindYearlyTransactionAmountByCardNumber(context.Context, *card.FindYearAmountCardNumber) (*card.ApiResponseYearlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTransactionAmountByCardNumber not implemented")
}
func (UnimplementedCardStatsTransactionServiceServer) mustEmbedUnimplementedCardStatsTransactionServiceServer() {
}
func (UnimplementedCardStatsTransactionServiceServer) testEmbeddedByValue() {}

// UnsafeCardStatsTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardStatsTransactionServiceServer will
// result in compilation errors.
type UnsafeCardStatsTransactionServiceServer interface {
	mustEmbedUnimplementedCardStatsTransactionServiceServer()
}

func RegisterCardStatsTransactionServiceServer(s grpc.ServiceRegistrar, srv CardStatsTransactionServiceServer) {
	// If the following call pancis, it indicates UnimplementedCardStatsTransactionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CardStatsTransactionService_ServiceDesc, srv)
}

func _CardStatsTransactionService_FindMonthlyTransactionAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(card.FindYearAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardStatsTransactionServiceServer).FindMonthlyTransactionAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardStatsTransactionService_FindMonthlyTransactionAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardStatsTransactionServiceServer).FindMonthlyTransactionAmount(ctx, req.(*card.FindYearAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardStatsTransactionService_FindYearlyTransactionAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(card.FindYearAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardStatsTransactionServiceServer).FindYearlyTransactionAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardStatsTransactionService_FindYearlyTransactionAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardStatsTransactionServiceServer).FindYearlyTransactionAmount(ctx, req.(*card.FindYearAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardStatsTransactionService_FindMonthlyTransactionAmountByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(card.FindYearAmountCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardStatsTransactionServiceServer).FindMonthlyTransactionAmountByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardStatsTransactionService_FindMonthlyTransactionAmountByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardStatsTransactionServiceServer).FindMonthlyTransactionAmountByCardNumber(ctx, req.(*card.FindYearAmountCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardStatsTransactionService_FindYearlyTransactionAmountByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(card.FindYearAmountCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardStatsTransactionServiceServer).FindYearlyTransactionAmountByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardStatsTransactionService_FindYearlyTransactionAmountByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardStatsTransactionServiceServer).FindYearlyTransactionAmountByCardNumber(ctx, req.(*card.FindYearAmountCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

// CardStatsTransactionService_ServiceDesc is the grpc.ServiceDesc for CardStatsTransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardStatsTransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.card.stats.CardStatsTransactionService",
	HandlerType: (*CardStatsTransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMonthlyTransactionAmount",
			Handler:    _CardStatsTransactionService_FindMonthlyTransactionAmount_Handler,
		},
		{
			MethodName: "FindYearlyTransactionAmount",
			Handler:    _CardStatsTransactionService_FindYearlyTransactionAmount_Handler,
		},
		{
			MethodName: "FindMonthlyTransactionAmountByCardNumber",
			Handler:    _CardStatsTransactionService_FindMonthlyTransactionAmountByCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyTransactionAmountByCardNumber",
			Handler:    _CardStatsTransactionService_FindYearlyTransactionAmountByCardNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card/stats/card_stats_transaction.proto",
}
