// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: card/card_query.proto

package card

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CardQueryService_FindAllCard_FullMethodName       = "/pb.card.CardQueryService/FindAllCard"
	CardQueryService_FindByIdCard_FullMethodName      = "/pb.card.CardQueryService/FindByIdCard"
	CardQueryService_FindByUserIdCard_FullMethodName  = "/pb.card.CardQueryService/FindByUserIdCard"
	CardQueryService_FindByActiveCard_FullMethodName  = "/pb.card.CardQueryService/FindByActiveCard"
	CardQueryService_FindByTrashedCard_FullMethodName = "/pb.card.CardQueryService/FindByTrashedCard"
	CardQueryService_FindByCardNumber_FullMethodName  = "/pb.card.CardQueryService/FindByCardNumber"
)

// CardQueryServiceClient is the client API for CardQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardQueryServiceClient interface {
	FindAllCard(ctx context.Context, in *FindAllCardRequest, opts ...grpc.CallOption) (*ApiResponsePaginationCard, error)
	FindByIdCard(ctx context.Context, in *FindByIdCardRequest, opts ...grpc.CallOption) (*ApiResponseCard, error)
	FindByUserIdCard(ctx context.Context, in *FindByUserIdCardRequest, opts ...grpc.CallOption) (*ApiResponseCard, error)
	FindByActiveCard(ctx context.Context, in *FindAllCardRequest, opts ...grpc.CallOption) (*ApiResponsePaginationCardDeleteAt, error)
	FindByTrashedCard(ctx context.Context, in *FindAllCardRequest, opts ...grpc.CallOption) (*ApiResponsePaginationCardDeleteAt, error)
	FindByCardNumber(ctx context.Context, in *FindByCardNumberRequest, opts ...grpc.CallOption) (*ApiResponseCard, error)
}

type cardQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardQueryServiceClient(cc grpc.ClientConnInterface) CardQueryServiceClient {
	return &cardQueryServiceClient{cc}
}

func (c *cardQueryServiceClient) FindAllCard(ctx context.Context, in *FindAllCardRequest, opts ...grpc.CallOption) (*ApiResponsePaginationCard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationCard)
	err := c.cc.Invoke(ctx, CardQueryService_FindAllCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQueryServiceClient) FindByIdCard(ctx context.Context, in *FindByIdCardRequest, opts ...grpc.CallOption) (*ApiResponseCard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCard)
	err := c.cc.Invoke(ctx, CardQueryService_FindByIdCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQueryServiceClient) FindByUserIdCard(ctx context.Context, in *FindByUserIdCardRequest, opts ...grpc.CallOption) (*ApiResponseCard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCard)
	err := c.cc.Invoke(ctx, CardQueryService_FindByUserIdCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQueryServiceClient) FindByActiveCard(ctx context.Context, in *FindAllCardRequest, opts ...grpc.CallOption) (*ApiResponsePaginationCardDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationCardDeleteAt)
	err := c.cc.Invoke(ctx, CardQueryService_FindByActiveCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQueryServiceClient) FindByTrashedCard(ctx context.Context, in *FindAllCardRequest, opts ...grpc.CallOption) (*ApiResponsePaginationCardDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationCardDeleteAt)
	err := c.cc.Invoke(ctx, CardQueryService_FindByTrashedCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQueryServiceClient) FindByCardNumber(ctx context.Context, in *FindByCardNumberRequest, opts ...grpc.CallOption) (*ApiResponseCard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCard)
	err := c.cc.Invoke(ctx, CardQueryService_FindByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardQueryServiceServer is the server API for CardQueryService service.
// All implementations must embed UnimplementedCardQueryServiceServer
// for forward compatibility.
type CardQueryServiceServer interface {
	FindAllCard(context.Context, *FindAllCardRequest) (*ApiResponsePaginationCard, error)
	FindByIdCard(context.Context, *FindByIdCardRequest) (*ApiResponseCard, error)
	FindByUserIdCard(context.Context, *FindByUserIdCardRequest) (*ApiResponseCard, error)
	FindByActiveCard(context.Context, *FindAllCardRequest) (*ApiResponsePaginationCardDeleteAt, error)
	FindByTrashedCard(context.Context, *FindAllCardRequest) (*ApiResponsePaginationCardDeleteAt, error)
	FindByCardNumber(context.Context, *FindByCardNumberRequest) (*ApiResponseCard, error)
	mustEmbedUnimplementedCardQueryServiceServer()
}

// UnimplementedCardQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCardQueryServiceServer struct{}

func (UnimplementedCardQueryServiceServer) FindAllCard(context.Context, *FindAllCardRequest) (*ApiResponsePaginationCard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllCard not implemented")
}
func (UnimplementedCardQueryServiceServer) FindByIdCard(context.Context, *FindByIdCardRequest) (*ApiResponseCard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByIdCard not implemented")
}
func (UnimplementedCardQueryServiceServer) FindByUserIdCard(context.Context, *FindByUserIdCardRequest) (*ApiResponseCard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByUserIdCard not implemented")
}
func (UnimplementedCardQueryServiceServer) FindByActiveCard(context.Context, *FindAllCardRequest) (*ApiResponsePaginationCardDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActiveCard not implemented")
}
func (UnimplementedCardQueryServiceServer) FindByTrashedCard(context.Context, *FindAllCardRequest) (*ApiResponsePaginationCardDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashedCard not implemented")
}
func (UnimplementedCardQueryServiceServer) FindByCardNumber(context.Context, *FindByCardNumberRequest) (*ApiResponseCard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByCardNumber not implemented")
}
func (UnimplementedCardQueryServiceServer) mustEmbedUnimplementedCardQueryServiceServer() {}
func (UnimplementedCardQueryServiceServer) testEmbeddedByValue()                          {}

// UnsafeCardQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardQueryServiceServer will
// result in compilation errors.
type UnsafeCardQueryServiceServer interface {
	mustEmbedUnimplementedCardQueryServiceServer()
}

func RegisterCardQueryServiceServer(s grpc.ServiceRegistrar, srv CardQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedCardQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CardQueryService_ServiceDesc, srv)
}

func _CardQueryService_FindAllCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQueryServiceServer).FindAllCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardQueryService_FindAllCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQueryServiceServer).FindAllCard(ctx, req.(*FindAllCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQueryService_FindByIdCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQueryServiceServer).FindByIdCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardQueryService_FindByIdCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQueryServiceServer).FindByIdCard(ctx, req.(*FindByIdCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQueryService_FindByUserIdCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByUserIdCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQueryServiceServer).FindByUserIdCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardQueryService_FindByUserIdCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQueryServiceServer).FindByUserIdCard(ctx, req.(*FindByUserIdCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQueryService_FindByActiveCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQueryServiceServer).FindByActiveCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardQueryService_FindByActiveCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQueryServiceServer).FindByActiveCard(ctx, req.(*FindAllCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQueryService_FindByTrashedCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQueryServiceServer).FindByTrashedCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardQueryService_FindByTrashedCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQueryServiceServer).FindByTrashedCard(ctx, req.(*FindAllCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQueryService_FindByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByCardNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQueryServiceServer).FindByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardQueryService_FindByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQueryServiceServer).FindByCardNumber(ctx, req.(*FindByCardNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CardQueryService_ServiceDesc is the grpc.ServiceDesc for CardQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.card.CardQueryService",
	HandlerType: (*CardQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAllCard",
			Handler:    _CardQueryService_FindAllCard_Handler,
		},
		{
			MethodName: "FindByIdCard",
			Handler:    _CardQueryService_FindByIdCard_Handler,
		},
		{
			MethodName: "FindByUserIdCard",
			Handler:    _CardQueryService_FindByUserIdCard_Handler,
		},
		{
			MethodName: "FindByActiveCard",
			Handler:    _CardQueryService_FindByActiveCard_Handler,
		},
		{
			MethodName: "FindByTrashedCard",
			Handler:    _CardQueryService_FindByTrashedCard_Handler,
		},
		{
			MethodName: "FindByCardNumber",
			Handler:    _CardQueryService_FindByCardNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card/card_query.proto",
}
