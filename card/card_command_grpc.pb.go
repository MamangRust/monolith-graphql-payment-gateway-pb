// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: card/card_command.proto

package card

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CardCommandService_CreateCard_FullMethodName             = "/pb.card.CardCommandService/CreateCard"
	CardCommandService_UpdateCard_FullMethodName             = "/pb.card.CardCommandService/UpdateCard"
	CardCommandService_TrashedCard_FullMethodName            = "/pb.card.CardCommandService/TrashedCard"
	CardCommandService_RestoreCard_FullMethodName            = "/pb.card.CardCommandService/RestoreCard"
	CardCommandService_DeleteCardPermanent_FullMethodName    = "/pb.card.CardCommandService/DeleteCardPermanent"
	CardCommandService_RestoreAllCard_FullMethodName         = "/pb.card.CardCommandService/RestoreAllCard"
	CardCommandService_DeleteAllCardPermanent_FullMethodName = "/pb.card.CardCommandService/DeleteAllCardPermanent"
)

// CardCommandServiceClient is the client API for CardCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardCommandServiceClient interface {
	CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*ApiResponseCard, error)
	UpdateCard(ctx context.Context, in *UpdateCardRequest, opts ...grpc.CallOption) (*ApiResponseCard, error)
	TrashedCard(ctx context.Context, in *FindByIdCardRequest, opts ...grpc.CallOption) (*ApiResponseCardDeleteAt, error)
	RestoreCard(ctx context.Context, in *FindByIdCardRequest, opts ...grpc.CallOption) (*ApiResponseCardDeleteAt, error)
	DeleteCardPermanent(ctx context.Context, in *FindByIdCardRequest, opts ...grpc.CallOption) (*ApiResponseCardDelete, error)
	RestoreAllCard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseCardAll, error)
	DeleteAllCardPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseCardAll, error)
}

type cardCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardCommandServiceClient(cc grpc.ClientConnInterface) CardCommandServiceClient {
	return &cardCommandServiceClient{cc}
}

func (c *cardCommandServiceClient) CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*ApiResponseCard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCard)
	err := c.cc.Invoke(ctx, CardCommandService_CreateCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardCommandServiceClient) UpdateCard(ctx context.Context, in *UpdateCardRequest, opts ...grpc.CallOption) (*ApiResponseCard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCard)
	err := c.cc.Invoke(ctx, CardCommandService_UpdateCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardCommandServiceClient) TrashedCard(ctx context.Context, in *FindByIdCardRequest, opts ...grpc.CallOption) (*ApiResponseCardDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCardDeleteAt)
	err := c.cc.Invoke(ctx, CardCommandService_TrashedCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardCommandServiceClient) RestoreCard(ctx context.Context, in *FindByIdCardRequest, opts ...grpc.CallOption) (*ApiResponseCardDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCardDeleteAt)
	err := c.cc.Invoke(ctx, CardCommandService_RestoreCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardCommandServiceClient) DeleteCardPermanent(ctx context.Context, in *FindByIdCardRequest, opts ...grpc.CallOption) (*ApiResponseCardDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCardDelete)
	err := c.cc.Invoke(ctx, CardCommandService_DeleteCardPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardCommandServiceClient) RestoreAllCard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseCardAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCardAll)
	err := c.cc.Invoke(ctx, CardCommandService_RestoreAllCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardCommandServiceClient) DeleteAllCardPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseCardAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseCardAll)
	err := c.cc.Invoke(ctx, CardCommandService_DeleteAllCardPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardCommandServiceServer is the server API for CardCommandService service.
// All implementations must embed UnimplementedCardCommandServiceServer
// for forward compatibility.
type CardCommandServiceServer interface {
	CreateCard(context.Context, *CreateCardRequest) (*ApiResponseCard, error)
	UpdateCard(context.Context, *UpdateCardRequest) (*ApiResponseCard, error)
	TrashedCard(context.Context, *FindByIdCardRequest) (*ApiResponseCardDeleteAt, error)
	RestoreCard(context.Context, *FindByIdCardRequest) (*ApiResponseCardDeleteAt, error)
	DeleteCardPermanent(context.Context, *FindByIdCardRequest) (*ApiResponseCardDelete, error)
	RestoreAllCard(context.Context, *emptypb.Empty) (*ApiResponseCardAll, error)
	DeleteAllCardPermanent(context.Context, *emptypb.Empty) (*ApiResponseCardAll, error)
	mustEmbedUnimplementedCardCommandServiceServer()
}

// UnimplementedCardCommandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCardCommandServiceServer struct{}

func (UnimplementedCardCommandServiceServer) CreateCard(context.Context, *CreateCardRequest) (*ApiResponseCard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCard not implemented")
}
func (UnimplementedCardCommandServiceServer) UpdateCard(context.Context, *UpdateCardRequest) (*ApiResponseCard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCard not implemented")
}
func (UnimplementedCardCommandServiceServer) TrashedCard(context.Context, *FindByIdCardRequest) (*ApiResponseCardDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrashedCard not implemented")
}
func (UnimplementedCardCommandServiceServer) RestoreCard(context.Context, *FindByIdCardRequest) (*ApiResponseCardDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreCard not implemented")
}
func (UnimplementedCardCommandServiceServer) DeleteCardPermanent(context.Context, *FindByIdCardRequest) (*ApiResponseCardDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCardPermanent not implemented")
}
func (UnimplementedCardCommandServiceServer) RestoreAllCard(context.Context, *emptypb.Empty) (*ApiResponseCardAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllCard not implemented")
}
func (UnimplementedCardCommandServiceServer) DeleteAllCardPermanent(context.Context, *emptypb.Empty) (*ApiResponseCardAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllCardPermanent not implemented")
}
func (UnimplementedCardCommandServiceServer) mustEmbedUnimplementedCardCommandServiceServer() {}
func (UnimplementedCardCommandServiceServer) testEmbeddedByValue()                            {}

// UnsafeCardCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardCommandServiceServer will
// result in compilation errors.
type UnsafeCardCommandServiceServer interface {
	mustEmbedUnimplementedCardCommandServiceServer()
}

func RegisterCardCommandServiceServer(s grpc.ServiceRegistrar, srv CardCommandServiceServer) {
	// If the following call pancis, it indicates UnimplementedCardCommandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CardCommandService_ServiceDesc, srv)
}

func _CardCommandService_CreateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardCommandServiceServer).CreateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardCommandService_CreateCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardCommandServiceServer).CreateCard(ctx, req.(*CreateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardCommandService_UpdateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardCommandServiceServer).UpdateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardCommandService_UpdateCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardCommandServiceServer).UpdateCard(ctx, req.(*UpdateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardCommandService_TrashedCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardCommandServiceServer).TrashedCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardCommandService_TrashedCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardCommandServiceServer).TrashedCard(ctx, req.(*FindByIdCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardCommandService_RestoreCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardCommandServiceServer).RestoreCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardCommandService_RestoreCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardCommandServiceServer).RestoreCard(ctx, req.(*FindByIdCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardCommandService_DeleteCardPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardCommandServiceServer).DeleteCardPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardCommandService_DeleteCardPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardCommandServiceServer).DeleteCardPermanent(ctx, req.(*FindByIdCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardCommandService_RestoreAllCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardCommandServiceServer).RestoreAllCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardCommandService_RestoreAllCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardCommandServiceServer).RestoreAllCard(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardCommandService_DeleteAllCardPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardCommandServiceServer).DeleteAllCardPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardCommandService_DeleteAllCardPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardCommandServiceServer).DeleteAllCardPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CardCommandService_ServiceDesc is the grpc.ServiceDesc for CardCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.card.CardCommandService",
	HandlerType: (*CardCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCard",
			Handler:    _CardCommandService_CreateCard_Handler,
		},
		{
			MethodName: "UpdateCard",
			Handler:    _CardCommandService_UpdateCard_Handler,
		},
		{
			MethodName: "TrashedCard",
			Handler:    _CardCommandService_TrashedCard_Handler,
		},
		{
			MethodName: "RestoreCard",
			Handler:    _CardCommandService_RestoreCard_Handler,
		},
		{
			MethodName: "DeleteCardPermanent",
			Handler:    _CardCommandService_DeleteCardPermanent_Handler,
		},
		{
			MethodName: "RestoreAllCard",
			Handler:    _CardCommandService_RestoreAllCard_Handler,
		},
		{
			MethodName: "DeleteAllCardPermanent",
			Handler:    _CardCommandService_DeleteAllCardPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card/card_command.proto",
}
