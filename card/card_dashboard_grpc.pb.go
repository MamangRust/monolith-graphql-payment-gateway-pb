// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: card/card_dashboard.proto

package card

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CardDashboardService_DashboardCard_FullMethodName       = "/pb.card.CardDashboardService/DashboardCard"
	CardDashboardService_DashboardCardNumber_FullMethodName = "/pb.card.CardDashboardService/DashboardCardNumber"
)

// CardDashboardServiceClient is the client API for CardDashboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardDashboardServiceClient interface {
	DashboardCard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseDashboardCard, error)
	DashboardCardNumber(ctx context.Context, in *FindByCardNumberRequest, opts ...grpc.CallOption) (*ApiResponseDashboardCardNumber, error)
}

type cardDashboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardDashboardServiceClient(cc grpc.ClientConnInterface) CardDashboardServiceClient {
	return &cardDashboardServiceClient{cc}
}

func (c *cardDashboardServiceClient) DashboardCard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseDashboardCard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseDashboardCard)
	err := c.cc.Invoke(ctx, CardDashboardService_DashboardCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDashboardServiceClient) DashboardCardNumber(ctx context.Context, in *FindByCardNumberRequest, opts ...grpc.CallOption) (*ApiResponseDashboardCardNumber, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseDashboardCardNumber)
	err := c.cc.Invoke(ctx, CardDashboardService_DashboardCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardDashboardServiceServer is the server API for CardDashboardService service.
// All implementations must embed UnimplementedCardDashboardServiceServer
// for forward compatibility.
type CardDashboardServiceServer interface {
	DashboardCard(context.Context, *emptypb.Empty) (*ApiResponseDashboardCard, error)
	DashboardCardNumber(context.Context, *FindByCardNumberRequest) (*ApiResponseDashboardCardNumber, error)
	mustEmbedUnimplementedCardDashboardServiceServer()
}

// UnimplementedCardDashboardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCardDashboardServiceServer struct{}

func (UnimplementedCardDashboardServiceServer) DashboardCard(context.Context, *emptypb.Empty) (*ApiResponseDashboardCard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DashboardCard not implemented")
}
func (UnimplementedCardDashboardServiceServer) DashboardCardNumber(context.Context, *FindByCardNumberRequest) (*ApiResponseDashboardCardNumber, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DashboardCardNumber not implemented")
}
func (UnimplementedCardDashboardServiceServer) mustEmbedUnimplementedCardDashboardServiceServer() {}
func (UnimplementedCardDashboardServiceServer) testEmbeddedByValue()                              {}

// UnsafeCardDashboardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardDashboardServiceServer will
// result in compilation errors.
type UnsafeCardDashboardServiceServer interface {
	mustEmbedUnimplementedCardDashboardServiceServer()
}

func RegisterCardDashboardServiceServer(s grpc.ServiceRegistrar, srv CardDashboardServiceServer) {
	// If the following call pancis, it indicates UnimplementedCardDashboardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CardDashboardService_ServiceDesc, srv)
}

func _CardDashboardService_DashboardCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardDashboardServiceServer).DashboardCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardDashboardService_DashboardCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardDashboardServiceServer).DashboardCard(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardDashboardService_DashboardCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByCardNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardDashboardServiceServer).DashboardCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardDashboardService_DashboardCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardDashboardServiceServer).DashboardCardNumber(ctx, req.(*FindByCardNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CardDashboardService_ServiceDesc is the grpc.ServiceDesc for CardDashboardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardDashboardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.card.CardDashboardService",
	HandlerType: (*CardDashboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DashboardCard",
			Handler:    _CardDashboardService_DashboardCard_Handler,
		},
		{
			MethodName: "DashboardCardNumber",
			Handler:    _CardDashboardService_DashboardCardNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card/card_dashboard.proto",
}
