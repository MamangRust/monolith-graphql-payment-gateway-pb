// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: topup/topup_query.proto

package topup

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TopupQueryService_FindAllTopup_FullMethodName             = "/pb.topup.TopupQueryService/FindAllTopup"
	TopupQueryService_FindAllTopupByCardNumber_FullMethodName = "/pb.topup.TopupQueryService/FindAllTopupByCardNumber"
	TopupQueryService_FindByIdTopup_FullMethodName            = "/pb.topup.TopupQueryService/FindByIdTopup"
	TopupQueryService_FindByCardNumberTopup_FullMethodName    = "/pb.topup.TopupQueryService/FindByCardNumberTopup"
	TopupQueryService_FindByActive_FullMethodName             = "/pb.topup.TopupQueryService/FindByActive"
	TopupQueryService_FindByTrashed_FullMethodName            = "/pb.topup.TopupQueryService/FindByTrashed"
)

// TopupQueryServiceClient is the client API for TopupQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopupQueryServiceClient interface {
	FindAllTopup(ctx context.Context, in *FindAllTopupRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTopup, error)
	FindAllTopupByCardNumber(ctx context.Context, in *FindAllTopupByCardNumberRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTopup, error)
	FindByIdTopup(ctx context.Context, in *FindByIdTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error)
	FindByCardNumberTopup(ctx context.Context, in *FindByCardNumberTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error)
	FindByActive(ctx context.Context, in *FindAllTopupRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTopupDeleteAt, error)
	FindByTrashed(ctx context.Context, in *FindAllTopupRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTopupDeleteAt, error)
}

type topupQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTopupQueryServiceClient(cc grpc.ClientConnInterface) TopupQueryServiceClient {
	return &topupQueryServiceClient{cc}
}

func (c *topupQueryServiceClient) FindAllTopup(ctx context.Context, in *FindAllTopupRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTopup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationTopup)
	err := c.cc.Invoke(ctx, TopupQueryService_FindAllTopup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupQueryServiceClient) FindAllTopupByCardNumber(ctx context.Context, in *FindAllTopupByCardNumberRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTopup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationTopup)
	err := c.cc.Invoke(ctx, TopupQueryService_FindAllTopupByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupQueryServiceClient) FindByIdTopup(ctx context.Context, in *FindByIdTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopup)
	err := c.cc.Invoke(ctx, TopupQueryService_FindByIdTopup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupQueryServiceClient) FindByCardNumberTopup(ctx context.Context, in *FindByCardNumberTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopup)
	err := c.cc.Invoke(ctx, TopupQueryService_FindByCardNumberTopup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupQueryServiceClient) FindByActive(ctx context.Context, in *FindAllTopupRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTopupDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationTopupDeleteAt)
	err := c.cc.Invoke(ctx, TopupQueryService_FindByActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupQueryServiceClient) FindByTrashed(ctx context.Context, in *FindAllTopupRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTopupDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationTopupDeleteAt)
	err := c.cc.Invoke(ctx, TopupQueryService_FindByTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopupQueryServiceServer is the server API for TopupQueryService service.
// All implementations must embed UnimplementedTopupQueryServiceServer
// for forward compatibility.
type TopupQueryServiceServer interface {
	FindAllTopup(context.Context, *FindAllTopupRequest) (*ApiResponsePaginationTopup, error)
	FindAllTopupByCardNumber(context.Context, *FindAllTopupByCardNumberRequest) (*ApiResponsePaginationTopup, error)
	FindByIdTopup(context.Context, *FindByIdTopupRequest) (*ApiResponseTopup, error)
	FindByCardNumberTopup(context.Context, *FindByCardNumberTopupRequest) (*ApiResponseTopup, error)
	FindByActive(context.Context, *FindAllTopupRequest) (*ApiResponsePaginationTopupDeleteAt, error)
	FindByTrashed(context.Context, *FindAllTopupRequest) (*ApiResponsePaginationTopupDeleteAt, error)
	mustEmbedUnimplementedTopupQueryServiceServer()
}

// UnimplementedTopupQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTopupQueryServiceServer struct{}

func (UnimplementedTopupQueryServiceServer) FindAllTopup(context.Context, *FindAllTopupRequest) (*ApiResponsePaginationTopup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTopup not implemented")
}
func (UnimplementedTopupQueryServiceServer) FindAllTopupByCardNumber(context.Context, *FindAllTopupByCardNumberRequest) (*ApiResponsePaginationTopup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTopupByCardNumber not implemented")
}
func (UnimplementedTopupQueryServiceServer) FindByIdTopup(context.Context, *FindByIdTopupRequest) (*ApiResponseTopup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByIdTopup not implemented")
}
func (UnimplementedTopupQueryServiceServer) FindByCardNumberTopup(context.Context, *FindByCardNumberTopupRequest) (*ApiResponseTopup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByCardNumberTopup not implemented")
}
func (UnimplementedTopupQueryServiceServer) FindByActive(context.Context, *FindAllTopupRequest) (*ApiResponsePaginationTopupDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActive not implemented")
}
func (UnimplementedTopupQueryServiceServer) FindByTrashed(context.Context, *FindAllTopupRequest) (*ApiResponsePaginationTopupDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashed not implemented")
}
func (UnimplementedTopupQueryServiceServer) mustEmbedUnimplementedTopupQueryServiceServer() {}
func (UnimplementedTopupQueryServiceServer) testEmbeddedByValue()                           {}

// UnsafeTopupQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopupQueryServiceServer will
// result in compilation errors.
type UnsafeTopupQueryServiceServer interface {
	mustEmbedUnimplementedTopupQueryServiceServer()
}

func RegisterTopupQueryServiceServer(s grpc.ServiceRegistrar, srv TopupQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedTopupQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TopupQueryService_ServiceDesc, srv)
}

func _TopupQueryService_FindAllTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupQueryServiceServer).FindAllTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupQueryService_FindAllTopup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupQueryServiceServer).FindAllTopup(ctx, req.(*FindAllTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupQueryService_FindAllTopupByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTopupByCardNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupQueryServiceServer).FindAllTopupByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupQueryService_FindAllTopupByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupQueryServiceServer).FindAllTopupByCardNumber(ctx, req.(*FindAllTopupByCardNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupQueryService_FindByIdTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupQueryServiceServer).FindByIdTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupQueryService_FindByIdTopup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupQueryServiceServer).FindByIdTopup(ctx, req.(*FindByIdTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupQueryService_FindByCardNumberTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByCardNumberTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupQueryServiceServer).FindByCardNumberTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupQueryService_FindByCardNumberTopup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupQueryServiceServer).FindByCardNumberTopup(ctx, req.(*FindByCardNumberTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupQueryService_FindByActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupQueryServiceServer).FindByActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupQueryService_FindByActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupQueryServiceServer).FindByActive(ctx, req.(*FindAllTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupQueryService_FindByTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupQueryServiceServer).FindByTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupQueryService_FindByTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupQueryServiceServer).FindByTrashed(ctx, req.(*FindAllTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TopupQueryService_ServiceDesc is the grpc.ServiceDesc for TopupQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopupQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.topup.TopupQueryService",
	HandlerType: (*TopupQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAllTopup",
			Handler:    _TopupQueryService_FindAllTopup_Handler,
		},
		{
			MethodName: "FindAllTopupByCardNumber",
			Handler:    _TopupQueryService_FindAllTopupByCardNumber_Handler,
		},
		{
			MethodName: "FindByIdTopup",
			Handler:    _TopupQueryService_FindByIdTopup_Handler,
		},
		{
			MethodName: "FindByCardNumberTopup",
			Handler:    _TopupQueryService_FindByCardNumberTopup_Handler,
		},
		{
			MethodName: "FindByActive",
			Handler:    _TopupQueryService_FindByActive_Handler,
		},
		{
			MethodName: "FindByTrashed",
			Handler:    _TopupQueryService_FindByTrashed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "topup/topup_query.proto",
}
