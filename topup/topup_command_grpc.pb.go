// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: topup/topup_command.proto

package topup

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TopupCommandService_CreateTopup_FullMethodName             = "/pb.topup.TopupCommandService/CreateTopup"
	TopupCommandService_UpdateTopup_FullMethodName             = "/pb.topup.TopupCommandService/UpdateTopup"
	TopupCommandService_TrashedTopup_FullMethodName            = "/pb.topup.TopupCommandService/TrashedTopup"
	TopupCommandService_RestoreTopup_FullMethodName            = "/pb.topup.TopupCommandService/RestoreTopup"
	TopupCommandService_DeleteTopupPermanent_FullMethodName    = "/pb.topup.TopupCommandService/DeleteTopupPermanent"
	TopupCommandService_RestoreAllTopup_FullMethodName         = "/pb.topup.TopupCommandService/RestoreAllTopup"
	TopupCommandService_DeleteAllTopupPermanent_FullMethodName = "/pb.topup.TopupCommandService/DeleteAllTopupPermanent"
)

// TopupCommandServiceClient is the client API for TopupCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopupCommandServiceClient interface {
	CreateTopup(ctx context.Context, in *CreateTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error)
	UpdateTopup(ctx context.Context, in *UpdateTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error)
	TrashedTopup(ctx context.Context, in *FindByIdTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopupDeleteAt, error)
	RestoreTopup(ctx context.Context, in *FindByIdTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopupDeleteAt, error)
	DeleteTopupPermanent(ctx context.Context, in *FindByIdTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopupDelete, error)
	RestoreAllTopup(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseTopupAll, error)
	DeleteAllTopupPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseTopupAll, error)
}

type topupCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTopupCommandServiceClient(cc grpc.ClientConnInterface) TopupCommandServiceClient {
	return &topupCommandServiceClient{cc}
}

func (c *topupCommandServiceClient) CreateTopup(ctx context.Context, in *CreateTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopup)
	err := c.cc.Invoke(ctx, TopupCommandService_CreateTopup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupCommandServiceClient) UpdateTopup(ctx context.Context, in *UpdateTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopup)
	err := c.cc.Invoke(ctx, TopupCommandService_UpdateTopup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupCommandServiceClient) TrashedTopup(ctx context.Context, in *FindByIdTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopupDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupDeleteAt)
	err := c.cc.Invoke(ctx, TopupCommandService_TrashedTopup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupCommandServiceClient) RestoreTopup(ctx context.Context, in *FindByIdTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopupDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupDeleteAt)
	err := c.cc.Invoke(ctx, TopupCommandService_RestoreTopup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupCommandServiceClient) DeleteTopupPermanent(ctx context.Context, in *FindByIdTopupRequest, opts ...grpc.CallOption) (*ApiResponseTopupDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupDelete)
	err := c.cc.Invoke(ctx, TopupCommandService_DeleteTopupPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupCommandServiceClient) RestoreAllTopup(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseTopupAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupAll)
	err := c.cc.Invoke(ctx, TopupCommandService_RestoreAllTopup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupCommandServiceClient) DeleteAllTopupPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseTopupAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupAll)
	err := c.cc.Invoke(ctx, TopupCommandService_DeleteAllTopupPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopupCommandServiceServer is the server API for TopupCommandService service.
// All implementations must embed UnimplementedTopupCommandServiceServer
// for forward compatibility.
type TopupCommandServiceServer interface {
	CreateTopup(context.Context, *CreateTopupRequest) (*ApiResponseTopup, error)
	UpdateTopup(context.Context, *UpdateTopupRequest) (*ApiResponseTopup, error)
	TrashedTopup(context.Context, *FindByIdTopupRequest) (*ApiResponseTopupDeleteAt, error)
	RestoreTopup(context.Context, *FindByIdTopupRequest) (*ApiResponseTopupDeleteAt, error)
	DeleteTopupPermanent(context.Context, *FindByIdTopupRequest) (*ApiResponseTopupDelete, error)
	RestoreAllTopup(context.Context, *emptypb.Empty) (*ApiResponseTopupAll, error)
	DeleteAllTopupPermanent(context.Context, *emptypb.Empty) (*ApiResponseTopupAll, error)
	mustEmbedUnimplementedTopupCommandServiceServer()
}

// UnimplementedTopupCommandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTopupCommandServiceServer struct{}

func (UnimplementedTopupCommandServiceServer) CreateTopup(context.Context, *CreateTopupRequest) (*ApiResponseTopup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopup not implemented")
}
func (UnimplementedTopupCommandServiceServer) UpdateTopup(context.Context, *UpdateTopupRequest) (*ApiResponseTopup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTopup not implemented")
}
func (UnimplementedTopupCommandServiceServer) TrashedTopup(context.Context, *FindByIdTopupRequest) (*ApiResponseTopupDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrashedTopup not implemented")
}
func (UnimplementedTopupCommandServiceServer) RestoreTopup(context.Context, *FindByIdTopupRequest) (*ApiResponseTopupDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreTopup not implemented")
}
func (UnimplementedTopupCommandServiceServer) DeleteTopupPermanent(context.Context, *FindByIdTopupRequest) (*ApiResponseTopupDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopupPermanent not implemented")
}
func (UnimplementedTopupCommandServiceServer) RestoreAllTopup(context.Context, *emptypb.Empty) (*ApiResponseTopupAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllTopup not implemented")
}
func (UnimplementedTopupCommandServiceServer) DeleteAllTopupPermanent(context.Context, *emptypb.Empty) (*ApiResponseTopupAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllTopupPermanent not implemented")
}
func (UnimplementedTopupCommandServiceServer) mustEmbedUnimplementedTopupCommandServiceServer() {}
func (UnimplementedTopupCommandServiceServer) testEmbeddedByValue()                             {}

// UnsafeTopupCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopupCommandServiceServer will
// result in compilation errors.
type UnsafeTopupCommandServiceServer interface {
	mustEmbedUnimplementedTopupCommandServiceServer()
}

func RegisterTopupCommandServiceServer(s grpc.ServiceRegistrar, srv TopupCommandServiceServer) {
	// If the following call pancis, it indicates UnimplementedTopupCommandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TopupCommandService_ServiceDesc, srv)
}

func _TopupCommandService_CreateTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupCommandServiceServer).CreateTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupCommandService_CreateTopup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupCommandServiceServer).CreateTopup(ctx, req.(*CreateTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupCommandService_UpdateTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupCommandServiceServer).UpdateTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupCommandService_UpdateTopup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupCommandServiceServer).UpdateTopup(ctx, req.(*UpdateTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupCommandService_TrashedTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupCommandServiceServer).TrashedTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupCommandService_TrashedTopup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupCommandServiceServer).TrashedTopup(ctx, req.(*FindByIdTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupCommandService_RestoreTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupCommandServiceServer).RestoreTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupCommandService_RestoreTopup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupCommandServiceServer).RestoreTopup(ctx, req.(*FindByIdTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupCommandService_DeleteTopupPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupCommandServiceServer).DeleteTopupPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupCommandService_DeleteTopupPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupCommandServiceServer).DeleteTopupPermanent(ctx, req.(*FindByIdTopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupCommandService_RestoreAllTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupCommandServiceServer).RestoreAllTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupCommandService_RestoreAllTopup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupCommandServiceServer).RestoreAllTopup(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupCommandService_DeleteAllTopupPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupCommandServiceServer).DeleteAllTopupPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupCommandService_DeleteAllTopupPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupCommandServiceServer).DeleteAllTopupPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TopupCommandService_ServiceDesc is the grpc.ServiceDesc for TopupCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopupCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.topup.TopupCommandService",
	HandlerType: (*TopupCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTopup",
			Handler:    _TopupCommandService_CreateTopup_Handler,
		},
		{
			MethodName: "UpdateTopup",
			Handler:    _TopupCommandService_UpdateTopup_Handler,
		},
		{
			MethodName: "TrashedTopup",
			Handler:    _TopupCommandService_TrashedTopup_Handler,
		},
		{
			MethodName: "RestoreTopup",
			Handler:    _TopupCommandService_RestoreTopup_Handler,
		},
		{
			MethodName: "DeleteTopupPermanent",
			Handler:    _TopupCommandService_DeleteTopupPermanent_Handler,
		},
		{
			MethodName: "RestoreAllTopup",
			Handler:    _TopupCommandService_RestoreAllTopup_Handler,
		},
		{
			MethodName: "DeleteAllTopupPermanent",
			Handler:    _TopupCommandService_DeleteAllTopupPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "topup/topup_command.proto",
}
