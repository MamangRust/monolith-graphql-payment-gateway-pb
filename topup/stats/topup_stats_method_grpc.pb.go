// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: topup/stats/topup_stats_method.proto

package stats

import (
	context "context"
	topup "github.com/MamangRust/monolith-graphql-payment-gateway-pb/topup"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TopupStatsMethodService_FindMonthlyTopupMethods_FullMethodName             = "/pb.topup.stats.TopupStatsMethodService/FindMonthlyTopupMethods"
	TopupStatsMethodService_FindYearlyTopupMethods_FullMethodName              = "/pb.topup.stats.TopupStatsMethodService/FindYearlyTopupMethods"
	TopupStatsMethodService_FindMonthlyTopupMethodsByCardNumber_FullMethodName = "/pb.topup.stats.TopupStatsMethodService/FindMonthlyTopupMethodsByCardNumber"
	TopupStatsMethodService_FindYearlyTopupMethodsByCardNumber_FullMethodName  = "/pb.topup.stats.TopupStatsMethodService/FindYearlyTopupMethodsByCardNumber"
)

// TopupStatsMethodServiceClient is the client API for TopupStatsMethodService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopupStatsMethodServiceClient interface {
	FindMonthlyTopupMethods(ctx context.Context, in *topup.FindYearTopupStatus, opts ...grpc.CallOption) (*ApiResponseTopupMonthMethod, error)
	FindYearlyTopupMethods(ctx context.Context, in *topup.FindYearTopupStatus, opts ...grpc.CallOption) (*ApiResponseTopupYearMethod, error)
	FindMonthlyTopupMethodsByCardNumber(ctx context.Context, in *topup.FindYearTopupCardNumber, opts ...grpc.CallOption) (*ApiResponseTopupMonthMethod, error)
	FindYearlyTopupMethodsByCardNumber(ctx context.Context, in *topup.FindYearTopupCardNumber, opts ...grpc.CallOption) (*ApiResponseTopupYearMethod, error)
}

type topupStatsMethodServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTopupStatsMethodServiceClient(cc grpc.ClientConnInterface) TopupStatsMethodServiceClient {
	return &topupStatsMethodServiceClient{cc}
}

func (c *topupStatsMethodServiceClient) FindMonthlyTopupMethods(ctx context.Context, in *topup.FindYearTopupStatus, opts ...grpc.CallOption) (*ApiResponseTopupMonthMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupMonthMethod)
	err := c.cc.Invoke(ctx, TopupStatsMethodService_FindMonthlyTopupMethods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupStatsMethodServiceClient) FindYearlyTopupMethods(ctx context.Context, in *topup.FindYearTopupStatus, opts ...grpc.CallOption) (*ApiResponseTopupYearMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupYearMethod)
	err := c.cc.Invoke(ctx, TopupStatsMethodService_FindYearlyTopupMethods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupStatsMethodServiceClient) FindMonthlyTopupMethodsByCardNumber(ctx context.Context, in *topup.FindYearTopupCardNumber, opts ...grpc.CallOption) (*ApiResponseTopupMonthMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupMonthMethod)
	err := c.cc.Invoke(ctx, TopupStatsMethodService_FindMonthlyTopupMethodsByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupStatsMethodServiceClient) FindYearlyTopupMethodsByCardNumber(ctx context.Context, in *topup.FindYearTopupCardNumber, opts ...grpc.CallOption) (*ApiResponseTopupYearMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupYearMethod)
	err := c.cc.Invoke(ctx, TopupStatsMethodService_FindYearlyTopupMethodsByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopupStatsMethodServiceServer is the server API for TopupStatsMethodService service.
// All implementations must embed UnimplementedTopupStatsMethodServiceServer
// for forward compatibility.
type TopupStatsMethodServiceServer interface {
	FindMonthlyTopupMethods(context.Context, *topup.FindYearTopupStatus) (*ApiResponseTopupMonthMethod, error)
	FindYearlyTopupMethods(context.Context, *topup.FindYearTopupStatus) (*ApiResponseTopupYearMethod, error)
	FindMonthlyTopupMethodsByCardNumber(context.Context, *topup.FindYearTopupCardNumber) (*ApiResponseTopupMonthMethod, error)
	FindYearlyTopupMethodsByCardNumber(context.Context, *topup.FindYearTopupCardNumber) (*ApiResponseTopupYearMethod, error)
	mustEmbedUnimplementedTopupStatsMethodServiceServer()
}

// UnimplementedTopupStatsMethodServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTopupStatsMethodServiceServer struct{}

func (UnimplementedTopupStatsMethodServiceServer) FindMonthlyTopupMethods(context.Context, *topup.FindYearTopupStatus) (*ApiResponseTopupMonthMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTopupMethods not implemented")
}
func (UnimplementedTopupStatsMethodServiceServer) FindYearlyTopupMethods(context.Context, *topup.FindYearTopupStatus) (*ApiResponseTopupYearMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTopupMethods not implemented")
}
func (UnimplementedTopupStatsMethodServiceServer) FindMonthlyTopupMethodsByCardNumber(context.Context, *topup.FindYearTopupCardNumber) (*ApiResponseTopupMonthMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTopupMethodsByCardNumber not implemented")
}
func (UnimplementedTopupStatsMethodServiceServer) FindYearlyTopupMethodsByCardNumber(context.Context, *topup.FindYearTopupCardNumber) (*ApiResponseTopupYearMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTopupMethodsByCardNumber not implemented")
}
func (UnimplementedTopupStatsMethodServiceServer) mustEmbedUnimplementedTopupStatsMethodServiceServer() {
}
func (UnimplementedTopupStatsMethodServiceServer) testEmbeddedByValue() {}

// UnsafeTopupStatsMethodServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopupStatsMethodServiceServer will
// result in compilation errors.
type UnsafeTopupStatsMethodServiceServer interface {
	mustEmbedUnimplementedTopupStatsMethodServiceServer()
}

func RegisterTopupStatsMethodServiceServer(s grpc.ServiceRegistrar, srv TopupStatsMethodServiceServer) {
	// If the following call pancis, it indicates UnimplementedTopupStatsMethodServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TopupStatsMethodService_ServiceDesc, srv)
}

func _TopupStatsMethodService_FindMonthlyTopupMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topup.FindYearTopupStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupStatsMethodServiceServer).FindMonthlyTopupMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupStatsMethodService_FindMonthlyTopupMethods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupStatsMethodServiceServer).FindMonthlyTopupMethods(ctx, req.(*topup.FindYearTopupStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupStatsMethodService_FindYearlyTopupMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topup.FindYearTopupStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupStatsMethodServiceServer).FindYearlyTopupMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupStatsMethodService_FindYearlyTopupMethods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupStatsMethodServiceServer).FindYearlyTopupMethods(ctx, req.(*topup.FindYearTopupStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupStatsMethodService_FindMonthlyTopupMethodsByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topup.FindYearTopupCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupStatsMethodServiceServer).FindMonthlyTopupMethodsByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupStatsMethodService_FindMonthlyTopupMethodsByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupStatsMethodServiceServer).FindMonthlyTopupMethodsByCardNumber(ctx, req.(*topup.FindYearTopupCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupStatsMethodService_FindYearlyTopupMethodsByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topup.FindYearTopupCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupStatsMethodServiceServer).FindYearlyTopupMethodsByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupStatsMethodService_FindYearlyTopupMethodsByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupStatsMethodServiceServer).FindYearlyTopupMethodsByCardNumber(ctx, req.(*topup.FindYearTopupCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

// TopupStatsMethodService_ServiceDesc is the grpc.ServiceDesc for TopupStatsMethodService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopupStatsMethodService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.topup.stats.TopupStatsMethodService",
	HandlerType: (*TopupStatsMethodServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMonthlyTopupMethods",
			Handler:    _TopupStatsMethodService_FindMonthlyTopupMethods_Handler,
		},
		{
			MethodName: "FindYearlyTopupMethods",
			Handler:    _TopupStatsMethodService_FindYearlyTopupMethods_Handler,
		},
		{
			MethodName: "FindMonthlyTopupMethodsByCardNumber",
			Handler:    _TopupStatsMethodService_FindMonthlyTopupMethodsByCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyTopupMethodsByCardNumber",
			Handler:    _TopupStatsMethodService_FindYearlyTopupMethodsByCardNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "topup/stats/topup_stats_method.proto",
}
