// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: topup/stats/topup_stats_amount.proto

package stats

import (
	context "context"
	topup "github.com/MamangRust/monolith-graphql-payment-gateway-pb/topup"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TopupStatsAmountService_FindMonthlyTopupAmounts_FullMethodName             = "/pb.topup.stats.TopupStatsAmountService/FindMonthlyTopupAmounts"
	TopupStatsAmountService_FindYearlyTopupAmounts_FullMethodName              = "/pb.topup.stats.TopupStatsAmountService/FindYearlyTopupAmounts"
	TopupStatsAmountService_FindMonthlyTopupAmountsByCardNumber_FullMethodName = "/pb.topup.stats.TopupStatsAmountService/FindMonthlyTopupAmountsByCardNumber"
	TopupStatsAmountService_FindYearlyTopupAmountsByCardNumber_FullMethodName  = "/pb.topup.stats.TopupStatsAmountService/FindYearlyTopupAmountsByCardNumber"
)

// TopupStatsAmountServiceClient is the client API for TopupStatsAmountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopupStatsAmountServiceClient interface {
	FindMonthlyTopupAmounts(ctx context.Context, in *topup.FindYearTopupStatus, opts ...grpc.CallOption) (*ApiResponseTopupMonthAmount, error)
	FindYearlyTopupAmounts(ctx context.Context, in *topup.FindYearTopupStatus, opts ...grpc.CallOption) (*ApiResponseTopupYearAmount, error)
	FindMonthlyTopupAmountsByCardNumber(ctx context.Context, in *topup.FindYearTopupCardNumber, opts ...grpc.CallOption) (*ApiResponseTopupMonthAmount, error)
	FindYearlyTopupAmountsByCardNumber(ctx context.Context, in *topup.FindYearTopupCardNumber, opts ...grpc.CallOption) (*ApiResponseTopupYearAmount, error)
}

type topupStatsAmountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTopupStatsAmountServiceClient(cc grpc.ClientConnInterface) TopupStatsAmountServiceClient {
	return &topupStatsAmountServiceClient{cc}
}

func (c *topupStatsAmountServiceClient) FindMonthlyTopupAmounts(ctx context.Context, in *topup.FindYearTopupStatus, opts ...grpc.CallOption) (*ApiResponseTopupMonthAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupMonthAmount)
	err := c.cc.Invoke(ctx, TopupStatsAmountService_FindMonthlyTopupAmounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupStatsAmountServiceClient) FindYearlyTopupAmounts(ctx context.Context, in *topup.FindYearTopupStatus, opts ...grpc.CallOption) (*ApiResponseTopupYearAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupYearAmount)
	err := c.cc.Invoke(ctx, TopupStatsAmountService_FindYearlyTopupAmounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupStatsAmountServiceClient) FindMonthlyTopupAmountsByCardNumber(ctx context.Context, in *topup.FindYearTopupCardNumber, opts ...grpc.CallOption) (*ApiResponseTopupMonthAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupMonthAmount)
	err := c.cc.Invoke(ctx, TopupStatsAmountService_FindMonthlyTopupAmountsByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupStatsAmountServiceClient) FindYearlyTopupAmountsByCardNumber(ctx context.Context, in *topup.FindYearTopupCardNumber, opts ...grpc.CallOption) (*ApiResponseTopupYearAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupYearAmount)
	err := c.cc.Invoke(ctx, TopupStatsAmountService_FindYearlyTopupAmountsByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopupStatsAmountServiceServer is the server API for TopupStatsAmountService service.
// All implementations must embed UnimplementedTopupStatsAmountServiceServer
// for forward compatibility.
type TopupStatsAmountServiceServer interface {
	FindMonthlyTopupAmounts(context.Context, *topup.FindYearTopupStatus) (*ApiResponseTopupMonthAmount, error)
	FindYearlyTopupAmounts(context.Context, *topup.FindYearTopupStatus) (*ApiResponseTopupYearAmount, error)
	FindMonthlyTopupAmountsByCardNumber(context.Context, *topup.FindYearTopupCardNumber) (*ApiResponseTopupMonthAmount, error)
	FindYearlyTopupAmountsByCardNumber(context.Context, *topup.FindYearTopupCardNumber) (*ApiResponseTopupYearAmount, error)
	mustEmbedUnimplementedTopupStatsAmountServiceServer()
}

// UnimplementedTopupStatsAmountServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTopupStatsAmountServiceServer struct{}

func (UnimplementedTopupStatsAmountServiceServer) FindMonthlyTopupAmounts(context.Context, *topup.FindYearTopupStatus) (*ApiResponseTopupMonthAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTopupAmounts not implemented")
}
func (UnimplementedTopupStatsAmountServiceServer) FindYearlyTopupAmounts(context.Context, *topup.FindYearTopupStatus) (*ApiResponseTopupYearAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTopupAmounts not implemented")
}
func (UnimplementedTopupStatsAmountServiceServer) FindMonthlyTopupAmountsByCardNumber(context.Context, *topup.FindYearTopupCardNumber) (*ApiResponseTopupMonthAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTopupAmountsByCardNumber not implemented")
}
func (UnimplementedTopupStatsAmountServiceServer) FindYearlyTopupAmountsByCardNumber(context.Context, *topup.FindYearTopupCardNumber) (*ApiResponseTopupYearAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTopupAmountsByCardNumber not implemented")
}
func (UnimplementedTopupStatsAmountServiceServer) mustEmbedUnimplementedTopupStatsAmountServiceServer() {
}
func (UnimplementedTopupStatsAmountServiceServer) testEmbeddedByValue() {}

// UnsafeTopupStatsAmountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopupStatsAmountServiceServer will
// result in compilation errors.
type UnsafeTopupStatsAmountServiceServer interface {
	mustEmbedUnimplementedTopupStatsAmountServiceServer()
}

func RegisterTopupStatsAmountServiceServer(s grpc.ServiceRegistrar, srv TopupStatsAmountServiceServer) {
	// If the following call pancis, it indicates UnimplementedTopupStatsAmountServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TopupStatsAmountService_ServiceDesc, srv)
}

func _TopupStatsAmountService_FindMonthlyTopupAmounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topup.FindYearTopupStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupStatsAmountServiceServer).FindMonthlyTopupAmounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupStatsAmountService_FindMonthlyTopupAmounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupStatsAmountServiceServer).FindMonthlyTopupAmounts(ctx, req.(*topup.FindYearTopupStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupStatsAmountService_FindYearlyTopupAmounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topup.FindYearTopupStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupStatsAmountServiceServer).FindYearlyTopupAmounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupStatsAmountService_FindYearlyTopupAmounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupStatsAmountServiceServer).FindYearlyTopupAmounts(ctx, req.(*topup.FindYearTopupStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupStatsAmountService_FindMonthlyTopupAmountsByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topup.FindYearTopupCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupStatsAmountServiceServer).FindMonthlyTopupAmountsByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupStatsAmountService_FindMonthlyTopupAmountsByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupStatsAmountServiceServer).FindMonthlyTopupAmountsByCardNumber(ctx, req.(*topup.FindYearTopupCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupStatsAmountService_FindYearlyTopupAmountsByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topup.FindYearTopupCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupStatsAmountServiceServer).FindYearlyTopupAmountsByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupStatsAmountService_FindYearlyTopupAmountsByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupStatsAmountServiceServer).FindYearlyTopupAmountsByCardNumber(ctx, req.(*topup.FindYearTopupCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

// TopupStatsAmountService_ServiceDesc is the grpc.ServiceDesc for TopupStatsAmountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopupStatsAmountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.topup.stats.TopupStatsAmountService",
	HandlerType: (*TopupStatsAmountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMonthlyTopupAmounts",
			Handler:    _TopupStatsAmountService_FindMonthlyTopupAmounts_Handler,
		},
		{
			MethodName: "FindYearlyTopupAmounts",
			Handler:    _TopupStatsAmountService_FindYearlyTopupAmounts_Handler,
		},
		{
			MethodName: "FindMonthlyTopupAmountsByCardNumber",
			Handler:    _TopupStatsAmountService_FindMonthlyTopupAmountsByCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyTopupAmountsByCardNumber",
			Handler:    _TopupStatsAmountService_FindYearlyTopupAmountsByCardNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "topup/stats/topup_stats_amount.proto",
}
