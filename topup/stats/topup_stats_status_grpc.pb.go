// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: topup/stats/topup_stats_status.proto

package stats

import (
	context "context"
	topup "github.com/MamangRust/monolith-graphql-payment-gateway-pb/topup"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TopupStatsStatusService_FindMonthlyTopupStatusSuccess_FullMethodName             = "/pb.topup.stats.TopupStatsStatusService/FindMonthlyTopupStatusSuccess"
	TopupStatsStatusService_FindYearlyTopupStatusSuccess_FullMethodName              = "/pb.topup.stats.TopupStatsStatusService/FindYearlyTopupStatusSuccess"
	TopupStatsStatusService_FindMonthlyTopupStatusFailed_FullMethodName              = "/pb.topup.stats.TopupStatsStatusService/FindMonthlyTopupStatusFailed"
	TopupStatsStatusService_FindYearlyTopupStatusFailed_FullMethodName               = "/pb.topup.stats.TopupStatsStatusService/FindYearlyTopupStatusFailed"
	TopupStatsStatusService_FindMonthlyTopupStatusSuccessByCardNumber_FullMethodName = "/pb.topup.stats.TopupStatsStatusService/FindMonthlyTopupStatusSuccessByCardNumber"
	TopupStatsStatusService_FindYearlyTopupStatusSuccessByCardNumber_FullMethodName  = "/pb.topup.stats.TopupStatsStatusService/FindYearlyTopupStatusSuccessByCardNumber"
	TopupStatsStatusService_FindMonthlyTopupStatusFailedByCardNumber_FullMethodName  = "/pb.topup.stats.TopupStatsStatusService/FindMonthlyTopupStatusFailedByCardNumber"
	TopupStatsStatusService_FindYearlyTopupStatusFailedByCardNumber_FullMethodName   = "/pb.topup.stats.TopupStatsStatusService/FindYearlyTopupStatusFailedByCardNumber"
)

// TopupStatsStatusServiceClient is the client API for TopupStatsStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopupStatsStatusServiceClient interface {
	FindMonthlyTopupStatusSuccess(ctx context.Context, in *topup.FindMonthlyTopupStatus, opts ...grpc.CallOption) (*ApiResponseTopupMonthStatusSuccess, error)
	FindYearlyTopupStatusSuccess(ctx context.Context, in *topup.FindYearTopupStatus, opts ...grpc.CallOption) (*ApiResponseTopupYearStatusSuccess, error)
	FindMonthlyTopupStatusFailed(ctx context.Context, in *topup.FindMonthlyTopupStatus, opts ...grpc.CallOption) (*ApiResponseTopupMonthStatusFailed, error)
	FindYearlyTopupStatusFailed(ctx context.Context, in *topup.FindYearTopupStatus, opts ...grpc.CallOption) (*ApiResponseTopupYearStatusFailed, error)
	FindMonthlyTopupStatusSuccessByCardNumber(ctx context.Context, in *topup.FindMonthlyTopupStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseTopupMonthStatusSuccess, error)
	FindYearlyTopupStatusSuccessByCardNumber(ctx context.Context, in *topup.FindYearTopupStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseTopupYearStatusSuccess, error)
	FindMonthlyTopupStatusFailedByCardNumber(ctx context.Context, in *topup.FindMonthlyTopupStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseTopupMonthStatusFailed, error)
	FindYearlyTopupStatusFailedByCardNumber(ctx context.Context, in *topup.FindYearTopupStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseTopupYearStatusFailed, error)
}

type topupStatsStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTopupStatsStatusServiceClient(cc grpc.ClientConnInterface) TopupStatsStatusServiceClient {
	return &topupStatsStatusServiceClient{cc}
}

func (c *topupStatsStatusServiceClient) FindMonthlyTopupStatusSuccess(ctx context.Context, in *topup.FindMonthlyTopupStatus, opts ...grpc.CallOption) (*ApiResponseTopupMonthStatusSuccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupMonthStatusSuccess)
	err := c.cc.Invoke(ctx, TopupStatsStatusService_FindMonthlyTopupStatusSuccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupStatsStatusServiceClient) FindYearlyTopupStatusSuccess(ctx context.Context, in *topup.FindYearTopupStatus, opts ...grpc.CallOption) (*ApiResponseTopupYearStatusSuccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupYearStatusSuccess)
	err := c.cc.Invoke(ctx, TopupStatsStatusService_FindYearlyTopupStatusSuccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupStatsStatusServiceClient) FindMonthlyTopupStatusFailed(ctx context.Context, in *topup.FindMonthlyTopupStatus, opts ...grpc.CallOption) (*ApiResponseTopupMonthStatusFailed, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupMonthStatusFailed)
	err := c.cc.Invoke(ctx, TopupStatsStatusService_FindMonthlyTopupStatusFailed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupStatsStatusServiceClient) FindYearlyTopupStatusFailed(ctx context.Context, in *topup.FindYearTopupStatus, opts ...grpc.CallOption) (*ApiResponseTopupYearStatusFailed, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupYearStatusFailed)
	err := c.cc.Invoke(ctx, TopupStatsStatusService_FindYearlyTopupStatusFailed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupStatsStatusServiceClient) FindMonthlyTopupStatusSuccessByCardNumber(ctx context.Context, in *topup.FindMonthlyTopupStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseTopupMonthStatusSuccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupMonthStatusSuccess)
	err := c.cc.Invoke(ctx, TopupStatsStatusService_FindMonthlyTopupStatusSuccessByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupStatsStatusServiceClient) FindYearlyTopupStatusSuccessByCardNumber(ctx context.Context, in *topup.FindYearTopupStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseTopupYearStatusSuccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupYearStatusSuccess)
	err := c.cc.Invoke(ctx, TopupStatsStatusService_FindYearlyTopupStatusSuccessByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupStatsStatusServiceClient) FindMonthlyTopupStatusFailedByCardNumber(ctx context.Context, in *topup.FindMonthlyTopupStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseTopupMonthStatusFailed, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupMonthStatusFailed)
	err := c.cc.Invoke(ctx, TopupStatsStatusService_FindMonthlyTopupStatusFailedByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topupStatsStatusServiceClient) FindYearlyTopupStatusFailedByCardNumber(ctx context.Context, in *topup.FindYearTopupStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseTopupYearStatusFailed, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTopupYearStatusFailed)
	err := c.cc.Invoke(ctx, TopupStatsStatusService_FindYearlyTopupStatusFailedByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopupStatsStatusServiceServer is the server API for TopupStatsStatusService service.
// All implementations must embed UnimplementedTopupStatsStatusServiceServer
// for forward compatibility.
type TopupStatsStatusServiceServer interface {
	FindMonthlyTopupStatusSuccess(context.Context, *topup.FindMonthlyTopupStatus) (*ApiResponseTopupMonthStatusSuccess, error)
	FindYearlyTopupStatusSuccess(context.Context, *topup.FindYearTopupStatus) (*ApiResponseTopupYearStatusSuccess, error)
	FindMonthlyTopupStatusFailed(context.Context, *topup.FindMonthlyTopupStatus) (*ApiResponseTopupMonthStatusFailed, error)
	FindYearlyTopupStatusFailed(context.Context, *topup.FindYearTopupStatus) (*ApiResponseTopupYearStatusFailed, error)
	FindMonthlyTopupStatusSuccessByCardNumber(context.Context, *topup.FindMonthlyTopupStatusCardNumber) (*ApiResponseTopupMonthStatusSuccess, error)
	FindYearlyTopupStatusSuccessByCardNumber(context.Context, *topup.FindYearTopupStatusCardNumber) (*ApiResponseTopupYearStatusSuccess, error)
	FindMonthlyTopupStatusFailedByCardNumber(context.Context, *topup.FindMonthlyTopupStatusCardNumber) (*ApiResponseTopupMonthStatusFailed, error)
	FindYearlyTopupStatusFailedByCardNumber(context.Context, *topup.FindYearTopupStatusCardNumber) (*ApiResponseTopupYearStatusFailed, error)
	mustEmbedUnimplementedTopupStatsStatusServiceServer()
}

// UnimplementedTopupStatsStatusServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTopupStatsStatusServiceServer struct{}

func (UnimplementedTopupStatsStatusServiceServer) FindMonthlyTopupStatusSuccess(context.Context, *topup.FindMonthlyTopupStatus) (*ApiResponseTopupMonthStatusSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTopupStatusSuccess not implemented")
}
func (UnimplementedTopupStatsStatusServiceServer) FindYearlyTopupStatusSuccess(context.Context, *topup.FindYearTopupStatus) (*ApiResponseTopupYearStatusSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTopupStatusSuccess not implemented")
}
func (UnimplementedTopupStatsStatusServiceServer) FindMonthlyTopupStatusFailed(context.Context, *topup.FindMonthlyTopupStatus) (*ApiResponseTopupMonthStatusFailed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTopupStatusFailed not implemented")
}
func (UnimplementedTopupStatsStatusServiceServer) FindYearlyTopupStatusFailed(context.Context, *topup.FindYearTopupStatus) (*ApiResponseTopupYearStatusFailed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTopupStatusFailed not implemented")
}
func (UnimplementedTopupStatsStatusServiceServer) FindMonthlyTopupStatusSuccessByCardNumber(context.Context, *topup.FindMonthlyTopupStatusCardNumber) (*ApiResponseTopupMonthStatusSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTopupStatusSuccessByCardNumber not implemented")
}
func (UnimplementedTopupStatsStatusServiceServer) FindYearlyTopupStatusSuccessByCardNumber(context.Context, *topup.FindYearTopupStatusCardNumber) (*ApiResponseTopupYearStatusSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTopupStatusSuccessByCardNumber not implemented")
}
func (UnimplementedTopupStatsStatusServiceServer) FindMonthlyTopupStatusFailedByCardNumber(context.Context, *topup.FindMonthlyTopupStatusCardNumber) (*ApiResponseTopupMonthStatusFailed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTopupStatusFailedByCardNumber not implemented")
}
func (UnimplementedTopupStatsStatusServiceServer) FindYearlyTopupStatusFailedByCardNumber(context.Context, *topup.FindYearTopupStatusCardNumber) (*ApiResponseTopupYearStatusFailed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTopupStatusFailedByCardNumber not implemented")
}
func (UnimplementedTopupStatsStatusServiceServer) mustEmbedUnimplementedTopupStatsStatusServiceServer() {
}
func (UnimplementedTopupStatsStatusServiceServer) testEmbeddedByValue() {}

// UnsafeTopupStatsStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopupStatsStatusServiceServer will
// result in compilation errors.
type UnsafeTopupStatsStatusServiceServer interface {
	mustEmbedUnimplementedTopupStatsStatusServiceServer()
}

func RegisterTopupStatsStatusServiceServer(s grpc.ServiceRegistrar, srv TopupStatsStatusServiceServer) {
	// If the following call pancis, it indicates UnimplementedTopupStatsStatusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TopupStatsStatusService_ServiceDesc, srv)
}

func _TopupStatsStatusService_FindMonthlyTopupStatusSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topup.FindMonthlyTopupStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupStatsStatusServiceServer).FindMonthlyTopupStatusSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupStatsStatusService_FindMonthlyTopupStatusSuccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupStatsStatusServiceServer).FindMonthlyTopupStatusSuccess(ctx, req.(*topup.FindMonthlyTopupStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupStatsStatusService_FindYearlyTopupStatusSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topup.FindYearTopupStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupStatsStatusServiceServer).FindYearlyTopupStatusSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupStatsStatusService_FindYearlyTopupStatusSuccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupStatsStatusServiceServer).FindYearlyTopupStatusSuccess(ctx, req.(*topup.FindYearTopupStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupStatsStatusService_FindMonthlyTopupStatusFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topup.FindMonthlyTopupStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupStatsStatusServiceServer).FindMonthlyTopupStatusFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupStatsStatusService_FindMonthlyTopupStatusFailed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupStatsStatusServiceServer).FindMonthlyTopupStatusFailed(ctx, req.(*topup.FindMonthlyTopupStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupStatsStatusService_FindYearlyTopupStatusFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topup.FindYearTopupStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupStatsStatusServiceServer).FindYearlyTopupStatusFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupStatsStatusService_FindYearlyTopupStatusFailed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupStatsStatusServiceServer).FindYearlyTopupStatusFailed(ctx, req.(*topup.FindYearTopupStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupStatsStatusService_FindMonthlyTopupStatusSuccessByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topup.FindMonthlyTopupStatusCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupStatsStatusServiceServer).FindMonthlyTopupStatusSuccessByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupStatsStatusService_FindMonthlyTopupStatusSuccessByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupStatsStatusServiceServer).FindMonthlyTopupStatusSuccessByCardNumber(ctx, req.(*topup.FindMonthlyTopupStatusCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupStatsStatusService_FindYearlyTopupStatusSuccessByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topup.FindYearTopupStatusCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupStatsStatusServiceServer).FindYearlyTopupStatusSuccessByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupStatsStatusService_FindYearlyTopupStatusSuccessByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupStatsStatusServiceServer).FindYearlyTopupStatusSuccessByCardNumber(ctx, req.(*topup.FindYearTopupStatusCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupStatsStatusService_FindMonthlyTopupStatusFailedByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topup.FindMonthlyTopupStatusCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupStatsStatusServiceServer).FindMonthlyTopupStatusFailedByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupStatsStatusService_FindMonthlyTopupStatusFailedByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupStatsStatusServiceServer).FindMonthlyTopupStatusFailedByCardNumber(ctx, req.(*topup.FindMonthlyTopupStatusCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopupStatsStatusService_FindYearlyTopupStatusFailedByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topup.FindYearTopupStatusCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopupStatsStatusServiceServer).FindYearlyTopupStatusFailedByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopupStatsStatusService_FindYearlyTopupStatusFailedByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopupStatsStatusServiceServer).FindYearlyTopupStatusFailedByCardNumber(ctx, req.(*topup.FindYearTopupStatusCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

// TopupStatsStatusService_ServiceDesc is the grpc.ServiceDesc for TopupStatsStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopupStatsStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.topup.stats.TopupStatsStatusService",
	HandlerType: (*TopupStatsStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMonthlyTopupStatusSuccess",
			Handler:    _TopupStatsStatusService_FindMonthlyTopupStatusSuccess_Handler,
		},
		{
			MethodName: "FindYearlyTopupStatusSuccess",
			Handler:    _TopupStatsStatusService_FindYearlyTopupStatusSuccess_Handler,
		},
		{
			MethodName: "FindMonthlyTopupStatusFailed",
			Handler:    _TopupStatsStatusService_FindMonthlyTopupStatusFailed_Handler,
		},
		{
			MethodName: "FindYearlyTopupStatusFailed",
			Handler:    _TopupStatsStatusService_FindYearlyTopupStatusFailed_Handler,
		},
		{
			MethodName: "FindMonthlyTopupStatusSuccessByCardNumber",
			Handler:    _TopupStatsStatusService_FindMonthlyTopupStatusSuccessByCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyTopupStatusSuccessByCardNumber",
			Handler:    _TopupStatsStatusService_FindYearlyTopupStatusSuccessByCardNumber_Handler,
		},
		{
			MethodName: "FindMonthlyTopupStatusFailedByCardNumber",
			Handler:    _TopupStatsStatusService_FindMonthlyTopupStatusFailedByCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyTopupStatusFailedByCardNumber",
			Handler:    _TopupStatsStatusService_FindYearlyTopupStatusFailedByCardNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "topup/stats/topup_stats_status.proto",
}
