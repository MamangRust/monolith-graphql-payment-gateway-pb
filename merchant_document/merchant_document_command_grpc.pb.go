// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: merchant_document/merchant_document_command.proto

package merchant_document

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MerchantDocumentCommandService_Create_FullMethodName             = "/pb.merchant_document.MerchantDocumentCommandService/Create"
	MerchantDocumentCommandService_Update_FullMethodName             = "/pb.merchant_document.MerchantDocumentCommandService/Update"
	MerchantDocumentCommandService_UpdateStatus_FullMethodName       = "/pb.merchant_document.MerchantDocumentCommandService/UpdateStatus"
	MerchantDocumentCommandService_Trashed_FullMethodName            = "/pb.merchant_document.MerchantDocumentCommandService/Trashed"
	MerchantDocumentCommandService_Restore_FullMethodName            = "/pb.merchant_document.MerchantDocumentCommandService/Restore"
	MerchantDocumentCommandService_DeletePermanent_FullMethodName    = "/pb.merchant_document.MerchantDocumentCommandService/DeletePermanent"
	MerchantDocumentCommandService_RestoreAll_FullMethodName         = "/pb.merchant_document.MerchantDocumentCommandService/RestoreAll"
	MerchantDocumentCommandService_DeleteAllPermanent_FullMethodName = "/pb.merchant_document.MerchantDocumentCommandService/DeleteAllPermanent"
)

// MerchantDocumentCommandServiceClient is the client API for MerchantDocumentCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantDocumentCommandServiceClient interface {
	Create(ctx context.Context, in *CreateMerchantDocumentRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocument, error)
	Update(ctx context.Context, in *UpdateMerchantDocumentRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocument, error)
	UpdateStatus(ctx context.Context, in *UpdateMerchantDocumentStatusRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocument, error)
	Trashed(ctx context.Context, in *FindMerchantDocumentByIdRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocumentDeleteAt, error)
	Restore(ctx context.Context, in *FindMerchantDocumentByIdRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocumentDeleteAt, error)
	DeletePermanent(ctx context.Context, in *FindMerchantDocumentByIdRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocumentDelete, error)
	RestoreAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantDocumentAll, error)
	DeleteAllPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantDocumentAll, error)
}

type merchantDocumentCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantDocumentCommandServiceClient(cc grpc.ClientConnInterface) MerchantDocumentCommandServiceClient {
	return &merchantDocumentCommandServiceClient{cc}
}

func (c *merchantDocumentCommandServiceClient) Create(ctx context.Context, in *CreateMerchantDocumentRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDocument)
	err := c.cc.Invoke(ctx, MerchantDocumentCommandService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDocumentCommandServiceClient) Update(ctx context.Context, in *UpdateMerchantDocumentRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDocument)
	err := c.cc.Invoke(ctx, MerchantDocumentCommandService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDocumentCommandServiceClient) UpdateStatus(ctx context.Context, in *UpdateMerchantDocumentStatusRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDocument)
	err := c.cc.Invoke(ctx, MerchantDocumentCommandService_UpdateStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDocumentCommandServiceClient) Trashed(ctx context.Context, in *FindMerchantDocumentByIdRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocumentDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDocumentDeleteAt)
	err := c.cc.Invoke(ctx, MerchantDocumentCommandService_Trashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDocumentCommandServiceClient) Restore(ctx context.Context, in *FindMerchantDocumentByIdRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocumentDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDocumentDeleteAt)
	err := c.cc.Invoke(ctx, MerchantDocumentCommandService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDocumentCommandServiceClient) DeletePermanent(ctx context.Context, in *FindMerchantDocumentByIdRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocumentDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDocumentDelete)
	err := c.cc.Invoke(ctx, MerchantDocumentCommandService_DeletePermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDocumentCommandServiceClient) RestoreAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantDocumentAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDocumentAll)
	err := c.cc.Invoke(ctx, MerchantDocumentCommandService_RestoreAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDocumentCommandServiceClient) DeleteAllPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantDocumentAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDocumentAll)
	err := c.cc.Invoke(ctx, MerchantDocumentCommandService_DeleteAllPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantDocumentCommandServiceServer is the server API for MerchantDocumentCommandService service.
// All implementations must embed UnimplementedMerchantDocumentCommandServiceServer
// for forward compatibility.
type MerchantDocumentCommandServiceServer interface {
	Create(context.Context, *CreateMerchantDocumentRequest) (*ApiResponseMerchantDocument, error)
	Update(context.Context, *UpdateMerchantDocumentRequest) (*ApiResponseMerchantDocument, error)
	UpdateStatus(context.Context, *UpdateMerchantDocumentStatusRequest) (*ApiResponseMerchantDocument, error)
	Trashed(context.Context, *FindMerchantDocumentByIdRequest) (*ApiResponseMerchantDocumentDeleteAt, error)
	Restore(context.Context, *FindMerchantDocumentByIdRequest) (*ApiResponseMerchantDocumentDeleteAt, error)
	DeletePermanent(context.Context, *FindMerchantDocumentByIdRequest) (*ApiResponseMerchantDocumentDelete, error)
	RestoreAll(context.Context, *emptypb.Empty) (*ApiResponseMerchantDocumentAll, error)
	DeleteAllPermanent(context.Context, *emptypb.Empty) (*ApiResponseMerchantDocumentAll, error)
	mustEmbedUnimplementedMerchantDocumentCommandServiceServer()
}

// UnimplementedMerchantDocumentCommandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMerchantDocumentCommandServiceServer struct{}

func (UnimplementedMerchantDocumentCommandServiceServer) Create(context.Context, *CreateMerchantDocumentRequest) (*ApiResponseMerchantDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMerchantDocumentCommandServiceServer) Update(context.Context, *UpdateMerchantDocumentRequest) (*ApiResponseMerchantDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMerchantDocumentCommandServiceServer) UpdateStatus(context.Context, *UpdateMerchantDocumentStatusRequest) (*ApiResponseMerchantDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedMerchantDocumentCommandServiceServer) Trashed(context.Context, *FindMerchantDocumentByIdRequest) (*ApiResponseMerchantDocumentDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trashed not implemented")
}
func (UnimplementedMerchantDocumentCommandServiceServer) Restore(context.Context, *FindMerchantDocumentByIdRequest) (*ApiResponseMerchantDocumentDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedMerchantDocumentCommandServiceServer) DeletePermanent(context.Context, *FindMerchantDocumentByIdRequest) (*ApiResponseMerchantDocumentDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermanent not implemented")
}
func (UnimplementedMerchantDocumentCommandServiceServer) RestoreAll(context.Context, *emptypb.Empty) (*ApiResponseMerchantDocumentAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAll not implemented")
}
func (UnimplementedMerchantDocumentCommandServiceServer) DeleteAllPermanent(context.Context, *emptypb.Empty) (*ApiResponseMerchantDocumentAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllPermanent not implemented")
}
func (UnimplementedMerchantDocumentCommandServiceServer) mustEmbedUnimplementedMerchantDocumentCommandServiceServer() {
}
func (UnimplementedMerchantDocumentCommandServiceServer) testEmbeddedByValue() {}

// UnsafeMerchantDocumentCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantDocumentCommandServiceServer will
// result in compilation errors.
type UnsafeMerchantDocumentCommandServiceServer interface {
	mustEmbedUnimplementedMerchantDocumentCommandServiceServer()
}

func RegisterMerchantDocumentCommandServiceServer(s grpc.ServiceRegistrar, srv MerchantDocumentCommandServiceServer) {
	// If the following call pancis, it indicates UnimplementedMerchantDocumentCommandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MerchantDocumentCommandService_ServiceDesc, srv)
}

func _MerchantDocumentCommandService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMerchantDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDocumentCommandServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDocumentCommandService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDocumentCommandServiceServer).Create(ctx, req.(*CreateMerchantDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDocumentCommandService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMerchantDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDocumentCommandServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDocumentCommandService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDocumentCommandServiceServer).Update(ctx, req.(*UpdateMerchantDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDocumentCommandService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMerchantDocumentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDocumentCommandServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDocumentCommandService_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDocumentCommandServiceServer).UpdateStatus(ctx, req.(*UpdateMerchantDocumentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDocumentCommandService_Trashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMerchantDocumentByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDocumentCommandServiceServer).Trashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDocumentCommandService_Trashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDocumentCommandServiceServer).Trashed(ctx, req.(*FindMerchantDocumentByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDocumentCommandService_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMerchantDocumentByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDocumentCommandServiceServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDocumentCommandService_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDocumentCommandServiceServer).Restore(ctx, req.(*FindMerchantDocumentByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDocumentCommandService_DeletePermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMerchantDocumentByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDocumentCommandServiceServer).DeletePermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDocumentCommandService_DeletePermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDocumentCommandServiceServer).DeletePermanent(ctx, req.(*FindMerchantDocumentByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDocumentCommandService_RestoreAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDocumentCommandServiceServer).RestoreAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDocumentCommandService_RestoreAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDocumentCommandServiceServer).RestoreAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDocumentCommandService_DeleteAllPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDocumentCommandServiceServer).DeleteAllPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDocumentCommandService_DeleteAllPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDocumentCommandServiceServer).DeleteAllPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantDocumentCommandService_ServiceDesc is the grpc.ServiceDesc for MerchantDocumentCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantDocumentCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.merchant_document.MerchantDocumentCommandService",
	HandlerType: (*MerchantDocumentCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MerchantDocumentCommandService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MerchantDocumentCommandService_Update_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _MerchantDocumentCommandService_UpdateStatus_Handler,
		},
		{
			MethodName: "Trashed",
			Handler:    _MerchantDocumentCommandService_Trashed_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _MerchantDocumentCommandService_Restore_Handler,
		},
		{
			MethodName: "DeletePermanent",
			Handler:    _MerchantDocumentCommandService_DeletePermanent_Handler,
		},
		{
			MethodName: "RestoreAll",
			Handler:    _MerchantDocumentCommandService_RestoreAll_Handler,
		},
		{
			MethodName: "DeleteAllPermanent",
			Handler:    _MerchantDocumentCommandService_DeleteAllPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant_document/merchant_document_command.proto",
}
