// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: merchant_document/merchant_document_query.proto

package merchant_document

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MerchantDocumentQueryService_FindAll_FullMethodName        = "/pb.merchant_document.MerchantDocumentQueryService/FindAll"
	MerchantDocumentQueryService_FindAllActive_FullMethodName  = "/pb.merchant_document.MerchantDocumentQueryService/FindAllActive"
	MerchantDocumentQueryService_FindAllTrashed_FullMethodName = "/pb.merchant_document.MerchantDocumentQueryService/FindAllTrashed"
	MerchantDocumentQueryService_FindById_FullMethodName       = "/pb.merchant_document.MerchantDocumentQueryService/FindById"
)

// MerchantDocumentQueryServiceClient is the client API for MerchantDocumentQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantDocumentQueryServiceClient interface {
	FindAll(ctx context.Context, in *FindAllMerchantDocumentsRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDocument, error)
	FindAllActive(ctx context.Context, in *FindAllMerchantDocumentsRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDocument, error)
	FindAllTrashed(ctx context.Context, in *FindAllMerchantDocumentsRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDocumentAt, error)
	FindById(ctx context.Context, in *FindMerchantDocumentByIdRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocument, error)
}

type merchantDocumentQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantDocumentQueryServiceClient(cc grpc.ClientConnInterface) MerchantDocumentQueryServiceClient {
	return &merchantDocumentQueryServiceClient{cc}
}

func (c *merchantDocumentQueryServiceClient) FindAll(ctx context.Context, in *FindAllMerchantDocumentsRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDocument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantDocument)
	err := c.cc.Invoke(ctx, MerchantDocumentQueryService_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDocumentQueryServiceClient) FindAllActive(ctx context.Context, in *FindAllMerchantDocumentsRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDocument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantDocument)
	err := c.cc.Invoke(ctx, MerchantDocumentQueryService_FindAllActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDocumentQueryServiceClient) FindAllTrashed(ctx context.Context, in *FindAllMerchantDocumentsRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDocumentAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantDocumentAt)
	err := c.cc.Invoke(ctx, MerchantDocumentQueryService_FindAllTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDocumentQueryServiceClient) FindById(ctx context.Context, in *FindMerchantDocumentByIdRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDocument)
	err := c.cc.Invoke(ctx, MerchantDocumentQueryService_FindById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantDocumentQueryServiceServer is the server API for MerchantDocumentQueryService service.
// All implementations must embed UnimplementedMerchantDocumentQueryServiceServer
// for forward compatibility.
type MerchantDocumentQueryServiceServer interface {
	FindAll(context.Context, *FindAllMerchantDocumentsRequest) (*ApiResponsePaginationMerchantDocument, error)
	FindAllActive(context.Context, *FindAllMerchantDocumentsRequest) (*ApiResponsePaginationMerchantDocument, error)
	FindAllTrashed(context.Context, *FindAllMerchantDocumentsRequest) (*ApiResponsePaginationMerchantDocumentAt, error)
	FindById(context.Context, *FindMerchantDocumentByIdRequest) (*ApiResponseMerchantDocument, error)
	mustEmbedUnimplementedMerchantDocumentQueryServiceServer()
}

// UnimplementedMerchantDocumentQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMerchantDocumentQueryServiceServer struct{}

func (UnimplementedMerchantDocumentQueryServiceServer) FindAll(context.Context, *FindAllMerchantDocumentsRequest) (*ApiResponsePaginationMerchantDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedMerchantDocumentQueryServiceServer) FindAllActive(context.Context, *FindAllMerchantDocumentsRequest) (*ApiResponsePaginationMerchantDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllActive not implemented")
}
func (UnimplementedMerchantDocumentQueryServiceServer) FindAllTrashed(context.Context, *FindAllMerchantDocumentsRequest) (*ApiResponsePaginationMerchantDocumentAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTrashed not implemented")
}
func (UnimplementedMerchantDocumentQueryServiceServer) FindById(context.Context, *FindMerchantDocumentByIdRequest) (*ApiResponseMerchantDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedMerchantDocumentQueryServiceServer) mustEmbedUnimplementedMerchantDocumentQueryServiceServer() {
}
func (UnimplementedMerchantDocumentQueryServiceServer) testEmbeddedByValue() {}

// UnsafeMerchantDocumentQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantDocumentQueryServiceServer will
// result in compilation errors.
type UnsafeMerchantDocumentQueryServiceServer interface {
	mustEmbedUnimplementedMerchantDocumentQueryServiceServer()
}

func RegisterMerchantDocumentQueryServiceServer(s grpc.ServiceRegistrar, srv MerchantDocumentQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedMerchantDocumentQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MerchantDocumentQueryService_ServiceDesc, srv)
}

func _MerchantDocumentQueryService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDocumentQueryServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDocumentQueryService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDocumentQueryServiceServer).FindAll(ctx, req.(*FindAllMerchantDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDocumentQueryService_FindAllActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDocumentQueryServiceServer).FindAllActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDocumentQueryService_FindAllActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDocumentQueryServiceServer).FindAllActive(ctx, req.(*FindAllMerchantDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDocumentQueryService_FindAllTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDocumentQueryServiceServer).FindAllTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDocumentQueryService_FindAllTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDocumentQueryServiceServer).FindAllTrashed(ctx, req.(*FindAllMerchantDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDocumentQueryService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMerchantDocumentByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDocumentQueryServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDocumentQueryService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDocumentQueryServiceServer).FindById(ctx, req.(*FindMerchantDocumentByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantDocumentQueryService_ServiceDesc is the grpc.ServiceDesc for MerchantDocumentQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantDocumentQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.merchant_document.MerchantDocumentQueryService",
	HandlerType: (*MerchantDocumentQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _MerchantDocumentQueryService_FindAll_Handler,
		},
		{
			MethodName: "FindAllActive",
			Handler:    _MerchantDocumentQueryService_FindAllActive_Handler,
		},
		{
			MethodName: "FindAllTrashed",
			Handler:    _MerchantDocumentQueryService_FindAllTrashed_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _MerchantDocumentQueryService_FindById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant_document/merchant_document_query.proto",
}
