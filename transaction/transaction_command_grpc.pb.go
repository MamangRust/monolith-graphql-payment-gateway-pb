// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: transaction/transaction_command.proto

package transaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionCommandService_CreateTransaction_FullMethodName             = "/pb.transaction.TransactionCommandService/CreateTransaction"
	TransactionCommandService_UpdateTransaction_FullMethodName             = "/pb.transaction.TransactionCommandService/UpdateTransaction"
	TransactionCommandService_TrashedTransaction_FullMethodName            = "/pb.transaction.TransactionCommandService/TrashedTransaction"
	TransactionCommandService_RestoreTransaction_FullMethodName            = "/pb.transaction.TransactionCommandService/RestoreTransaction"
	TransactionCommandService_DeleteTransactionPermanent_FullMethodName    = "/pb.transaction.TransactionCommandService/DeleteTransactionPermanent"
	TransactionCommandService_RestoreAllTransaction_FullMethodName         = "/pb.transaction.TransactionCommandService/RestoreAllTransaction"
	TransactionCommandService_DeleteAllTransactionPermanent_FullMethodName = "/pb.transaction.TransactionCommandService/DeleteAllTransactionPermanent"
)

// TransactionCommandServiceClient is the client API for TransactionCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionCommandServiceClient interface {
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransaction, error)
	UpdateTransaction(ctx context.Context, in *UpdateTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransaction, error)
	TrashedTransaction(ctx context.Context, in *FindByIdTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransactionDeleteAt, error)
	RestoreTransaction(ctx context.Context, in *FindByIdTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransactionDeleteAt, error)
	DeleteTransactionPermanent(ctx context.Context, in *FindByIdTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransactionDelete, error)
	RestoreAllTransaction(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseTransactionAll, error)
	DeleteAllTransactionPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseTransactionAll, error)
}

type transactionCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionCommandServiceClient(cc grpc.ClientConnInterface) TransactionCommandServiceClient {
	return &transactionCommandServiceClient{cc}
}

func (c *transactionCommandServiceClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransaction)
	err := c.cc.Invoke(ctx, TransactionCommandService_CreateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionCommandServiceClient) UpdateTransaction(ctx context.Context, in *UpdateTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransaction)
	err := c.cc.Invoke(ctx, TransactionCommandService_UpdateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionCommandServiceClient) TrashedTransaction(ctx context.Context, in *FindByIdTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransactionDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionDeleteAt)
	err := c.cc.Invoke(ctx, TransactionCommandService_TrashedTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionCommandServiceClient) RestoreTransaction(ctx context.Context, in *FindByIdTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransactionDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionDeleteAt)
	err := c.cc.Invoke(ctx, TransactionCommandService_RestoreTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionCommandServiceClient) DeleteTransactionPermanent(ctx context.Context, in *FindByIdTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransactionDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionDelete)
	err := c.cc.Invoke(ctx, TransactionCommandService_DeleteTransactionPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionCommandServiceClient) RestoreAllTransaction(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseTransactionAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionAll)
	err := c.cc.Invoke(ctx, TransactionCommandService_RestoreAllTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionCommandServiceClient) DeleteAllTransactionPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseTransactionAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionAll)
	err := c.cc.Invoke(ctx, TransactionCommandService_DeleteAllTransactionPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionCommandServiceServer is the server API for TransactionCommandService service.
// All implementations must embed UnimplementedTransactionCommandServiceServer
// for forward compatibility.
type TransactionCommandServiceServer interface {
	CreateTransaction(context.Context, *CreateTransactionRequest) (*ApiResponseTransaction, error)
	UpdateTransaction(context.Context, *UpdateTransactionRequest) (*ApiResponseTransaction, error)
	TrashedTransaction(context.Context, *FindByIdTransactionRequest) (*ApiResponseTransactionDeleteAt, error)
	RestoreTransaction(context.Context, *FindByIdTransactionRequest) (*ApiResponseTransactionDeleteAt, error)
	DeleteTransactionPermanent(context.Context, *FindByIdTransactionRequest) (*ApiResponseTransactionDelete, error)
	RestoreAllTransaction(context.Context, *emptypb.Empty) (*ApiResponseTransactionAll, error)
	DeleteAllTransactionPermanent(context.Context, *emptypb.Empty) (*ApiResponseTransactionAll, error)
	mustEmbedUnimplementedTransactionCommandServiceServer()
}

// UnimplementedTransactionCommandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionCommandServiceServer struct{}

func (UnimplementedTransactionCommandServiceServer) CreateTransaction(context.Context, *CreateTransactionRequest) (*ApiResponseTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedTransactionCommandServiceServer) UpdateTransaction(context.Context, *UpdateTransactionRequest) (*ApiResponseTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransaction not implemented")
}
func (UnimplementedTransactionCommandServiceServer) TrashedTransaction(context.Context, *FindByIdTransactionRequest) (*ApiResponseTransactionDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrashedTransaction not implemented")
}
func (UnimplementedTransactionCommandServiceServer) RestoreTransaction(context.Context, *FindByIdTransactionRequest) (*ApiResponseTransactionDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreTransaction not implemented")
}
func (UnimplementedTransactionCommandServiceServer) DeleteTransactionPermanent(context.Context, *FindByIdTransactionRequest) (*ApiResponseTransactionDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransactionPermanent not implemented")
}
func (UnimplementedTransactionCommandServiceServer) RestoreAllTransaction(context.Context, *emptypb.Empty) (*ApiResponseTransactionAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllTransaction not implemented")
}
func (UnimplementedTransactionCommandServiceServer) DeleteAllTransactionPermanent(context.Context, *emptypb.Empty) (*ApiResponseTransactionAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllTransactionPermanent not implemented")
}
func (UnimplementedTransactionCommandServiceServer) mustEmbedUnimplementedTransactionCommandServiceServer() {
}
func (UnimplementedTransactionCommandServiceServer) testEmbeddedByValue() {}

// UnsafeTransactionCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionCommandServiceServer will
// result in compilation errors.
type UnsafeTransactionCommandServiceServer interface {
	mustEmbedUnimplementedTransactionCommandServiceServer()
}

func RegisterTransactionCommandServiceServer(s grpc.ServiceRegistrar, srv TransactionCommandServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionCommandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionCommandService_ServiceDesc, srv)
}

func _TransactionCommandService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionCommandServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionCommandService_CreateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionCommandServiceServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionCommandService_UpdateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionCommandServiceServer).UpdateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionCommandService_UpdateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionCommandServiceServer).UpdateTransaction(ctx, req.(*UpdateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionCommandService_TrashedTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionCommandServiceServer).TrashedTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionCommandService_TrashedTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionCommandServiceServer).TrashedTransaction(ctx, req.(*FindByIdTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionCommandService_RestoreTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionCommandServiceServer).RestoreTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionCommandService_RestoreTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionCommandServiceServer).RestoreTransaction(ctx, req.(*FindByIdTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionCommandService_DeleteTransactionPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionCommandServiceServer).DeleteTransactionPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionCommandService_DeleteTransactionPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionCommandServiceServer).DeleteTransactionPermanent(ctx, req.(*FindByIdTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionCommandService_RestoreAllTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionCommandServiceServer).RestoreAllTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionCommandService_RestoreAllTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionCommandServiceServer).RestoreAllTransaction(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionCommandService_DeleteAllTransactionPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionCommandServiceServer).DeleteAllTransactionPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionCommandService_DeleteAllTransactionPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionCommandServiceServer).DeleteAllTransactionPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionCommandService_ServiceDesc is the grpc.ServiceDesc for TransactionCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.transaction.TransactionCommandService",
	HandlerType: (*TransactionCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransaction",
			Handler:    _TransactionCommandService_CreateTransaction_Handler,
		},
		{
			MethodName: "UpdateTransaction",
			Handler:    _TransactionCommandService_UpdateTransaction_Handler,
		},
		{
			MethodName: "TrashedTransaction",
			Handler:    _TransactionCommandService_TrashedTransaction_Handler,
		},
		{
			MethodName: "RestoreTransaction",
			Handler:    _TransactionCommandService_RestoreTransaction_Handler,
		},
		{
			MethodName: "DeleteTransactionPermanent",
			Handler:    _TransactionCommandService_DeleteTransactionPermanent_Handler,
		},
		{
			MethodName: "RestoreAllTransaction",
			Handler:    _TransactionCommandService_RestoreAllTransaction_Handler,
		},
		{
			MethodName: "DeleteAllTransactionPermanent",
			Handler:    _TransactionCommandService_DeleteAllTransactionPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction/transaction_command.proto",
}
