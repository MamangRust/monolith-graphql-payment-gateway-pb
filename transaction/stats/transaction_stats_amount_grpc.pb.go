// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: transaction/stats/transaction_stats_amount.proto

package stats

import (
	context "context"
	transaction "github.com/MamangRust/monolith-graphql-payment-gateway-pb/transaction"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionStatsAmountService_FindMonthlyAmounts_FullMethodName             = "/pb.transaction.stats.TransactionStatsAmountService/FindMonthlyAmounts"
	TransactionStatsAmountService_FindYearlyAmounts_FullMethodName              = "/pb.transaction.stats.TransactionStatsAmountService/FindYearlyAmounts"
	TransactionStatsAmountService_FindMonthlyAmountsByCardNumber_FullMethodName = "/pb.transaction.stats.TransactionStatsAmountService/FindMonthlyAmountsByCardNumber"
	TransactionStatsAmountService_FindYearlyAmountsByCardNumber_FullMethodName  = "/pb.transaction.stats.TransactionStatsAmountService/FindYearlyAmountsByCardNumber"
)

// TransactionStatsAmountServiceClient is the client API for TransactionStatsAmountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionStatsAmountServiceClient interface {
	FindMonthlyAmounts(ctx context.Context, in *transaction.FindYearTransactionStatus, opts ...grpc.CallOption) (*ApiResponseTransactionMonthAmount, error)
	FindYearlyAmounts(ctx context.Context, in *transaction.FindYearTransactionStatus, opts ...grpc.CallOption) (*ApiResponseTransactionYearAmount, error)
	FindMonthlyAmountsByCardNumber(ctx context.Context, in *transaction.FindByYearCardNumberTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransactionMonthAmount, error)
	FindYearlyAmountsByCardNumber(ctx context.Context, in *transaction.FindByYearCardNumberTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransactionYearAmount, error)
}

type transactionStatsAmountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionStatsAmountServiceClient(cc grpc.ClientConnInterface) TransactionStatsAmountServiceClient {
	return &transactionStatsAmountServiceClient{cc}
}

func (c *transactionStatsAmountServiceClient) FindMonthlyAmounts(ctx context.Context, in *transaction.FindYearTransactionStatus, opts ...grpc.CallOption) (*ApiResponseTransactionMonthAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionMonthAmount)
	err := c.cc.Invoke(ctx, TransactionStatsAmountService_FindMonthlyAmounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionStatsAmountServiceClient) FindYearlyAmounts(ctx context.Context, in *transaction.FindYearTransactionStatus, opts ...grpc.CallOption) (*ApiResponseTransactionYearAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionYearAmount)
	err := c.cc.Invoke(ctx, TransactionStatsAmountService_FindYearlyAmounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionStatsAmountServiceClient) FindMonthlyAmountsByCardNumber(ctx context.Context, in *transaction.FindByYearCardNumberTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransactionMonthAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionMonthAmount)
	err := c.cc.Invoke(ctx, TransactionStatsAmountService_FindMonthlyAmountsByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionStatsAmountServiceClient) FindYearlyAmountsByCardNumber(ctx context.Context, in *transaction.FindByYearCardNumberTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransactionYearAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionYearAmount)
	err := c.cc.Invoke(ctx, TransactionStatsAmountService_FindYearlyAmountsByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionStatsAmountServiceServer is the server API for TransactionStatsAmountService service.
// All implementations must embed UnimplementedTransactionStatsAmountServiceServer
// for forward compatibility.
type TransactionStatsAmountServiceServer interface {
	FindMonthlyAmounts(context.Context, *transaction.FindYearTransactionStatus) (*ApiResponseTransactionMonthAmount, error)
	FindYearlyAmounts(context.Context, *transaction.FindYearTransactionStatus) (*ApiResponseTransactionYearAmount, error)
	FindMonthlyAmountsByCardNumber(context.Context, *transaction.FindByYearCardNumberTransactionRequest) (*ApiResponseTransactionMonthAmount, error)
	FindYearlyAmountsByCardNumber(context.Context, *transaction.FindByYearCardNumberTransactionRequest) (*ApiResponseTransactionYearAmount, error)
	mustEmbedUnimplementedTransactionStatsAmountServiceServer()
}

// UnimplementedTransactionStatsAmountServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionStatsAmountServiceServer struct{}

func (UnimplementedTransactionStatsAmountServiceServer) FindMonthlyAmounts(context.Context, *transaction.FindYearTransactionStatus) (*ApiResponseTransactionMonthAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyAmounts not implemented")
}
func (UnimplementedTransactionStatsAmountServiceServer) FindYearlyAmounts(context.Context, *transaction.FindYearTransactionStatus) (*ApiResponseTransactionYearAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyAmounts not implemented")
}
func (UnimplementedTransactionStatsAmountServiceServer) FindMonthlyAmountsByCardNumber(context.Context, *transaction.FindByYearCardNumberTransactionRequest) (*ApiResponseTransactionMonthAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyAmountsByCardNumber not implemented")
}
func (UnimplementedTransactionStatsAmountServiceServer) FindYearlyAmountsByCardNumber(context.Context, *transaction.FindByYearCardNumberTransactionRequest) (*ApiResponseTransactionYearAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyAmountsByCardNumber not implemented")
}
func (UnimplementedTransactionStatsAmountServiceServer) mustEmbedUnimplementedTransactionStatsAmountServiceServer() {
}
func (UnimplementedTransactionStatsAmountServiceServer) testEmbeddedByValue() {}

// UnsafeTransactionStatsAmountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionStatsAmountServiceServer will
// result in compilation errors.
type UnsafeTransactionStatsAmountServiceServer interface {
	mustEmbedUnimplementedTransactionStatsAmountServiceServer()
}

func RegisterTransactionStatsAmountServiceServer(s grpc.ServiceRegistrar, srv TransactionStatsAmountServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionStatsAmountServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionStatsAmountService_ServiceDesc, srv)
}

func _TransactionStatsAmountService_FindMonthlyAmounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transaction.FindYearTransactionStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionStatsAmountServiceServer).FindMonthlyAmounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionStatsAmountService_FindMonthlyAmounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionStatsAmountServiceServer).FindMonthlyAmounts(ctx, req.(*transaction.FindYearTransactionStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionStatsAmountService_FindYearlyAmounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transaction.FindYearTransactionStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionStatsAmountServiceServer).FindYearlyAmounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionStatsAmountService_FindYearlyAmounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionStatsAmountServiceServer).FindYearlyAmounts(ctx, req.(*transaction.FindYearTransactionStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionStatsAmountService_FindMonthlyAmountsByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transaction.FindByYearCardNumberTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionStatsAmountServiceServer).FindMonthlyAmountsByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionStatsAmountService_FindMonthlyAmountsByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionStatsAmountServiceServer).FindMonthlyAmountsByCardNumber(ctx, req.(*transaction.FindByYearCardNumberTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionStatsAmountService_FindYearlyAmountsByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transaction.FindByYearCardNumberTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionStatsAmountServiceServer).FindYearlyAmountsByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionStatsAmountService_FindYearlyAmountsByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionStatsAmountServiceServer).FindYearlyAmountsByCardNumber(ctx, req.(*transaction.FindByYearCardNumberTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionStatsAmountService_ServiceDesc is the grpc.ServiceDesc for TransactionStatsAmountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionStatsAmountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.transaction.stats.TransactionStatsAmountService",
	HandlerType: (*TransactionStatsAmountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMonthlyAmounts",
			Handler:    _TransactionStatsAmountService_FindMonthlyAmounts_Handler,
		},
		{
			MethodName: "FindYearlyAmounts",
			Handler:    _TransactionStatsAmountService_FindYearlyAmounts_Handler,
		},
		{
			MethodName: "FindMonthlyAmountsByCardNumber",
			Handler:    _TransactionStatsAmountService_FindMonthlyAmountsByCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyAmountsByCardNumber",
			Handler:    _TransactionStatsAmountService_FindYearlyAmountsByCardNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction/stats/transaction_stats_amount.proto",
}
