// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: transaction/stats/transaction_stats_status.proto

package stats

import (
	context "context"
	transaction "github.com/MamangRust/monolith-graphql-payment-gateway-pb/transaction"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionStatsStatusService_FindMonthlyTransactionStatusSuccess_FullMethodName             = "/pb.transaction.stats.TransactionStatsStatusService/FindMonthlyTransactionStatusSuccess"
	TransactionStatsStatusService_FindYearlyTransactionStatusSuccess_FullMethodName              = "/pb.transaction.stats.TransactionStatsStatusService/FindYearlyTransactionStatusSuccess"
	TransactionStatsStatusService_FindMonthlyTransactionStatusFailed_FullMethodName              = "/pb.transaction.stats.TransactionStatsStatusService/FindMonthlyTransactionStatusFailed"
	TransactionStatsStatusService_FindYearlyTransactionStatusFailed_FullMethodName               = "/pb.transaction.stats.TransactionStatsStatusService/FindYearlyTransactionStatusFailed"
	TransactionStatsStatusService_FindMonthlyTransactionStatusSuccessByCardNumber_FullMethodName = "/pb.transaction.stats.TransactionStatsStatusService/FindMonthlyTransactionStatusSuccessByCardNumber"
	TransactionStatsStatusService_FindYearlyTransactionStatusSuccessByCardNumber_FullMethodName  = "/pb.transaction.stats.TransactionStatsStatusService/FindYearlyTransactionStatusSuccessByCardNumber"
	TransactionStatsStatusService_FindMonthlyTransactionStatusFailedByCardNumber_FullMethodName  = "/pb.transaction.stats.TransactionStatsStatusService/FindMonthlyTransactionStatusFailedByCardNumber"
	TransactionStatsStatusService_FindYearlyTransactionStatusFailedByCardNumber_FullMethodName   = "/pb.transaction.stats.TransactionStatsStatusService/FindYearlyTransactionStatusFailedByCardNumber"
)

// TransactionStatsStatusServiceClient is the client API for TransactionStatsStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionStatsStatusServiceClient interface {
	FindMonthlyTransactionStatusSuccess(ctx context.Context, in *transaction.FindMonthlyTransactionStatus, opts ...grpc.CallOption) (*ApiResponseTransactionMonthStatusSuccess, error)
	FindYearlyTransactionStatusSuccess(ctx context.Context, in *transaction.FindYearTransactionStatus, opts ...grpc.CallOption) (*ApiResponseTransactionYearStatusSuccess, error)
	FindMonthlyTransactionStatusFailed(ctx context.Context, in *transaction.FindMonthlyTransactionStatus, opts ...grpc.CallOption) (*ApiResponseTransactionMonthStatusFailed, error)
	FindYearlyTransactionStatusFailed(ctx context.Context, in *transaction.FindYearTransactionStatus, opts ...grpc.CallOption) (*ApiResponseTransactionYearStatusFailed, error)
	FindMonthlyTransactionStatusSuccessByCardNumber(ctx context.Context, in *transaction.FindMonthlyTransactionStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseTransactionMonthStatusSuccess, error)
	FindYearlyTransactionStatusSuccessByCardNumber(ctx context.Context, in *transaction.FindYearTransactionStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseTransactionYearStatusSuccess, error)
	FindMonthlyTransactionStatusFailedByCardNumber(ctx context.Context, in *transaction.FindMonthlyTransactionStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseTransactionMonthStatusFailed, error)
	FindYearlyTransactionStatusFailedByCardNumber(ctx context.Context, in *transaction.FindYearTransactionStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseTransactionYearStatusFailed, error)
}

type transactionStatsStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionStatsStatusServiceClient(cc grpc.ClientConnInterface) TransactionStatsStatusServiceClient {
	return &transactionStatsStatusServiceClient{cc}
}

func (c *transactionStatsStatusServiceClient) FindMonthlyTransactionStatusSuccess(ctx context.Context, in *transaction.FindMonthlyTransactionStatus, opts ...grpc.CallOption) (*ApiResponseTransactionMonthStatusSuccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionMonthStatusSuccess)
	err := c.cc.Invoke(ctx, TransactionStatsStatusService_FindMonthlyTransactionStatusSuccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionStatsStatusServiceClient) FindYearlyTransactionStatusSuccess(ctx context.Context, in *transaction.FindYearTransactionStatus, opts ...grpc.CallOption) (*ApiResponseTransactionYearStatusSuccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionYearStatusSuccess)
	err := c.cc.Invoke(ctx, TransactionStatsStatusService_FindYearlyTransactionStatusSuccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionStatsStatusServiceClient) FindMonthlyTransactionStatusFailed(ctx context.Context, in *transaction.FindMonthlyTransactionStatus, opts ...grpc.CallOption) (*ApiResponseTransactionMonthStatusFailed, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionMonthStatusFailed)
	err := c.cc.Invoke(ctx, TransactionStatsStatusService_FindMonthlyTransactionStatusFailed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionStatsStatusServiceClient) FindYearlyTransactionStatusFailed(ctx context.Context, in *transaction.FindYearTransactionStatus, opts ...grpc.CallOption) (*ApiResponseTransactionYearStatusFailed, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionYearStatusFailed)
	err := c.cc.Invoke(ctx, TransactionStatsStatusService_FindYearlyTransactionStatusFailed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionStatsStatusServiceClient) FindMonthlyTransactionStatusSuccessByCardNumber(ctx context.Context, in *transaction.FindMonthlyTransactionStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseTransactionMonthStatusSuccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionMonthStatusSuccess)
	err := c.cc.Invoke(ctx, TransactionStatsStatusService_FindMonthlyTransactionStatusSuccessByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionStatsStatusServiceClient) FindYearlyTransactionStatusSuccessByCardNumber(ctx context.Context, in *transaction.FindYearTransactionStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseTransactionYearStatusSuccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionYearStatusSuccess)
	err := c.cc.Invoke(ctx, TransactionStatsStatusService_FindYearlyTransactionStatusSuccessByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionStatsStatusServiceClient) FindMonthlyTransactionStatusFailedByCardNumber(ctx context.Context, in *transaction.FindMonthlyTransactionStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseTransactionMonthStatusFailed, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionMonthStatusFailed)
	err := c.cc.Invoke(ctx, TransactionStatsStatusService_FindMonthlyTransactionStatusFailedByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionStatsStatusServiceClient) FindYearlyTransactionStatusFailedByCardNumber(ctx context.Context, in *transaction.FindYearTransactionStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseTransactionYearStatusFailed, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionYearStatusFailed)
	err := c.cc.Invoke(ctx, TransactionStatsStatusService_FindYearlyTransactionStatusFailedByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionStatsStatusServiceServer is the server API for TransactionStatsStatusService service.
// All implementations must embed UnimplementedTransactionStatsStatusServiceServer
// for forward compatibility.
type TransactionStatsStatusServiceServer interface {
	FindMonthlyTransactionStatusSuccess(context.Context, *transaction.FindMonthlyTransactionStatus) (*ApiResponseTransactionMonthStatusSuccess, error)
	FindYearlyTransactionStatusSuccess(context.Context, *transaction.FindYearTransactionStatus) (*ApiResponseTransactionYearStatusSuccess, error)
	FindMonthlyTransactionStatusFailed(context.Context, *transaction.FindMonthlyTransactionStatus) (*ApiResponseTransactionMonthStatusFailed, error)
	FindYearlyTransactionStatusFailed(context.Context, *transaction.FindYearTransactionStatus) (*ApiResponseTransactionYearStatusFailed, error)
	FindMonthlyTransactionStatusSuccessByCardNumber(context.Context, *transaction.FindMonthlyTransactionStatusCardNumber) (*ApiResponseTransactionMonthStatusSuccess, error)
	FindYearlyTransactionStatusSuccessByCardNumber(context.Context, *transaction.FindYearTransactionStatusCardNumber) (*ApiResponseTransactionYearStatusSuccess, error)
	FindMonthlyTransactionStatusFailedByCardNumber(context.Context, *transaction.FindMonthlyTransactionStatusCardNumber) (*ApiResponseTransactionMonthStatusFailed, error)
	FindYearlyTransactionStatusFailedByCardNumber(context.Context, *transaction.FindYearTransactionStatusCardNumber) (*ApiResponseTransactionYearStatusFailed, error)
	mustEmbedUnimplementedTransactionStatsStatusServiceServer()
}

// UnimplementedTransactionStatsStatusServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionStatsStatusServiceServer struct{}

func (UnimplementedTransactionStatsStatusServiceServer) FindMonthlyTransactionStatusSuccess(context.Context, *transaction.FindMonthlyTransactionStatus) (*ApiResponseTransactionMonthStatusSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTransactionStatusSuccess not implemented")
}
func (UnimplementedTransactionStatsStatusServiceServer) FindYearlyTransactionStatusSuccess(context.Context, *transaction.FindYearTransactionStatus) (*ApiResponseTransactionYearStatusSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTransactionStatusSuccess not implemented")
}
func (UnimplementedTransactionStatsStatusServiceServer) FindMonthlyTransactionStatusFailed(context.Context, *transaction.FindMonthlyTransactionStatus) (*ApiResponseTransactionMonthStatusFailed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTransactionStatusFailed not implemented")
}
func (UnimplementedTransactionStatsStatusServiceServer) FindYearlyTransactionStatusFailed(context.Context, *transaction.FindYearTransactionStatus) (*ApiResponseTransactionYearStatusFailed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTransactionStatusFailed not implemented")
}
func (UnimplementedTransactionStatsStatusServiceServer) FindMonthlyTransactionStatusSuccessByCardNumber(context.Context, *transaction.FindMonthlyTransactionStatusCardNumber) (*ApiResponseTransactionMonthStatusSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTransactionStatusSuccessByCardNumber not implemented")
}
func (UnimplementedTransactionStatsStatusServiceServer) FindYearlyTransactionStatusSuccessByCardNumber(context.Context, *transaction.FindYearTransactionStatusCardNumber) (*ApiResponseTransactionYearStatusSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTransactionStatusSuccessByCardNumber not implemented")
}
func (UnimplementedTransactionStatsStatusServiceServer) FindMonthlyTransactionStatusFailedByCardNumber(context.Context, *transaction.FindMonthlyTransactionStatusCardNumber) (*ApiResponseTransactionMonthStatusFailed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTransactionStatusFailedByCardNumber not implemented")
}
func (UnimplementedTransactionStatsStatusServiceServer) FindYearlyTransactionStatusFailedByCardNumber(context.Context, *transaction.FindYearTransactionStatusCardNumber) (*ApiResponseTransactionYearStatusFailed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTransactionStatusFailedByCardNumber not implemented")
}
func (UnimplementedTransactionStatsStatusServiceServer) mustEmbedUnimplementedTransactionStatsStatusServiceServer() {
}
func (UnimplementedTransactionStatsStatusServiceServer) testEmbeddedByValue() {}

// UnsafeTransactionStatsStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionStatsStatusServiceServer will
// result in compilation errors.
type UnsafeTransactionStatsStatusServiceServer interface {
	mustEmbedUnimplementedTransactionStatsStatusServiceServer()
}

func RegisterTransactionStatsStatusServiceServer(s grpc.ServiceRegistrar, srv TransactionStatsStatusServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionStatsStatusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionStatsStatusService_ServiceDesc, srv)
}

func _TransactionStatsStatusService_FindMonthlyTransactionStatusSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transaction.FindMonthlyTransactionStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionStatsStatusServiceServer).FindMonthlyTransactionStatusSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionStatsStatusService_FindMonthlyTransactionStatusSuccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionStatsStatusServiceServer).FindMonthlyTransactionStatusSuccess(ctx, req.(*transaction.FindMonthlyTransactionStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionStatsStatusService_FindYearlyTransactionStatusSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transaction.FindYearTransactionStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionStatsStatusServiceServer).FindYearlyTransactionStatusSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionStatsStatusService_FindYearlyTransactionStatusSuccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionStatsStatusServiceServer).FindYearlyTransactionStatusSuccess(ctx, req.(*transaction.FindYearTransactionStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionStatsStatusService_FindMonthlyTransactionStatusFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transaction.FindMonthlyTransactionStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionStatsStatusServiceServer).FindMonthlyTransactionStatusFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionStatsStatusService_FindMonthlyTransactionStatusFailed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionStatsStatusServiceServer).FindMonthlyTransactionStatusFailed(ctx, req.(*transaction.FindMonthlyTransactionStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionStatsStatusService_FindYearlyTransactionStatusFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transaction.FindYearTransactionStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionStatsStatusServiceServer).FindYearlyTransactionStatusFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionStatsStatusService_FindYearlyTransactionStatusFailed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionStatsStatusServiceServer).FindYearlyTransactionStatusFailed(ctx, req.(*transaction.FindYearTransactionStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionStatsStatusService_FindMonthlyTransactionStatusSuccessByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transaction.FindMonthlyTransactionStatusCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionStatsStatusServiceServer).FindMonthlyTransactionStatusSuccessByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionStatsStatusService_FindMonthlyTransactionStatusSuccessByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionStatsStatusServiceServer).FindMonthlyTransactionStatusSuccessByCardNumber(ctx, req.(*transaction.FindMonthlyTransactionStatusCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionStatsStatusService_FindYearlyTransactionStatusSuccessByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transaction.FindYearTransactionStatusCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionStatsStatusServiceServer).FindYearlyTransactionStatusSuccessByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionStatsStatusService_FindYearlyTransactionStatusSuccessByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionStatsStatusServiceServer).FindYearlyTransactionStatusSuccessByCardNumber(ctx, req.(*transaction.FindYearTransactionStatusCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionStatsStatusService_FindMonthlyTransactionStatusFailedByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transaction.FindMonthlyTransactionStatusCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionStatsStatusServiceServer).FindMonthlyTransactionStatusFailedByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionStatsStatusService_FindMonthlyTransactionStatusFailedByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionStatsStatusServiceServer).FindMonthlyTransactionStatusFailedByCardNumber(ctx, req.(*transaction.FindMonthlyTransactionStatusCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionStatsStatusService_FindYearlyTransactionStatusFailedByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transaction.FindYearTransactionStatusCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionStatsStatusServiceServer).FindYearlyTransactionStatusFailedByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionStatsStatusService_FindYearlyTransactionStatusFailedByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionStatsStatusServiceServer).FindYearlyTransactionStatusFailedByCardNumber(ctx, req.(*transaction.FindYearTransactionStatusCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionStatsStatusService_ServiceDesc is the grpc.ServiceDesc for TransactionStatsStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionStatsStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.transaction.stats.TransactionStatsStatusService",
	HandlerType: (*TransactionStatsStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMonthlyTransactionStatusSuccess",
			Handler:    _TransactionStatsStatusService_FindMonthlyTransactionStatusSuccess_Handler,
		},
		{
			MethodName: "FindYearlyTransactionStatusSuccess",
			Handler:    _TransactionStatsStatusService_FindYearlyTransactionStatusSuccess_Handler,
		},
		{
			MethodName: "FindMonthlyTransactionStatusFailed",
			Handler:    _TransactionStatsStatusService_FindMonthlyTransactionStatusFailed_Handler,
		},
		{
			MethodName: "FindYearlyTransactionStatusFailed",
			Handler:    _TransactionStatsStatusService_FindYearlyTransactionStatusFailed_Handler,
		},
		{
			MethodName: "FindMonthlyTransactionStatusSuccessByCardNumber",
			Handler:    _TransactionStatsStatusService_FindMonthlyTransactionStatusSuccessByCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyTransactionStatusSuccessByCardNumber",
			Handler:    _TransactionStatsStatusService_FindYearlyTransactionStatusSuccessByCardNumber_Handler,
		},
		{
			MethodName: "FindMonthlyTransactionStatusFailedByCardNumber",
			Handler:    _TransactionStatsStatusService_FindMonthlyTransactionStatusFailedByCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyTransactionStatusFailedByCardNumber",
			Handler:    _TransactionStatsStatusService_FindYearlyTransactionStatusFailedByCardNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction/stats/transaction_stats_status.proto",
}
