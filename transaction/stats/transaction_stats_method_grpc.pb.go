// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: transaction/stats/transaction_stats_method.proto

package stats

import (
	context "context"
	transaction "github.com/MamangRust/monolith-graphql-payment-gateway-pb/transaction"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionStatsMethodService_FindMonthlyPaymentMethods_FullMethodName             = "/pb.transaction.stats.TransactionStatsMethodService/FindMonthlyPaymentMethods"
	TransactionStatsMethodService_FindYearlyPaymentMethods_FullMethodName              = "/pb.transaction.stats.TransactionStatsMethodService/FindYearlyPaymentMethods"
	TransactionStatsMethodService_FindMonthlyPaymentMethodsByCardNumber_FullMethodName = "/pb.transaction.stats.TransactionStatsMethodService/FindMonthlyPaymentMethodsByCardNumber"
	TransactionStatsMethodService_FindYearlyPaymentMethodsByCardNumber_FullMethodName  = "/pb.transaction.stats.TransactionStatsMethodService/FindYearlyPaymentMethodsByCardNumber"
)

// TransactionStatsMethodServiceClient is the client API for TransactionStatsMethodService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionStatsMethodServiceClient interface {
	FindMonthlyPaymentMethods(ctx context.Context, in *transaction.FindYearTransactionStatus, opts ...grpc.CallOption) (*ApiResponseTransactionMonthMethod, error)
	FindYearlyPaymentMethods(ctx context.Context, in *transaction.FindYearTransactionStatus, opts ...grpc.CallOption) (*ApiResponseTransactionYearMethod, error)
	FindMonthlyPaymentMethodsByCardNumber(ctx context.Context, in *transaction.FindByYearCardNumberTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransactionMonthMethod, error)
	FindYearlyPaymentMethodsByCardNumber(ctx context.Context, in *transaction.FindByYearCardNumberTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransactionYearMethod, error)
}

type transactionStatsMethodServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionStatsMethodServiceClient(cc grpc.ClientConnInterface) TransactionStatsMethodServiceClient {
	return &transactionStatsMethodServiceClient{cc}
}

func (c *transactionStatsMethodServiceClient) FindMonthlyPaymentMethods(ctx context.Context, in *transaction.FindYearTransactionStatus, opts ...grpc.CallOption) (*ApiResponseTransactionMonthMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionMonthMethod)
	err := c.cc.Invoke(ctx, TransactionStatsMethodService_FindMonthlyPaymentMethods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionStatsMethodServiceClient) FindYearlyPaymentMethods(ctx context.Context, in *transaction.FindYearTransactionStatus, opts ...grpc.CallOption) (*ApiResponseTransactionYearMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionYearMethod)
	err := c.cc.Invoke(ctx, TransactionStatsMethodService_FindYearlyPaymentMethods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionStatsMethodServiceClient) FindMonthlyPaymentMethodsByCardNumber(ctx context.Context, in *transaction.FindByYearCardNumberTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransactionMonthMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionMonthMethod)
	err := c.cc.Invoke(ctx, TransactionStatsMethodService_FindMonthlyPaymentMethodsByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionStatsMethodServiceClient) FindYearlyPaymentMethodsByCardNumber(ctx context.Context, in *transaction.FindByYearCardNumberTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransactionYearMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactionYearMethod)
	err := c.cc.Invoke(ctx, TransactionStatsMethodService_FindYearlyPaymentMethodsByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionStatsMethodServiceServer is the server API for TransactionStatsMethodService service.
// All implementations must embed UnimplementedTransactionStatsMethodServiceServer
// for forward compatibility.
type TransactionStatsMethodServiceServer interface {
	FindMonthlyPaymentMethods(context.Context, *transaction.FindYearTransactionStatus) (*ApiResponseTransactionMonthMethod, error)
	FindYearlyPaymentMethods(context.Context, *transaction.FindYearTransactionStatus) (*ApiResponseTransactionYearMethod, error)
	FindMonthlyPaymentMethodsByCardNumber(context.Context, *transaction.FindByYearCardNumberTransactionRequest) (*ApiResponseTransactionMonthMethod, error)
	FindYearlyPaymentMethodsByCardNumber(context.Context, *transaction.FindByYearCardNumberTransactionRequest) (*ApiResponseTransactionYearMethod, error)
	mustEmbedUnimplementedTransactionStatsMethodServiceServer()
}

// UnimplementedTransactionStatsMethodServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionStatsMethodServiceServer struct{}

func (UnimplementedTransactionStatsMethodServiceServer) FindMonthlyPaymentMethods(context.Context, *transaction.FindYearTransactionStatus) (*ApiResponseTransactionMonthMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyPaymentMethods not implemented")
}
func (UnimplementedTransactionStatsMethodServiceServer) FindYearlyPaymentMethods(context.Context, *transaction.FindYearTransactionStatus) (*ApiResponseTransactionYearMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyPaymentMethods not implemented")
}
func (UnimplementedTransactionStatsMethodServiceServer) FindMonthlyPaymentMethodsByCardNumber(context.Context, *transaction.FindByYearCardNumberTransactionRequest) (*ApiResponseTransactionMonthMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyPaymentMethodsByCardNumber not implemented")
}
func (UnimplementedTransactionStatsMethodServiceServer) FindYearlyPaymentMethodsByCardNumber(context.Context, *transaction.FindByYearCardNumberTransactionRequest) (*ApiResponseTransactionYearMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyPaymentMethodsByCardNumber not implemented")
}
func (UnimplementedTransactionStatsMethodServiceServer) mustEmbedUnimplementedTransactionStatsMethodServiceServer() {
}
func (UnimplementedTransactionStatsMethodServiceServer) testEmbeddedByValue() {}

// UnsafeTransactionStatsMethodServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionStatsMethodServiceServer will
// result in compilation errors.
type UnsafeTransactionStatsMethodServiceServer interface {
	mustEmbedUnimplementedTransactionStatsMethodServiceServer()
}

func RegisterTransactionStatsMethodServiceServer(s grpc.ServiceRegistrar, srv TransactionStatsMethodServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionStatsMethodServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionStatsMethodService_ServiceDesc, srv)
}

func _TransactionStatsMethodService_FindMonthlyPaymentMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transaction.FindYearTransactionStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionStatsMethodServiceServer).FindMonthlyPaymentMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionStatsMethodService_FindMonthlyPaymentMethods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionStatsMethodServiceServer).FindMonthlyPaymentMethods(ctx, req.(*transaction.FindYearTransactionStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionStatsMethodService_FindYearlyPaymentMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transaction.FindYearTransactionStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionStatsMethodServiceServer).FindYearlyPaymentMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionStatsMethodService_FindYearlyPaymentMethods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionStatsMethodServiceServer).FindYearlyPaymentMethods(ctx, req.(*transaction.FindYearTransactionStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionStatsMethodService_FindMonthlyPaymentMethodsByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transaction.FindByYearCardNumberTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionStatsMethodServiceServer).FindMonthlyPaymentMethodsByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionStatsMethodService_FindMonthlyPaymentMethodsByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionStatsMethodServiceServer).FindMonthlyPaymentMethodsByCardNumber(ctx, req.(*transaction.FindByYearCardNumberTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionStatsMethodService_FindYearlyPaymentMethodsByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transaction.FindByYearCardNumberTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionStatsMethodServiceServer).FindYearlyPaymentMethodsByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionStatsMethodService_FindYearlyPaymentMethodsByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionStatsMethodServiceServer).FindYearlyPaymentMethodsByCardNumber(ctx, req.(*transaction.FindByYearCardNumberTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionStatsMethodService_ServiceDesc is the grpc.ServiceDesc for TransactionStatsMethodService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionStatsMethodService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.transaction.stats.TransactionStatsMethodService",
	HandlerType: (*TransactionStatsMethodServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMonthlyPaymentMethods",
			Handler:    _TransactionStatsMethodService_FindMonthlyPaymentMethods_Handler,
		},
		{
			MethodName: "FindYearlyPaymentMethods",
			Handler:    _TransactionStatsMethodService_FindYearlyPaymentMethods_Handler,
		},
		{
			MethodName: "FindMonthlyPaymentMethodsByCardNumber",
			Handler:    _TransactionStatsMethodService_FindMonthlyPaymentMethodsByCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyPaymentMethodsByCardNumber",
			Handler:    _TransactionStatsMethodService_FindYearlyPaymentMethodsByCardNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction/stats/transaction_stats_method.proto",
}
