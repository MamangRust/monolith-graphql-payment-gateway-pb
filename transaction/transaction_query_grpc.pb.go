// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: transaction/transaction_query.proto

package transaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionQueryService_FindAllTransaction_FullMethodName             = "/pb.transaction.TransactionQueryService/FindAllTransaction"
	TransactionQueryService_FindAllTransactionByCardNumber_FullMethodName = "/pb.transaction.TransactionQueryService/FindAllTransactionByCardNumber"
	TransactionQueryService_FindByIdTransaction_FullMethodName            = "/pb.transaction.TransactionQueryService/FindByIdTransaction"
	TransactionQueryService_FindTransactionByMerchantId_FullMethodName    = "/pb.transaction.TransactionQueryService/FindTransactionByMerchantId"
	TransactionQueryService_FindByActiveTransaction_FullMethodName        = "/pb.transaction.TransactionQueryService/FindByActiveTransaction"
	TransactionQueryService_FindByTrashedTransaction_FullMethodName       = "/pb.transaction.TransactionQueryService/FindByTrashedTransaction"
)

// TransactionQueryServiceClient is the client API for TransactionQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionQueryServiceClient interface {
	FindAllTransaction(ctx context.Context, in *FindAllTransactionRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransaction, error)
	FindAllTransactionByCardNumber(ctx context.Context, in *FindAllTransactionCardNumberRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransaction, error)
	FindByIdTransaction(ctx context.Context, in *FindByIdTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransaction, error)
	FindTransactionByMerchantId(ctx context.Context, in *FindTransactionByMerchantIdRequest, opts ...grpc.CallOption) (*ApiResponseTransactions, error)
	FindByActiveTransaction(ctx context.Context, in *FindAllTransactionRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransactionDeleteAt, error)
	FindByTrashedTransaction(ctx context.Context, in *FindAllTransactionRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransactionDeleteAt, error)
}

type transactionQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionQueryServiceClient(cc grpc.ClientConnInterface) TransactionQueryServiceClient {
	return &transactionQueryServiceClient{cc}
}

func (c *transactionQueryServiceClient) FindAllTransaction(ctx context.Context, in *FindAllTransactionRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationTransaction)
	err := c.cc.Invoke(ctx, TransactionQueryService_FindAllTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionQueryServiceClient) FindAllTransactionByCardNumber(ctx context.Context, in *FindAllTransactionCardNumberRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationTransaction)
	err := c.cc.Invoke(ctx, TransactionQueryService_FindAllTransactionByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionQueryServiceClient) FindByIdTransaction(ctx context.Context, in *FindByIdTransactionRequest, opts ...grpc.CallOption) (*ApiResponseTransaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransaction)
	err := c.cc.Invoke(ctx, TransactionQueryService_FindByIdTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionQueryServiceClient) FindTransactionByMerchantId(ctx context.Context, in *FindTransactionByMerchantIdRequest, opts ...grpc.CallOption) (*ApiResponseTransactions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransactions)
	err := c.cc.Invoke(ctx, TransactionQueryService_FindTransactionByMerchantId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionQueryServiceClient) FindByActiveTransaction(ctx context.Context, in *FindAllTransactionRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransactionDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationTransactionDeleteAt)
	err := c.cc.Invoke(ctx, TransactionQueryService_FindByActiveTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionQueryServiceClient) FindByTrashedTransaction(ctx context.Context, in *FindAllTransactionRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransactionDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationTransactionDeleteAt)
	err := c.cc.Invoke(ctx, TransactionQueryService_FindByTrashedTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionQueryServiceServer is the server API for TransactionQueryService service.
// All implementations must embed UnimplementedTransactionQueryServiceServer
// for forward compatibility.
type TransactionQueryServiceServer interface {
	FindAllTransaction(context.Context, *FindAllTransactionRequest) (*ApiResponsePaginationTransaction, error)
	FindAllTransactionByCardNumber(context.Context, *FindAllTransactionCardNumberRequest) (*ApiResponsePaginationTransaction, error)
	FindByIdTransaction(context.Context, *FindByIdTransactionRequest) (*ApiResponseTransaction, error)
	FindTransactionByMerchantId(context.Context, *FindTransactionByMerchantIdRequest) (*ApiResponseTransactions, error)
	FindByActiveTransaction(context.Context, *FindAllTransactionRequest) (*ApiResponsePaginationTransactionDeleteAt, error)
	FindByTrashedTransaction(context.Context, *FindAllTransactionRequest) (*ApiResponsePaginationTransactionDeleteAt, error)
	mustEmbedUnimplementedTransactionQueryServiceServer()
}

// UnimplementedTransactionQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionQueryServiceServer struct{}

func (UnimplementedTransactionQueryServiceServer) FindAllTransaction(context.Context, *FindAllTransactionRequest) (*ApiResponsePaginationTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTransaction not implemented")
}
func (UnimplementedTransactionQueryServiceServer) FindAllTransactionByCardNumber(context.Context, *FindAllTransactionCardNumberRequest) (*ApiResponsePaginationTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTransactionByCardNumber not implemented")
}
func (UnimplementedTransactionQueryServiceServer) FindByIdTransaction(context.Context, *FindByIdTransactionRequest) (*ApiResponseTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByIdTransaction not implemented")
}
func (UnimplementedTransactionQueryServiceServer) FindTransactionByMerchantId(context.Context, *FindTransactionByMerchantIdRequest) (*ApiResponseTransactions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTransactionByMerchantId not implemented")
}
func (UnimplementedTransactionQueryServiceServer) FindByActiveTransaction(context.Context, *FindAllTransactionRequest) (*ApiResponsePaginationTransactionDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActiveTransaction not implemented")
}
func (UnimplementedTransactionQueryServiceServer) FindByTrashedTransaction(context.Context, *FindAllTransactionRequest) (*ApiResponsePaginationTransactionDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashedTransaction not implemented")
}
func (UnimplementedTransactionQueryServiceServer) mustEmbedUnimplementedTransactionQueryServiceServer() {
}
func (UnimplementedTransactionQueryServiceServer) testEmbeddedByValue() {}

// UnsafeTransactionQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionQueryServiceServer will
// result in compilation errors.
type UnsafeTransactionQueryServiceServer interface {
	mustEmbedUnimplementedTransactionQueryServiceServer()
}

func RegisterTransactionQueryServiceServer(s grpc.ServiceRegistrar, srv TransactionQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionQueryService_ServiceDesc, srv)
}

func _TransactionQueryService_FindAllTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionQueryServiceServer).FindAllTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionQueryService_FindAllTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionQueryServiceServer).FindAllTransaction(ctx, req.(*FindAllTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionQueryService_FindAllTransactionByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTransactionCardNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionQueryServiceServer).FindAllTransactionByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionQueryService_FindAllTransactionByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionQueryServiceServer).FindAllTransactionByCardNumber(ctx, req.(*FindAllTransactionCardNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionQueryService_FindByIdTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionQueryServiceServer).FindByIdTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionQueryService_FindByIdTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionQueryServiceServer).FindByIdTransaction(ctx, req.(*FindByIdTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionQueryService_FindTransactionByMerchantId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTransactionByMerchantIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionQueryServiceServer).FindTransactionByMerchantId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionQueryService_FindTransactionByMerchantId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionQueryServiceServer).FindTransactionByMerchantId(ctx, req.(*FindTransactionByMerchantIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionQueryService_FindByActiveTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionQueryServiceServer).FindByActiveTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionQueryService_FindByActiveTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionQueryServiceServer).FindByActiveTransaction(ctx, req.(*FindAllTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionQueryService_FindByTrashedTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionQueryServiceServer).FindByTrashedTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionQueryService_FindByTrashedTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionQueryServiceServer).FindByTrashedTransaction(ctx, req.(*FindAllTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionQueryService_ServiceDesc is the grpc.ServiceDesc for TransactionQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.transaction.TransactionQueryService",
	HandlerType: (*TransactionQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAllTransaction",
			Handler:    _TransactionQueryService_FindAllTransaction_Handler,
		},
		{
			MethodName: "FindAllTransactionByCardNumber",
			Handler:    _TransactionQueryService_FindAllTransactionByCardNumber_Handler,
		},
		{
			MethodName: "FindByIdTransaction",
			Handler:    _TransactionQueryService_FindByIdTransaction_Handler,
		},
		{
			MethodName: "FindTransactionByMerchantId",
			Handler:    _TransactionQueryService_FindTransactionByMerchantId_Handler,
		},
		{
			MethodName: "FindByActiveTransaction",
			Handler:    _TransactionQueryService_FindByActiveTransaction_Handler,
		},
		{
			MethodName: "FindByTrashedTransaction",
			Handler:    _TransactionQueryService_FindByTrashedTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction/transaction_query.proto",
}
