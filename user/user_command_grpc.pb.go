// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: user/user_command.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserCommandService_Create_FullMethodName                 = "/pb.user.UserCommandService/Create"
	UserCommandService_Update_FullMethodName                 = "/pb.user.UserCommandService/Update"
	UserCommandService_TrashedUser_FullMethodName            = "/pb.user.UserCommandService/TrashedUser"
	UserCommandService_RestoreUser_FullMethodName            = "/pb.user.UserCommandService/RestoreUser"
	UserCommandService_DeleteUserPermanent_FullMethodName    = "/pb.user.UserCommandService/DeleteUserPermanent"
	UserCommandService_RestoreAllUser_FullMethodName         = "/pb.user.UserCommandService/RestoreAllUser"
	UserCommandService_DeleteAllUserPermanent_FullMethodName = "/pb.user.UserCommandService/DeleteAllUserPermanent"
)

// UserCommandServiceClient is the client API for UserCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCommandServiceClient interface {
	Create(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*ApiResponseUser, error)
	Update(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*ApiResponseUser, error)
	TrashedUser(ctx context.Context, in *FindByIdUserRequest, opts ...grpc.CallOption) (*ApiResponseUserDeleteAt, error)
	RestoreUser(ctx context.Context, in *FindByIdUserRequest, opts ...grpc.CallOption) (*ApiResponseUserDeleteAt, error)
	DeleteUserPermanent(ctx context.Context, in *FindByIdUserRequest, opts ...grpc.CallOption) (*ApiResponseUserDelete, error)
	RestoreAllUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseUserAll, error)
	DeleteAllUserPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseUserAll, error)
}

type userCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCommandServiceClient(cc grpc.ClientConnInterface) UserCommandServiceClient {
	return &userCommandServiceClient{cc}
}

func (c *userCommandServiceClient) Create(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*ApiResponseUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseUser)
	err := c.cc.Invoke(ctx, UserCommandService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCommandServiceClient) Update(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*ApiResponseUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseUser)
	err := c.cc.Invoke(ctx, UserCommandService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCommandServiceClient) TrashedUser(ctx context.Context, in *FindByIdUserRequest, opts ...grpc.CallOption) (*ApiResponseUserDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseUserDeleteAt)
	err := c.cc.Invoke(ctx, UserCommandService_TrashedUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCommandServiceClient) RestoreUser(ctx context.Context, in *FindByIdUserRequest, opts ...grpc.CallOption) (*ApiResponseUserDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseUserDeleteAt)
	err := c.cc.Invoke(ctx, UserCommandService_RestoreUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCommandServiceClient) DeleteUserPermanent(ctx context.Context, in *FindByIdUserRequest, opts ...grpc.CallOption) (*ApiResponseUserDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseUserDelete)
	err := c.cc.Invoke(ctx, UserCommandService_DeleteUserPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCommandServiceClient) RestoreAllUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseUserAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseUserAll)
	err := c.cc.Invoke(ctx, UserCommandService_RestoreAllUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCommandServiceClient) DeleteAllUserPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseUserAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseUserAll)
	err := c.cc.Invoke(ctx, UserCommandService_DeleteAllUserPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCommandServiceServer is the server API for UserCommandService service.
// All implementations must embed UnimplementedUserCommandServiceServer
// for forward compatibility.
type UserCommandServiceServer interface {
	Create(context.Context, *CreateUserRequest) (*ApiResponseUser, error)
	Update(context.Context, *UpdateUserRequest) (*ApiResponseUser, error)
	TrashedUser(context.Context, *FindByIdUserRequest) (*ApiResponseUserDeleteAt, error)
	RestoreUser(context.Context, *FindByIdUserRequest) (*ApiResponseUserDeleteAt, error)
	DeleteUserPermanent(context.Context, *FindByIdUserRequest) (*ApiResponseUserDelete, error)
	RestoreAllUser(context.Context, *emptypb.Empty) (*ApiResponseUserAll, error)
	DeleteAllUserPermanent(context.Context, *emptypb.Empty) (*ApiResponseUserAll, error)
	mustEmbedUnimplementedUserCommandServiceServer()
}

// UnimplementedUserCommandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserCommandServiceServer struct{}

func (UnimplementedUserCommandServiceServer) Create(context.Context, *CreateUserRequest) (*ApiResponseUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserCommandServiceServer) Update(context.Context, *UpdateUserRequest) (*ApiResponseUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserCommandServiceServer) TrashedUser(context.Context, *FindByIdUserRequest) (*ApiResponseUserDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrashedUser not implemented")
}
func (UnimplementedUserCommandServiceServer) RestoreUser(context.Context, *FindByIdUserRequest) (*ApiResponseUserDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreUser not implemented")
}
func (UnimplementedUserCommandServiceServer) DeleteUserPermanent(context.Context, *FindByIdUserRequest) (*ApiResponseUserDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserPermanent not implemented")
}
func (UnimplementedUserCommandServiceServer) RestoreAllUser(context.Context, *emptypb.Empty) (*ApiResponseUserAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllUser not implemented")
}
func (UnimplementedUserCommandServiceServer) DeleteAllUserPermanent(context.Context, *emptypb.Empty) (*ApiResponseUserAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllUserPermanent not implemented")
}
func (UnimplementedUserCommandServiceServer) mustEmbedUnimplementedUserCommandServiceServer() {}
func (UnimplementedUserCommandServiceServer) testEmbeddedByValue()                            {}

// UnsafeUserCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCommandServiceServer will
// result in compilation errors.
type UnsafeUserCommandServiceServer interface {
	mustEmbedUnimplementedUserCommandServiceServer()
}

func RegisterUserCommandServiceServer(s grpc.ServiceRegistrar, srv UserCommandServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserCommandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserCommandService_ServiceDesc, srv)
}

func _UserCommandService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCommandServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCommandService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCommandServiceServer).Create(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCommandService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCommandServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCommandService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCommandServiceServer).Update(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCommandService_TrashedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCommandServiceServer).TrashedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCommandService_TrashedUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCommandServiceServer).TrashedUser(ctx, req.(*FindByIdUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCommandService_RestoreUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCommandServiceServer).RestoreUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCommandService_RestoreUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCommandServiceServer).RestoreUser(ctx, req.(*FindByIdUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCommandService_DeleteUserPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCommandServiceServer).DeleteUserPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCommandService_DeleteUserPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCommandServiceServer).DeleteUserPermanent(ctx, req.(*FindByIdUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCommandService_RestoreAllUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCommandServiceServer).RestoreAllUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCommandService_RestoreAllUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCommandServiceServer).RestoreAllUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCommandService_DeleteAllUserPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCommandServiceServer).DeleteAllUserPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCommandService_DeleteAllUserPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCommandServiceServer).DeleteAllUserPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCommandService_ServiceDesc is the grpc.ServiceDesc for UserCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.user.UserCommandService",
	HandlerType: (*UserCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserCommandService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserCommandService_Update_Handler,
		},
		{
			MethodName: "TrashedUser",
			Handler:    _UserCommandService_TrashedUser_Handler,
		},
		{
			MethodName: "RestoreUser",
			Handler:    _UserCommandService_RestoreUser_Handler,
		},
		{
			MethodName: "DeleteUserPermanent",
			Handler:    _UserCommandService_DeleteUserPermanent_Handler,
		},
		{
			MethodName: "RestoreAllUser",
			Handler:    _UserCommandService_RestoreAllUser_Handler,
		},
		{
			MethodName: "DeleteAllUserPermanent",
			Handler:    _UserCommandService_DeleteAllUserPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user_command.proto",
}
