// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: user/user_query.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserQueryService_FindAll_FullMethodName       = "/pb.user.UserQueryService/FindAll"
	UserQueryService_FindById_FullMethodName      = "/pb.user.UserQueryService/FindById"
	UserQueryService_FindByActive_FullMethodName  = "/pb.user.UserQueryService/FindByActive"
	UserQueryService_FindByTrashed_FullMethodName = "/pb.user.UserQueryService/FindByTrashed"
)

// UserQueryServiceClient is the client API for UserQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserQueryServiceClient interface {
	FindAll(ctx context.Context, in *FindAllUserRequest, opts ...grpc.CallOption) (*ApiResponsePaginationUser, error)
	FindById(ctx context.Context, in *FindByIdUserRequest, opts ...grpc.CallOption) (*ApiResponseUser, error)
	FindByActive(ctx context.Context, in *FindAllUserRequest, opts ...grpc.CallOption) (*ApiResponsePaginationUserDeleteAt, error)
	FindByTrashed(ctx context.Context, in *FindAllUserRequest, opts ...grpc.CallOption) (*ApiResponsePaginationUserDeleteAt, error)
}

type userQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserQueryServiceClient(cc grpc.ClientConnInterface) UserQueryServiceClient {
	return &userQueryServiceClient{cc}
}

func (c *userQueryServiceClient) FindAll(ctx context.Context, in *FindAllUserRequest, opts ...grpc.CallOption) (*ApiResponsePaginationUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationUser)
	err := c.cc.Invoke(ctx, UserQueryService_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userQueryServiceClient) FindById(ctx context.Context, in *FindByIdUserRequest, opts ...grpc.CallOption) (*ApiResponseUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseUser)
	err := c.cc.Invoke(ctx, UserQueryService_FindById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userQueryServiceClient) FindByActive(ctx context.Context, in *FindAllUserRequest, opts ...grpc.CallOption) (*ApiResponsePaginationUserDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationUserDeleteAt)
	err := c.cc.Invoke(ctx, UserQueryService_FindByActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userQueryServiceClient) FindByTrashed(ctx context.Context, in *FindAllUserRequest, opts ...grpc.CallOption) (*ApiResponsePaginationUserDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationUserDeleteAt)
	err := c.cc.Invoke(ctx, UserQueryService_FindByTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserQueryServiceServer is the server API for UserQueryService service.
// All implementations must embed UnimplementedUserQueryServiceServer
// for forward compatibility.
type UserQueryServiceServer interface {
	FindAll(context.Context, *FindAllUserRequest) (*ApiResponsePaginationUser, error)
	FindById(context.Context, *FindByIdUserRequest) (*ApiResponseUser, error)
	FindByActive(context.Context, *FindAllUserRequest) (*ApiResponsePaginationUserDeleteAt, error)
	FindByTrashed(context.Context, *FindAllUserRequest) (*ApiResponsePaginationUserDeleteAt, error)
	mustEmbedUnimplementedUserQueryServiceServer()
}

// UnimplementedUserQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserQueryServiceServer struct{}

func (UnimplementedUserQueryServiceServer) FindAll(context.Context, *FindAllUserRequest) (*ApiResponsePaginationUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedUserQueryServiceServer) FindById(context.Context, *FindByIdUserRequest) (*ApiResponseUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedUserQueryServiceServer) FindByActive(context.Context, *FindAllUserRequest) (*ApiResponsePaginationUserDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActive not implemented")
}
func (UnimplementedUserQueryServiceServer) FindByTrashed(context.Context, *FindAllUserRequest) (*ApiResponsePaginationUserDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashed not implemented")
}
func (UnimplementedUserQueryServiceServer) mustEmbedUnimplementedUserQueryServiceServer() {}
func (UnimplementedUserQueryServiceServer) testEmbeddedByValue()                          {}

// UnsafeUserQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserQueryServiceServer will
// result in compilation errors.
type UnsafeUserQueryServiceServer interface {
	mustEmbedUnimplementedUserQueryServiceServer()
}

func RegisterUserQueryServiceServer(s grpc.ServiceRegistrar, srv UserQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserQueryService_ServiceDesc, srv)
}

func _UserQueryService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserQueryServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserQueryService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserQueryServiceServer).FindAll(ctx, req.(*FindAllUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserQueryService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserQueryServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserQueryService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserQueryServiceServer).FindById(ctx, req.(*FindByIdUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserQueryService_FindByActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserQueryServiceServer).FindByActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserQueryService_FindByActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserQueryServiceServer).FindByActive(ctx, req.(*FindAllUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserQueryService_FindByTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserQueryServiceServer).FindByTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserQueryService_FindByTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserQueryServiceServer).FindByTrashed(ctx, req.(*FindAllUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserQueryService_ServiceDesc is the grpc.ServiceDesc for UserQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.user.UserQueryService",
	HandlerType: (*UserQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _UserQueryService_FindAll_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _UserQueryService_FindById_Handler,
		},
		{
			MethodName: "FindByActive",
			Handler:    _UserQueryService_FindByActive_Handler,
		},
		{
			MethodName: "FindByTrashed",
			Handler:    _UserQueryService_FindByTrashed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user_query.proto",
}
