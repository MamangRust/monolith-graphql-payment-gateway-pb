// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: transfer/transfer_query.proto

package transfer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransferQueryService_FindAllTransfer_FullMethodName            = "/pb.transfer.TransferQueryService/FindAllTransfer"
	TransferQueryService_FindByIdTransfer_FullMethodName           = "/pb.transfer.TransferQueryService/FindByIdTransfer"
	TransferQueryService_FindTransferByTransferFrom_FullMethodName = "/pb.transfer.TransferQueryService/FindTransferByTransferFrom"
	TransferQueryService_FindTransferByTransferTo_FullMethodName   = "/pb.transfer.TransferQueryService/FindTransferByTransferTo"
	TransferQueryService_FindByActiveTransfer_FullMethodName       = "/pb.transfer.TransferQueryService/FindByActiveTransfer"
	TransferQueryService_FindByTrashedTransfer_FullMethodName      = "/pb.transfer.TransferQueryService/FindByTrashedTransfer"
)

// TransferQueryServiceClient is the client API for TransferQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransferQueryServiceClient interface {
	FindAllTransfer(ctx context.Context, in *FindAllTransferRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransfer, error)
	FindByIdTransfer(ctx context.Context, in *FindByIdTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransfer, error)
	FindTransferByTransferFrom(ctx context.Context, in *FindTransferByTransferFromRequest, opts ...grpc.CallOption) (*ApiResponseTransfers, error)
	FindTransferByTransferTo(ctx context.Context, in *FindTransferByTransferToRequest, opts ...grpc.CallOption) (*ApiResponseTransfers, error)
	FindByActiveTransfer(ctx context.Context, in *FindAllTransferRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransferDeleteAt, error)
	FindByTrashedTransfer(ctx context.Context, in *FindAllTransferRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransferDeleteAt, error)
}

type transferQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferQueryServiceClient(cc grpc.ClientConnInterface) TransferQueryServiceClient {
	return &transferQueryServiceClient{cc}
}

func (c *transferQueryServiceClient) FindAllTransfer(ctx context.Context, in *FindAllTransferRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransfer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationTransfer)
	err := c.cc.Invoke(ctx, TransferQueryService_FindAllTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferQueryServiceClient) FindByIdTransfer(ctx context.Context, in *FindByIdTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransfer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransfer)
	err := c.cc.Invoke(ctx, TransferQueryService_FindByIdTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferQueryServiceClient) FindTransferByTransferFrom(ctx context.Context, in *FindTransferByTransferFromRequest, opts ...grpc.CallOption) (*ApiResponseTransfers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransfers)
	err := c.cc.Invoke(ctx, TransferQueryService_FindTransferByTransferFrom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferQueryServiceClient) FindTransferByTransferTo(ctx context.Context, in *FindTransferByTransferToRequest, opts ...grpc.CallOption) (*ApiResponseTransfers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransfers)
	err := c.cc.Invoke(ctx, TransferQueryService_FindTransferByTransferTo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferQueryServiceClient) FindByActiveTransfer(ctx context.Context, in *FindAllTransferRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransferDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationTransferDeleteAt)
	err := c.cc.Invoke(ctx, TransferQueryService_FindByActiveTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferQueryServiceClient) FindByTrashedTransfer(ctx context.Context, in *FindAllTransferRequest, opts ...grpc.CallOption) (*ApiResponsePaginationTransferDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationTransferDeleteAt)
	err := c.cc.Invoke(ctx, TransferQueryService_FindByTrashedTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferQueryServiceServer is the server API for TransferQueryService service.
// All implementations must embed UnimplementedTransferQueryServiceServer
// for forward compatibility.
type TransferQueryServiceServer interface {
	FindAllTransfer(context.Context, *FindAllTransferRequest) (*ApiResponsePaginationTransfer, error)
	FindByIdTransfer(context.Context, *FindByIdTransferRequest) (*ApiResponseTransfer, error)
	FindTransferByTransferFrom(context.Context, *FindTransferByTransferFromRequest) (*ApiResponseTransfers, error)
	FindTransferByTransferTo(context.Context, *FindTransferByTransferToRequest) (*ApiResponseTransfers, error)
	FindByActiveTransfer(context.Context, *FindAllTransferRequest) (*ApiResponsePaginationTransferDeleteAt, error)
	FindByTrashedTransfer(context.Context, *FindAllTransferRequest) (*ApiResponsePaginationTransferDeleteAt, error)
	mustEmbedUnimplementedTransferQueryServiceServer()
}

// UnimplementedTransferQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransferQueryServiceServer struct{}

func (UnimplementedTransferQueryServiceServer) FindAllTransfer(context.Context, *FindAllTransferRequest) (*ApiResponsePaginationTransfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTransfer not implemented")
}
func (UnimplementedTransferQueryServiceServer) FindByIdTransfer(context.Context, *FindByIdTransferRequest) (*ApiResponseTransfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByIdTransfer not implemented")
}
func (UnimplementedTransferQueryServiceServer) FindTransferByTransferFrom(context.Context, *FindTransferByTransferFromRequest) (*ApiResponseTransfers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTransferByTransferFrom not implemented")
}
func (UnimplementedTransferQueryServiceServer) FindTransferByTransferTo(context.Context, *FindTransferByTransferToRequest) (*ApiResponseTransfers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTransferByTransferTo not implemented")
}
func (UnimplementedTransferQueryServiceServer) FindByActiveTransfer(context.Context, *FindAllTransferRequest) (*ApiResponsePaginationTransferDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActiveTransfer not implemented")
}
func (UnimplementedTransferQueryServiceServer) FindByTrashedTransfer(context.Context, *FindAllTransferRequest) (*ApiResponsePaginationTransferDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashedTransfer not implemented")
}
func (UnimplementedTransferQueryServiceServer) mustEmbedUnimplementedTransferQueryServiceServer() {}
func (UnimplementedTransferQueryServiceServer) testEmbeddedByValue()                              {}

// UnsafeTransferQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransferQueryServiceServer will
// result in compilation errors.
type UnsafeTransferQueryServiceServer interface {
	mustEmbedUnimplementedTransferQueryServiceServer()
}

func RegisterTransferQueryServiceServer(s grpc.ServiceRegistrar, srv TransferQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransferQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransferQueryService_ServiceDesc, srv)
}

func _TransferQueryService_FindAllTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferQueryServiceServer).FindAllTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferQueryService_FindAllTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferQueryServiceServer).FindAllTransfer(ctx, req.(*FindAllTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferQueryService_FindByIdTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferQueryServiceServer).FindByIdTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferQueryService_FindByIdTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferQueryServiceServer).FindByIdTransfer(ctx, req.(*FindByIdTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferQueryService_FindTransferByTransferFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTransferByTransferFromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferQueryServiceServer).FindTransferByTransferFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferQueryService_FindTransferByTransferFrom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferQueryServiceServer).FindTransferByTransferFrom(ctx, req.(*FindTransferByTransferFromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferQueryService_FindTransferByTransferTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTransferByTransferToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferQueryServiceServer).FindTransferByTransferTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferQueryService_FindTransferByTransferTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferQueryServiceServer).FindTransferByTransferTo(ctx, req.(*FindTransferByTransferToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferQueryService_FindByActiveTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferQueryServiceServer).FindByActiveTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferQueryService_FindByActiveTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferQueryServiceServer).FindByActiveTransfer(ctx, req.(*FindAllTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferQueryService_FindByTrashedTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferQueryServiceServer).FindByTrashedTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferQueryService_FindByTrashedTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferQueryServiceServer).FindByTrashedTransfer(ctx, req.(*FindAllTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransferQueryService_ServiceDesc is the grpc.ServiceDesc for TransferQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransferQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.transfer.TransferQueryService",
	HandlerType: (*TransferQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAllTransfer",
			Handler:    _TransferQueryService_FindAllTransfer_Handler,
		},
		{
			MethodName: "FindByIdTransfer",
			Handler:    _TransferQueryService_FindByIdTransfer_Handler,
		},
		{
			MethodName: "FindTransferByTransferFrom",
			Handler:    _TransferQueryService_FindTransferByTransferFrom_Handler,
		},
		{
			MethodName: "FindTransferByTransferTo",
			Handler:    _TransferQueryService_FindTransferByTransferTo_Handler,
		},
		{
			MethodName: "FindByActiveTransfer",
			Handler:    _TransferQueryService_FindByActiveTransfer_Handler,
		},
		{
			MethodName: "FindByTrashedTransfer",
			Handler:    _TransferQueryService_FindByTrashedTransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transfer/transfer_query.proto",
}
