// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: transfer/stats/transfer_stats_amount.proto

package stats

import (
	context "context"
	transfer "github.com/MamangRust/monolith-graphql-payment-gateway-pb/transfer"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransferStatsAmountService_FindMonthlyTransferAmounts_FullMethodName                     = "/pb.transfer.stats.TransferStatsAmountService/FindMonthlyTransferAmounts"
	TransferStatsAmountService_FindYearlyTransferAmounts_FullMethodName                      = "/pb.transfer.stats.TransferStatsAmountService/FindYearlyTransferAmounts"
	TransferStatsAmountService_FindMonthlyTransferAmountsBySenderCardNumber_FullMethodName   = "/pb.transfer.stats.TransferStatsAmountService/FindMonthlyTransferAmountsBySenderCardNumber"
	TransferStatsAmountService_FindMonthlyTransferAmountsByReceiverCardNumber_FullMethodName = "/pb.transfer.stats.TransferStatsAmountService/FindMonthlyTransferAmountsByReceiverCardNumber"
	TransferStatsAmountService_FindYearlyTransferAmountsBySenderCardNumber_FullMethodName    = "/pb.transfer.stats.TransferStatsAmountService/FindYearlyTransferAmountsBySenderCardNumber"
	TransferStatsAmountService_FindYearlyTransferAmountsByReceiverCardNumber_FullMethodName  = "/pb.transfer.stats.TransferStatsAmountService/FindYearlyTransferAmountsByReceiverCardNumber"
)

// TransferStatsAmountServiceClient is the client API for TransferStatsAmountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransferStatsAmountServiceClient interface {
	FindMonthlyTransferAmounts(ctx context.Context, in *transfer.FindYearTransferStatus, opts ...grpc.CallOption) (*ApiResponseTransferMonthAmount, error)
	FindYearlyTransferAmounts(ctx context.Context, in *transfer.FindYearTransferStatus, opts ...grpc.CallOption) (*ApiResponseTransferYearAmount, error)
	FindMonthlyTransferAmountsBySenderCardNumber(ctx context.Context, in *transfer.FindByCardNumberTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransferMonthAmount, error)
	FindMonthlyTransferAmountsByReceiverCardNumber(ctx context.Context, in *transfer.FindByCardNumberTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransferMonthAmount, error)
	FindYearlyTransferAmountsBySenderCardNumber(ctx context.Context, in *transfer.FindByCardNumberTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransferYearAmount, error)
	FindYearlyTransferAmountsByReceiverCardNumber(ctx context.Context, in *transfer.FindByCardNumberTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransferYearAmount, error)
}

type transferStatsAmountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferStatsAmountServiceClient(cc grpc.ClientConnInterface) TransferStatsAmountServiceClient {
	return &transferStatsAmountServiceClient{cc}
}

func (c *transferStatsAmountServiceClient) FindMonthlyTransferAmounts(ctx context.Context, in *transfer.FindYearTransferStatus, opts ...grpc.CallOption) (*ApiResponseTransferMonthAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransferMonthAmount)
	err := c.cc.Invoke(ctx, TransferStatsAmountService_FindMonthlyTransferAmounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferStatsAmountServiceClient) FindYearlyTransferAmounts(ctx context.Context, in *transfer.FindYearTransferStatus, opts ...grpc.CallOption) (*ApiResponseTransferYearAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransferYearAmount)
	err := c.cc.Invoke(ctx, TransferStatsAmountService_FindYearlyTransferAmounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferStatsAmountServiceClient) FindMonthlyTransferAmountsBySenderCardNumber(ctx context.Context, in *transfer.FindByCardNumberTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransferMonthAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransferMonthAmount)
	err := c.cc.Invoke(ctx, TransferStatsAmountService_FindMonthlyTransferAmountsBySenderCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferStatsAmountServiceClient) FindMonthlyTransferAmountsByReceiverCardNumber(ctx context.Context, in *transfer.FindByCardNumberTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransferMonthAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransferMonthAmount)
	err := c.cc.Invoke(ctx, TransferStatsAmountService_FindMonthlyTransferAmountsByReceiverCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferStatsAmountServiceClient) FindYearlyTransferAmountsBySenderCardNumber(ctx context.Context, in *transfer.FindByCardNumberTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransferYearAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransferYearAmount)
	err := c.cc.Invoke(ctx, TransferStatsAmountService_FindYearlyTransferAmountsBySenderCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferStatsAmountServiceClient) FindYearlyTransferAmountsByReceiverCardNumber(ctx context.Context, in *transfer.FindByCardNumberTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransferYearAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransferYearAmount)
	err := c.cc.Invoke(ctx, TransferStatsAmountService_FindYearlyTransferAmountsByReceiverCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferStatsAmountServiceServer is the server API for TransferStatsAmountService service.
// All implementations must embed UnimplementedTransferStatsAmountServiceServer
// for forward compatibility.
type TransferStatsAmountServiceServer interface {
	FindMonthlyTransferAmounts(context.Context, *transfer.FindYearTransferStatus) (*ApiResponseTransferMonthAmount, error)
	FindYearlyTransferAmounts(context.Context, *transfer.FindYearTransferStatus) (*ApiResponseTransferYearAmount, error)
	FindMonthlyTransferAmountsBySenderCardNumber(context.Context, *transfer.FindByCardNumberTransferRequest) (*ApiResponseTransferMonthAmount, error)
	FindMonthlyTransferAmountsByReceiverCardNumber(context.Context, *transfer.FindByCardNumberTransferRequest) (*ApiResponseTransferMonthAmount, error)
	FindYearlyTransferAmountsBySenderCardNumber(context.Context, *transfer.FindByCardNumberTransferRequest) (*ApiResponseTransferYearAmount, error)
	FindYearlyTransferAmountsByReceiverCardNumber(context.Context, *transfer.FindByCardNumberTransferRequest) (*ApiResponseTransferYearAmount, error)
	mustEmbedUnimplementedTransferStatsAmountServiceServer()
}

// UnimplementedTransferStatsAmountServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransferStatsAmountServiceServer struct{}

func (UnimplementedTransferStatsAmountServiceServer) FindMonthlyTransferAmounts(context.Context, *transfer.FindYearTransferStatus) (*ApiResponseTransferMonthAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTransferAmounts not implemented")
}
func (UnimplementedTransferStatsAmountServiceServer) FindYearlyTransferAmounts(context.Context, *transfer.FindYearTransferStatus) (*ApiResponseTransferYearAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTransferAmounts not implemented")
}
func (UnimplementedTransferStatsAmountServiceServer) FindMonthlyTransferAmountsBySenderCardNumber(context.Context, *transfer.FindByCardNumberTransferRequest) (*ApiResponseTransferMonthAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTransferAmountsBySenderCardNumber not implemented")
}
func (UnimplementedTransferStatsAmountServiceServer) FindMonthlyTransferAmountsByReceiverCardNumber(context.Context, *transfer.FindByCardNumberTransferRequest) (*ApiResponseTransferMonthAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTransferAmountsByReceiverCardNumber not implemented")
}
func (UnimplementedTransferStatsAmountServiceServer) FindYearlyTransferAmountsBySenderCardNumber(context.Context, *transfer.FindByCardNumberTransferRequest) (*ApiResponseTransferYearAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTransferAmountsBySenderCardNumber not implemented")
}
func (UnimplementedTransferStatsAmountServiceServer) FindYearlyTransferAmountsByReceiverCardNumber(context.Context, *transfer.FindByCardNumberTransferRequest) (*ApiResponseTransferYearAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTransferAmountsByReceiverCardNumber not implemented")
}
func (UnimplementedTransferStatsAmountServiceServer) mustEmbedUnimplementedTransferStatsAmountServiceServer() {
}
func (UnimplementedTransferStatsAmountServiceServer) testEmbeddedByValue() {}

// UnsafeTransferStatsAmountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransferStatsAmountServiceServer will
// result in compilation errors.
type UnsafeTransferStatsAmountServiceServer interface {
	mustEmbedUnimplementedTransferStatsAmountServiceServer()
}

func RegisterTransferStatsAmountServiceServer(s grpc.ServiceRegistrar, srv TransferStatsAmountServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransferStatsAmountServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransferStatsAmountService_ServiceDesc, srv)
}

func _TransferStatsAmountService_FindMonthlyTransferAmounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transfer.FindYearTransferStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferStatsAmountServiceServer).FindMonthlyTransferAmounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferStatsAmountService_FindMonthlyTransferAmounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferStatsAmountServiceServer).FindMonthlyTransferAmounts(ctx, req.(*transfer.FindYearTransferStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferStatsAmountService_FindYearlyTransferAmounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transfer.FindYearTransferStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferStatsAmountServiceServer).FindYearlyTransferAmounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferStatsAmountService_FindYearlyTransferAmounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferStatsAmountServiceServer).FindYearlyTransferAmounts(ctx, req.(*transfer.FindYearTransferStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferStatsAmountService_FindMonthlyTransferAmountsBySenderCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transfer.FindByCardNumberTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferStatsAmountServiceServer).FindMonthlyTransferAmountsBySenderCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferStatsAmountService_FindMonthlyTransferAmountsBySenderCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferStatsAmountServiceServer).FindMonthlyTransferAmountsBySenderCardNumber(ctx, req.(*transfer.FindByCardNumberTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferStatsAmountService_FindMonthlyTransferAmountsByReceiverCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transfer.FindByCardNumberTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferStatsAmountServiceServer).FindMonthlyTransferAmountsByReceiverCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferStatsAmountService_FindMonthlyTransferAmountsByReceiverCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferStatsAmountServiceServer).FindMonthlyTransferAmountsByReceiverCardNumber(ctx, req.(*transfer.FindByCardNumberTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferStatsAmountService_FindYearlyTransferAmountsBySenderCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transfer.FindByCardNumberTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferStatsAmountServiceServer).FindYearlyTransferAmountsBySenderCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferStatsAmountService_FindYearlyTransferAmountsBySenderCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferStatsAmountServiceServer).FindYearlyTransferAmountsBySenderCardNumber(ctx, req.(*transfer.FindByCardNumberTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferStatsAmountService_FindYearlyTransferAmountsByReceiverCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transfer.FindByCardNumberTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferStatsAmountServiceServer).FindYearlyTransferAmountsByReceiverCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferStatsAmountService_FindYearlyTransferAmountsByReceiverCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferStatsAmountServiceServer).FindYearlyTransferAmountsByReceiverCardNumber(ctx, req.(*transfer.FindByCardNumberTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransferStatsAmountService_ServiceDesc is the grpc.ServiceDesc for TransferStatsAmountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransferStatsAmountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.transfer.stats.TransferStatsAmountService",
	HandlerType: (*TransferStatsAmountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMonthlyTransferAmounts",
			Handler:    _TransferStatsAmountService_FindMonthlyTransferAmounts_Handler,
		},
		{
			MethodName: "FindYearlyTransferAmounts",
			Handler:    _TransferStatsAmountService_FindYearlyTransferAmounts_Handler,
		},
		{
			MethodName: "FindMonthlyTransferAmountsBySenderCardNumber",
			Handler:    _TransferStatsAmountService_FindMonthlyTransferAmountsBySenderCardNumber_Handler,
		},
		{
			MethodName: "FindMonthlyTransferAmountsByReceiverCardNumber",
			Handler:    _TransferStatsAmountService_FindMonthlyTransferAmountsByReceiverCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyTransferAmountsBySenderCardNumber",
			Handler:    _TransferStatsAmountService_FindYearlyTransferAmountsBySenderCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyTransferAmountsByReceiverCardNumber",
			Handler:    _TransferStatsAmountService_FindYearlyTransferAmountsByReceiverCardNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transfer/stats/transfer_stats_amount.proto",
}
