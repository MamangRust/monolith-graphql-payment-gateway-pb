// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: transfer/stats/transfer_stats_status.proto

package stats

import (
	context "context"
	transfer "github.com/MamangRust/monolith-graphql-payment-gateway-pb/transfer"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransferStatsStatusService_FindMonthlyTransferStatusSuccess_FullMethodName             = "/pb.transfer.stats.TransferStatsStatusService/FindMonthlyTransferStatusSuccess"
	TransferStatsStatusService_FindYearlyTransferStatusSuccess_FullMethodName              = "/pb.transfer.stats.TransferStatsStatusService/FindYearlyTransferStatusSuccess"
	TransferStatsStatusService_FindMonthlyTransferStatusFailed_FullMethodName              = "/pb.transfer.stats.TransferStatsStatusService/FindMonthlyTransferStatusFailed"
	TransferStatsStatusService_FindYearlyTransferStatusFailed_FullMethodName               = "/pb.transfer.stats.TransferStatsStatusService/FindYearlyTransferStatusFailed"
	TransferStatsStatusService_FindMonthlyTransferStatusSuccessByCardNumber_FullMethodName = "/pb.transfer.stats.TransferStatsStatusService/FindMonthlyTransferStatusSuccessByCardNumber"
	TransferStatsStatusService_FindYearlyTransferStatusSuccessByCardNumber_FullMethodName  = "/pb.transfer.stats.TransferStatsStatusService/FindYearlyTransferStatusSuccessByCardNumber"
	TransferStatsStatusService_FindMonthlyTransferStatusFailedByCardNumber_FullMethodName  = "/pb.transfer.stats.TransferStatsStatusService/FindMonthlyTransferStatusFailedByCardNumber"
	TransferStatsStatusService_FindYearlyTransferStatusFailedByCardNumber_FullMethodName   = "/pb.transfer.stats.TransferStatsStatusService/FindYearlyTransferStatusFailedByCardNumber"
)

// TransferStatsStatusServiceClient is the client API for TransferStatsStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransferStatsStatusServiceClient interface {
	FindMonthlyTransferStatusSuccess(ctx context.Context, in *transfer.FindMonthlyTransferStatus, opts ...grpc.CallOption) (*ApiResponseTransferMonthStatusSuccess, error)
	FindYearlyTransferStatusSuccess(ctx context.Context, in *transfer.FindYearTransferStatus, opts ...grpc.CallOption) (*ApiResponseTransferYearStatusSuccess, error)
	FindMonthlyTransferStatusFailed(ctx context.Context, in *transfer.FindMonthlyTransferStatus, opts ...grpc.CallOption) (*ApiResponseTransferMonthStatusFailed, error)
	FindYearlyTransferStatusFailed(ctx context.Context, in *transfer.FindYearTransferStatus, opts ...grpc.CallOption) (*ApiResponseTransferYearStatusFailed, error)
	FindMonthlyTransferStatusSuccessByCardNumber(ctx context.Context, in *transfer.FindMonthlyTransferStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseTransferMonthStatusSuccess, error)
	FindYearlyTransferStatusSuccessByCardNumber(ctx context.Context, in *transfer.FindYearTransferStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseTransferYearStatusSuccess, error)
	FindMonthlyTransferStatusFailedByCardNumber(ctx context.Context, in *transfer.FindMonthlyTransferStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseTransferMonthStatusFailed, error)
	FindYearlyTransferStatusFailedByCardNumber(ctx context.Context, in *transfer.FindYearTransferStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseTransferYearStatusFailed, error)
}

type transferStatsStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferStatsStatusServiceClient(cc grpc.ClientConnInterface) TransferStatsStatusServiceClient {
	return &transferStatsStatusServiceClient{cc}
}

func (c *transferStatsStatusServiceClient) FindMonthlyTransferStatusSuccess(ctx context.Context, in *transfer.FindMonthlyTransferStatus, opts ...grpc.CallOption) (*ApiResponseTransferMonthStatusSuccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransferMonthStatusSuccess)
	err := c.cc.Invoke(ctx, TransferStatsStatusService_FindMonthlyTransferStatusSuccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferStatsStatusServiceClient) FindYearlyTransferStatusSuccess(ctx context.Context, in *transfer.FindYearTransferStatus, opts ...grpc.CallOption) (*ApiResponseTransferYearStatusSuccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransferYearStatusSuccess)
	err := c.cc.Invoke(ctx, TransferStatsStatusService_FindYearlyTransferStatusSuccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferStatsStatusServiceClient) FindMonthlyTransferStatusFailed(ctx context.Context, in *transfer.FindMonthlyTransferStatus, opts ...grpc.CallOption) (*ApiResponseTransferMonthStatusFailed, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransferMonthStatusFailed)
	err := c.cc.Invoke(ctx, TransferStatsStatusService_FindMonthlyTransferStatusFailed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferStatsStatusServiceClient) FindYearlyTransferStatusFailed(ctx context.Context, in *transfer.FindYearTransferStatus, opts ...grpc.CallOption) (*ApiResponseTransferYearStatusFailed, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransferYearStatusFailed)
	err := c.cc.Invoke(ctx, TransferStatsStatusService_FindYearlyTransferStatusFailed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferStatsStatusServiceClient) FindMonthlyTransferStatusSuccessByCardNumber(ctx context.Context, in *transfer.FindMonthlyTransferStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseTransferMonthStatusSuccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransferMonthStatusSuccess)
	err := c.cc.Invoke(ctx, TransferStatsStatusService_FindMonthlyTransferStatusSuccessByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferStatsStatusServiceClient) FindYearlyTransferStatusSuccessByCardNumber(ctx context.Context, in *transfer.FindYearTransferStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseTransferYearStatusSuccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransferYearStatusSuccess)
	err := c.cc.Invoke(ctx, TransferStatsStatusService_FindYearlyTransferStatusSuccessByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferStatsStatusServiceClient) FindMonthlyTransferStatusFailedByCardNumber(ctx context.Context, in *transfer.FindMonthlyTransferStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseTransferMonthStatusFailed, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransferMonthStatusFailed)
	err := c.cc.Invoke(ctx, TransferStatsStatusService_FindMonthlyTransferStatusFailedByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferStatsStatusServiceClient) FindYearlyTransferStatusFailedByCardNumber(ctx context.Context, in *transfer.FindYearTransferStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseTransferYearStatusFailed, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransferYearStatusFailed)
	err := c.cc.Invoke(ctx, TransferStatsStatusService_FindYearlyTransferStatusFailedByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferStatsStatusServiceServer is the server API for TransferStatsStatusService service.
// All implementations must embed UnimplementedTransferStatsStatusServiceServer
// for forward compatibility.
type TransferStatsStatusServiceServer interface {
	FindMonthlyTransferStatusSuccess(context.Context, *transfer.FindMonthlyTransferStatus) (*ApiResponseTransferMonthStatusSuccess, error)
	FindYearlyTransferStatusSuccess(context.Context, *transfer.FindYearTransferStatus) (*ApiResponseTransferYearStatusSuccess, error)
	FindMonthlyTransferStatusFailed(context.Context, *transfer.FindMonthlyTransferStatus) (*ApiResponseTransferMonthStatusFailed, error)
	FindYearlyTransferStatusFailed(context.Context, *transfer.FindYearTransferStatus) (*ApiResponseTransferYearStatusFailed, error)
	FindMonthlyTransferStatusSuccessByCardNumber(context.Context, *transfer.FindMonthlyTransferStatusCardNumber) (*ApiResponseTransferMonthStatusSuccess, error)
	FindYearlyTransferStatusSuccessByCardNumber(context.Context, *transfer.FindYearTransferStatusCardNumber) (*ApiResponseTransferYearStatusSuccess, error)
	FindMonthlyTransferStatusFailedByCardNumber(context.Context, *transfer.FindMonthlyTransferStatusCardNumber) (*ApiResponseTransferMonthStatusFailed, error)
	FindYearlyTransferStatusFailedByCardNumber(context.Context, *transfer.FindYearTransferStatusCardNumber) (*ApiResponseTransferYearStatusFailed, error)
	mustEmbedUnimplementedTransferStatsStatusServiceServer()
}

// UnimplementedTransferStatsStatusServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransferStatsStatusServiceServer struct{}

func (UnimplementedTransferStatsStatusServiceServer) FindMonthlyTransferStatusSuccess(context.Context, *transfer.FindMonthlyTransferStatus) (*ApiResponseTransferMonthStatusSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTransferStatusSuccess not implemented")
}
func (UnimplementedTransferStatsStatusServiceServer) FindYearlyTransferStatusSuccess(context.Context, *transfer.FindYearTransferStatus) (*ApiResponseTransferYearStatusSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTransferStatusSuccess not implemented")
}
func (UnimplementedTransferStatsStatusServiceServer) FindMonthlyTransferStatusFailed(context.Context, *transfer.FindMonthlyTransferStatus) (*ApiResponseTransferMonthStatusFailed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTransferStatusFailed not implemented")
}
func (UnimplementedTransferStatsStatusServiceServer) FindYearlyTransferStatusFailed(context.Context, *transfer.FindYearTransferStatus) (*ApiResponseTransferYearStatusFailed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTransferStatusFailed not implemented")
}
func (UnimplementedTransferStatsStatusServiceServer) FindMonthlyTransferStatusSuccessByCardNumber(context.Context, *transfer.FindMonthlyTransferStatusCardNumber) (*ApiResponseTransferMonthStatusSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTransferStatusSuccessByCardNumber not implemented")
}
func (UnimplementedTransferStatsStatusServiceServer) FindYearlyTransferStatusSuccessByCardNumber(context.Context, *transfer.FindYearTransferStatusCardNumber) (*ApiResponseTransferYearStatusSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTransferStatusSuccessByCardNumber not implemented")
}
func (UnimplementedTransferStatsStatusServiceServer) FindMonthlyTransferStatusFailedByCardNumber(context.Context, *transfer.FindMonthlyTransferStatusCardNumber) (*ApiResponseTransferMonthStatusFailed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTransferStatusFailedByCardNumber not implemented")
}
func (UnimplementedTransferStatsStatusServiceServer) FindYearlyTransferStatusFailedByCardNumber(context.Context, *transfer.FindYearTransferStatusCardNumber) (*ApiResponseTransferYearStatusFailed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTransferStatusFailedByCardNumber not implemented")
}
func (UnimplementedTransferStatsStatusServiceServer) mustEmbedUnimplementedTransferStatsStatusServiceServer() {
}
func (UnimplementedTransferStatsStatusServiceServer) testEmbeddedByValue() {}

// UnsafeTransferStatsStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransferStatsStatusServiceServer will
// result in compilation errors.
type UnsafeTransferStatsStatusServiceServer interface {
	mustEmbedUnimplementedTransferStatsStatusServiceServer()
}

func RegisterTransferStatsStatusServiceServer(s grpc.ServiceRegistrar, srv TransferStatsStatusServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransferStatsStatusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransferStatsStatusService_ServiceDesc, srv)
}

func _TransferStatsStatusService_FindMonthlyTransferStatusSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transfer.FindMonthlyTransferStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferStatsStatusServiceServer).FindMonthlyTransferStatusSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferStatsStatusService_FindMonthlyTransferStatusSuccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferStatsStatusServiceServer).FindMonthlyTransferStatusSuccess(ctx, req.(*transfer.FindMonthlyTransferStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferStatsStatusService_FindYearlyTransferStatusSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transfer.FindYearTransferStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferStatsStatusServiceServer).FindYearlyTransferStatusSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferStatsStatusService_FindYearlyTransferStatusSuccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferStatsStatusServiceServer).FindYearlyTransferStatusSuccess(ctx, req.(*transfer.FindYearTransferStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferStatsStatusService_FindMonthlyTransferStatusFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transfer.FindMonthlyTransferStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferStatsStatusServiceServer).FindMonthlyTransferStatusFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferStatsStatusService_FindMonthlyTransferStatusFailed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferStatsStatusServiceServer).FindMonthlyTransferStatusFailed(ctx, req.(*transfer.FindMonthlyTransferStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferStatsStatusService_FindYearlyTransferStatusFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transfer.FindYearTransferStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferStatsStatusServiceServer).FindYearlyTransferStatusFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferStatsStatusService_FindYearlyTransferStatusFailed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferStatsStatusServiceServer).FindYearlyTransferStatusFailed(ctx, req.(*transfer.FindYearTransferStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferStatsStatusService_FindMonthlyTransferStatusSuccessByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transfer.FindMonthlyTransferStatusCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferStatsStatusServiceServer).FindMonthlyTransferStatusSuccessByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferStatsStatusService_FindMonthlyTransferStatusSuccessByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferStatsStatusServiceServer).FindMonthlyTransferStatusSuccessByCardNumber(ctx, req.(*transfer.FindMonthlyTransferStatusCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferStatsStatusService_FindYearlyTransferStatusSuccessByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transfer.FindYearTransferStatusCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferStatsStatusServiceServer).FindYearlyTransferStatusSuccessByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferStatsStatusService_FindYearlyTransferStatusSuccessByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferStatsStatusServiceServer).FindYearlyTransferStatusSuccessByCardNumber(ctx, req.(*transfer.FindYearTransferStatusCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferStatsStatusService_FindMonthlyTransferStatusFailedByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transfer.FindMonthlyTransferStatusCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferStatsStatusServiceServer).FindMonthlyTransferStatusFailedByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferStatsStatusService_FindMonthlyTransferStatusFailedByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferStatsStatusServiceServer).FindMonthlyTransferStatusFailedByCardNumber(ctx, req.(*transfer.FindMonthlyTransferStatusCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferStatsStatusService_FindYearlyTransferStatusFailedByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transfer.FindYearTransferStatusCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferStatsStatusServiceServer).FindYearlyTransferStatusFailedByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferStatsStatusService_FindYearlyTransferStatusFailedByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferStatsStatusServiceServer).FindYearlyTransferStatusFailedByCardNumber(ctx, req.(*transfer.FindYearTransferStatusCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

// TransferStatsStatusService_ServiceDesc is the grpc.ServiceDesc for TransferStatsStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransferStatsStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.transfer.stats.TransferStatsStatusService",
	HandlerType: (*TransferStatsStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMonthlyTransferStatusSuccess",
			Handler:    _TransferStatsStatusService_FindMonthlyTransferStatusSuccess_Handler,
		},
		{
			MethodName: "FindYearlyTransferStatusSuccess",
			Handler:    _TransferStatsStatusService_FindYearlyTransferStatusSuccess_Handler,
		},
		{
			MethodName: "FindMonthlyTransferStatusFailed",
			Handler:    _TransferStatsStatusService_FindMonthlyTransferStatusFailed_Handler,
		},
		{
			MethodName: "FindYearlyTransferStatusFailed",
			Handler:    _TransferStatsStatusService_FindYearlyTransferStatusFailed_Handler,
		},
		{
			MethodName: "FindMonthlyTransferStatusSuccessByCardNumber",
			Handler:    _TransferStatsStatusService_FindMonthlyTransferStatusSuccessByCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyTransferStatusSuccessByCardNumber",
			Handler:    _TransferStatsStatusService_FindYearlyTransferStatusSuccessByCardNumber_Handler,
		},
		{
			MethodName: "FindMonthlyTransferStatusFailedByCardNumber",
			Handler:    _TransferStatsStatusService_FindMonthlyTransferStatusFailedByCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyTransferStatusFailedByCardNumber",
			Handler:    _TransferStatsStatusService_FindYearlyTransferStatusFailedByCardNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transfer/stats/transfer_stats_status.proto",
}
