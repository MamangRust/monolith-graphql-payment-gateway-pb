// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: transfer/transfer_command.proto

package transfer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransferCommandService_CreateTransfer_FullMethodName             = "/pb.transfer.TransferCommandService/CreateTransfer"
	TransferCommandService_UpdateTransfer_FullMethodName             = "/pb.transfer.TransferCommandService/UpdateTransfer"
	TransferCommandService_TrashedTransfer_FullMethodName            = "/pb.transfer.TransferCommandService/TrashedTransfer"
	TransferCommandService_RestoreTransfer_FullMethodName            = "/pb.transfer.TransferCommandService/RestoreTransfer"
	TransferCommandService_DeleteTransferPermanent_FullMethodName    = "/pb.transfer.TransferCommandService/DeleteTransferPermanent"
	TransferCommandService_RestoreAllTransfer_FullMethodName         = "/pb.transfer.TransferCommandService/RestoreAllTransfer"
	TransferCommandService_DeleteAllTransferPermanent_FullMethodName = "/pb.transfer.TransferCommandService/DeleteAllTransferPermanent"
)

// TransferCommandServiceClient is the client API for TransferCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransferCommandServiceClient interface {
	CreateTransfer(ctx context.Context, in *CreateTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransfer, error)
	UpdateTransfer(ctx context.Context, in *UpdateTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransfer, error)
	TrashedTransfer(ctx context.Context, in *FindByIdTransferRequest, opts ...grpc.CallOption) (*TransferResponseDeleteAt, error)
	RestoreTransfer(ctx context.Context, in *FindByIdTransferRequest, opts ...grpc.CallOption) (*TransferResponseDeleteAt, error)
	DeleteTransferPermanent(ctx context.Context, in *FindByIdTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransferDelete, error)
	RestoreAllTransfer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseTransferAll, error)
	DeleteAllTransferPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseTransferAll, error)
}

type transferCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferCommandServiceClient(cc grpc.ClientConnInterface) TransferCommandServiceClient {
	return &transferCommandServiceClient{cc}
}

func (c *transferCommandServiceClient) CreateTransfer(ctx context.Context, in *CreateTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransfer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransfer)
	err := c.cc.Invoke(ctx, TransferCommandService_CreateTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferCommandServiceClient) UpdateTransfer(ctx context.Context, in *UpdateTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransfer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransfer)
	err := c.cc.Invoke(ctx, TransferCommandService_UpdateTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferCommandServiceClient) TrashedTransfer(ctx context.Context, in *FindByIdTransferRequest, opts ...grpc.CallOption) (*TransferResponseDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferResponseDeleteAt)
	err := c.cc.Invoke(ctx, TransferCommandService_TrashedTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferCommandServiceClient) RestoreTransfer(ctx context.Context, in *FindByIdTransferRequest, opts ...grpc.CallOption) (*TransferResponseDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferResponseDeleteAt)
	err := c.cc.Invoke(ctx, TransferCommandService_RestoreTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferCommandServiceClient) DeleteTransferPermanent(ctx context.Context, in *FindByIdTransferRequest, opts ...grpc.CallOption) (*ApiResponseTransferDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransferDelete)
	err := c.cc.Invoke(ctx, TransferCommandService_DeleteTransferPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferCommandServiceClient) RestoreAllTransfer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseTransferAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransferAll)
	err := c.cc.Invoke(ctx, TransferCommandService_RestoreAllTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferCommandServiceClient) DeleteAllTransferPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseTransferAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseTransferAll)
	err := c.cc.Invoke(ctx, TransferCommandService_DeleteAllTransferPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferCommandServiceServer is the server API for TransferCommandService service.
// All implementations must embed UnimplementedTransferCommandServiceServer
// for forward compatibility.
type TransferCommandServiceServer interface {
	CreateTransfer(context.Context, *CreateTransferRequest) (*ApiResponseTransfer, error)
	UpdateTransfer(context.Context, *UpdateTransferRequest) (*ApiResponseTransfer, error)
	TrashedTransfer(context.Context, *FindByIdTransferRequest) (*TransferResponseDeleteAt, error)
	RestoreTransfer(context.Context, *FindByIdTransferRequest) (*TransferResponseDeleteAt, error)
	DeleteTransferPermanent(context.Context, *FindByIdTransferRequest) (*ApiResponseTransferDelete, error)
	RestoreAllTransfer(context.Context, *emptypb.Empty) (*ApiResponseTransferAll, error)
	DeleteAllTransferPermanent(context.Context, *emptypb.Empty) (*ApiResponseTransferAll, error)
	mustEmbedUnimplementedTransferCommandServiceServer()
}

// UnimplementedTransferCommandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransferCommandServiceServer struct{}

func (UnimplementedTransferCommandServiceServer) CreateTransfer(context.Context, *CreateTransferRequest) (*ApiResponseTransfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransfer not implemented")
}
func (UnimplementedTransferCommandServiceServer) UpdateTransfer(context.Context, *UpdateTransferRequest) (*ApiResponseTransfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransfer not implemented")
}
func (UnimplementedTransferCommandServiceServer) TrashedTransfer(context.Context, *FindByIdTransferRequest) (*TransferResponseDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrashedTransfer not implemented")
}
func (UnimplementedTransferCommandServiceServer) RestoreTransfer(context.Context, *FindByIdTransferRequest) (*TransferResponseDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreTransfer not implemented")
}
func (UnimplementedTransferCommandServiceServer) DeleteTransferPermanent(context.Context, *FindByIdTransferRequest) (*ApiResponseTransferDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransferPermanent not implemented")
}
func (UnimplementedTransferCommandServiceServer) RestoreAllTransfer(context.Context, *emptypb.Empty) (*ApiResponseTransferAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllTransfer not implemented")
}
func (UnimplementedTransferCommandServiceServer) DeleteAllTransferPermanent(context.Context, *emptypb.Empty) (*ApiResponseTransferAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllTransferPermanent not implemented")
}
func (UnimplementedTransferCommandServiceServer) mustEmbedUnimplementedTransferCommandServiceServer() {
}
func (UnimplementedTransferCommandServiceServer) testEmbeddedByValue() {}

// UnsafeTransferCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransferCommandServiceServer will
// result in compilation errors.
type UnsafeTransferCommandServiceServer interface {
	mustEmbedUnimplementedTransferCommandServiceServer()
}

func RegisterTransferCommandServiceServer(s grpc.ServiceRegistrar, srv TransferCommandServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransferCommandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransferCommandService_ServiceDesc, srv)
}

func _TransferCommandService_CreateTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferCommandServiceServer).CreateTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferCommandService_CreateTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferCommandServiceServer).CreateTransfer(ctx, req.(*CreateTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferCommandService_UpdateTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferCommandServiceServer).UpdateTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferCommandService_UpdateTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferCommandServiceServer).UpdateTransfer(ctx, req.(*UpdateTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferCommandService_TrashedTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferCommandServiceServer).TrashedTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferCommandService_TrashedTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferCommandServiceServer).TrashedTransfer(ctx, req.(*FindByIdTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferCommandService_RestoreTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferCommandServiceServer).RestoreTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferCommandService_RestoreTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferCommandServiceServer).RestoreTransfer(ctx, req.(*FindByIdTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferCommandService_DeleteTransferPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferCommandServiceServer).DeleteTransferPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferCommandService_DeleteTransferPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferCommandServiceServer).DeleteTransferPermanent(ctx, req.(*FindByIdTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferCommandService_RestoreAllTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferCommandServiceServer).RestoreAllTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferCommandService_RestoreAllTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferCommandServiceServer).RestoreAllTransfer(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferCommandService_DeleteAllTransferPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferCommandServiceServer).DeleteAllTransferPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferCommandService_DeleteAllTransferPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferCommandServiceServer).DeleteAllTransferPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TransferCommandService_ServiceDesc is the grpc.ServiceDesc for TransferCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransferCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.transfer.TransferCommandService",
	HandlerType: (*TransferCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransfer",
			Handler:    _TransferCommandService_CreateTransfer_Handler,
		},
		{
			MethodName: "UpdateTransfer",
			Handler:    _TransferCommandService_UpdateTransfer_Handler,
		},
		{
			MethodName: "TrashedTransfer",
			Handler:    _TransferCommandService_TrashedTransfer_Handler,
		},
		{
			MethodName: "RestoreTransfer",
			Handler:    _TransferCommandService_RestoreTransfer_Handler,
		},
		{
			MethodName: "DeleteTransferPermanent",
			Handler:    _TransferCommandService_DeleteTransferPermanent_Handler,
		},
		{
			MethodName: "RestoreAllTransfer",
			Handler:    _TransferCommandService_RestoreAllTransfer_Handler,
		},
		{
			MethodName: "DeleteAllTransferPermanent",
			Handler:    _TransferCommandService_DeleteAllTransferPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transfer/transfer_command.proto",
}
