// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: merchant/stats/merchant_stats_totalamount.proto

package stats

import (
	context "context"
	merchant "github.com/MamangRust/monolith-graphql-payment-gateway-pb/merchant"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MerchantStatsTotalAmountService_FindMonthlyTotalAmountMerchant_FullMethodName    = "/pb.merchant.stats.MerchantStatsTotalAmountService/FindMonthlyTotalAmountMerchant"
	MerchantStatsTotalAmountService_FindYearlyTotalAmountMerchant_FullMethodName     = "/pb.merchant.stats.MerchantStatsTotalAmountService/FindYearlyTotalAmountMerchant"
	MerchantStatsTotalAmountService_FindMonthlyTotalAmountByMerchants_FullMethodName = "/pb.merchant.stats.MerchantStatsTotalAmountService/FindMonthlyTotalAmountByMerchants"
	MerchantStatsTotalAmountService_FindYearlyTotalAmountByMerchants_FullMethodName  = "/pb.merchant.stats.MerchantStatsTotalAmountService/FindYearlyTotalAmountByMerchants"
	MerchantStatsTotalAmountService_FindMonthlyTotalAmountByApikey_FullMethodName    = "/pb.merchant.stats.MerchantStatsTotalAmountService/FindMonthlyTotalAmountByApikey"
	MerchantStatsTotalAmountService_FindYearlyTotalAmountByApikey_FullMethodName     = "/pb.merchant.stats.MerchantStatsTotalAmountService/FindYearlyTotalAmountByApikey"
)

// MerchantStatsTotalAmountServiceClient is the client API for MerchantStatsTotalAmountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantStatsTotalAmountServiceClient interface {
	FindMonthlyTotalAmountMerchant(ctx context.Context, in *merchant.FindYearMerchant, opts ...grpc.CallOption) (*ApiResponseMerchantMonthlyTotalAmount, error)
	FindYearlyTotalAmountMerchant(ctx context.Context, in *merchant.FindYearMerchant, opts ...grpc.CallOption) (*ApiResponseMerchantYearlyTotalAmount, error)
	FindMonthlyTotalAmountByMerchants(ctx context.Context, in *merchant.FindYearMerchantById, opts ...grpc.CallOption) (*ApiResponseMerchantMonthlyTotalAmount, error)
	FindYearlyTotalAmountByMerchants(ctx context.Context, in *merchant.FindYearMerchantById, opts ...grpc.CallOption) (*ApiResponseMerchantYearlyTotalAmount, error)
	FindMonthlyTotalAmountByApikey(ctx context.Context, in *merchant.FindYearMerchantByApikey, opts ...grpc.CallOption) (*ApiResponseMerchantMonthlyTotalAmount, error)
	FindYearlyTotalAmountByApikey(ctx context.Context, in *merchant.FindYearMerchantByApikey, opts ...grpc.CallOption) (*ApiResponseMerchantYearlyTotalAmount, error)
}

type merchantStatsTotalAmountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantStatsTotalAmountServiceClient(cc grpc.ClientConnInterface) MerchantStatsTotalAmountServiceClient {
	return &merchantStatsTotalAmountServiceClient{cc}
}

func (c *merchantStatsTotalAmountServiceClient) FindMonthlyTotalAmountMerchant(ctx context.Context, in *merchant.FindYearMerchant, opts ...grpc.CallOption) (*ApiResponseMerchantMonthlyTotalAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantMonthlyTotalAmount)
	err := c.cc.Invoke(ctx, MerchantStatsTotalAmountService_FindMonthlyTotalAmountMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantStatsTotalAmountServiceClient) FindYearlyTotalAmountMerchant(ctx context.Context, in *merchant.FindYearMerchant, opts ...grpc.CallOption) (*ApiResponseMerchantYearlyTotalAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantYearlyTotalAmount)
	err := c.cc.Invoke(ctx, MerchantStatsTotalAmountService_FindYearlyTotalAmountMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantStatsTotalAmountServiceClient) FindMonthlyTotalAmountByMerchants(ctx context.Context, in *merchant.FindYearMerchantById, opts ...grpc.CallOption) (*ApiResponseMerchantMonthlyTotalAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantMonthlyTotalAmount)
	err := c.cc.Invoke(ctx, MerchantStatsTotalAmountService_FindMonthlyTotalAmountByMerchants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantStatsTotalAmountServiceClient) FindYearlyTotalAmountByMerchants(ctx context.Context, in *merchant.FindYearMerchantById, opts ...grpc.CallOption) (*ApiResponseMerchantYearlyTotalAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantYearlyTotalAmount)
	err := c.cc.Invoke(ctx, MerchantStatsTotalAmountService_FindYearlyTotalAmountByMerchants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantStatsTotalAmountServiceClient) FindMonthlyTotalAmountByApikey(ctx context.Context, in *merchant.FindYearMerchantByApikey, opts ...grpc.CallOption) (*ApiResponseMerchantMonthlyTotalAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantMonthlyTotalAmount)
	err := c.cc.Invoke(ctx, MerchantStatsTotalAmountService_FindMonthlyTotalAmountByApikey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantStatsTotalAmountServiceClient) FindYearlyTotalAmountByApikey(ctx context.Context, in *merchant.FindYearMerchantByApikey, opts ...grpc.CallOption) (*ApiResponseMerchantYearlyTotalAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantYearlyTotalAmount)
	err := c.cc.Invoke(ctx, MerchantStatsTotalAmountService_FindYearlyTotalAmountByApikey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantStatsTotalAmountServiceServer is the server API for MerchantStatsTotalAmountService service.
// All implementations must embed UnimplementedMerchantStatsTotalAmountServiceServer
// for forward compatibility.
type MerchantStatsTotalAmountServiceServer interface {
	FindMonthlyTotalAmountMerchant(context.Context, *merchant.FindYearMerchant) (*ApiResponseMerchantMonthlyTotalAmount, error)
	FindYearlyTotalAmountMerchant(context.Context, *merchant.FindYearMerchant) (*ApiResponseMerchantYearlyTotalAmount, error)
	FindMonthlyTotalAmountByMerchants(context.Context, *merchant.FindYearMerchantById) (*ApiResponseMerchantMonthlyTotalAmount, error)
	FindYearlyTotalAmountByMerchants(context.Context, *merchant.FindYearMerchantById) (*ApiResponseMerchantYearlyTotalAmount, error)
	FindMonthlyTotalAmountByApikey(context.Context, *merchant.FindYearMerchantByApikey) (*ApiResponseMerchantMonthlyTotalAmount, error)
	FindYearlyTotalAmountByApikey(context.Context, *merchant.FindYearMerchantByApikey) (*ApiResponseMerchantYearlyTotalAmount, error)
	mustEmbedUnimplementedMerchantStatsTotalAmountServiceServer()
}

// UnimplementedMerchantStatsTotalAmountServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMerchantStatsTotalAmountServiceServer struct{}

func (UnimplementedMerchantStatsTotalAmountServiceServer) FindMonthlyTotalAmountMerchant(context.Context, *merchant.FindYearMerchant) (*ApiResponseMerchantMonthlyTotalAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTotalAmountMerchant not implemented")
}
func (UnimplementedMerchantStatsTotalAmountServiceServer) FindYearlyTotalAmountMerchant(context.Context, *merchant.FindYearMerchant) (*ApiResponseMerchantYearlyTotalAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTotalAmountMerchant not implemented")
}
func (UnimplementedMerchantStatsTotalAmountServiceServer) FindMonthlyTotalAmountByMerchants(context.Context, *merchant.FindYearMerchantById) (*ApiResponseMerchantMonthlyTotalAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTotalAmountByMerchants not implemented")
}
func (UnimplementedMerchantStatsTotalAmountServiceServer) FindYearlyTotalAmountByMerchants(context.Context, *merchant.FindYearMerchantById) (*ApiResponseMerchantYearlyTotalAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTotalAmountByMerchants not implemented")
}
func (UnimplementedMerchantStatsTotalAmountServiceServer) FindMonthlyTotalAmountByApikey(context.Context, *merchant.FindYearMerchantByApikey) (*ApiResponseMerchantMonthlyTotalAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyTotalAmountByApikey not implemented")
}
func (UnimplementedMerchantStatsTotalAmountServiceServer) FindYearlyTotalAmountByApikey(context.Context, *merchant.FindYearMerchantByApikey) (*ApiResponseMerchantYearlyTotalAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyTotalAmountByApikey not implemented")
}
func (UnimplementedMerchantStatsTotalAmountServiceServer) mustEmbedUnimplementedMerchantStatsTotalAmountServiceServer() {
}
func (UnimplementedMerchantStatsTotalAmountServiceServer) testEmbeddedByValue() {}

// UnsafeMerchantStatsTotalAmountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantStatsTotalAmountServiceServer will
// result in compilation errors.
type UnsafeMerchantStatsTotalAmountServiceServer interface {
	mustEmbedUnimplementedMerchantStatsTotalAmountServiceServer()
}

func RegisterMerchantStatsTotalAmountServiceServer(s grpc.ServiceRegistrar, srv MerchantStatsTotalAmountServiceServer) {
	// If the following call pancis, it indicates UnimplementedMerchantStatsTotalAmountServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MerchantStatsTotalAmountService_ServiceDesc, srv)
}

func _MerchantStatsTotalAmountService_FindMonthlyTotalAmountMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(merchant.FindYearMerchant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantStatsTotalAmountServiceServer).FindMonthlyTotalAmountMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantStatsTotalAmountService_FindMonthlyTotalAmountMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantStatsTotalAmountServiceServer).FindMonthlyTotalAmountMerchant(ctx, req.(*merchant.FindYearMerchant))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantStatsTotalAmountService_FindYearlyTotalAmountMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(merchant.FindYearMerchant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantStatsTotalAmountServiceServer).FindYearlyTotalAmountMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantStatsTotalAmountService_FindYearlyTotalAmountMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantStatsTotalAmountServiceServer).FindYearlyTotalAmountMerchant(ctx, req.(*merchant.FindYearMerchant))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantStatsTotalAmountService_FindMonthlyTotalAmountByMerchants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(merchant.FindYearMerchantById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantStatsTotalAmountServiceServer).FindMonthlyTotalAmountByMerchants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantStatsTotalAmountService_FindMonthlyTotalAmountByMerchants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantStatsTotalAmountServiceServer).FindMonthlyTotalAmountByMerchants(ctx, req.(*merchant.FindYearMerchantById))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantStatsTotalAmountService_FindYearlyTotalAmountByMerchants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(merchant.FindYearMerchantById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantStatsTotalAmountServiceServer).FindYearlyTotalAmountByMerchants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantStatsTotalAmountService_FindYearlyTotalAmountByMerchants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantStatsTotalAmountServiceServer).FindYearlyTotalAmountByMerchants(ctx, req.(*merchant.FindYearMerchantById))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantStatsTotalAmountService_FindMonthlyTotalAmountByApikey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(merchant.FindYearMerchantByApikey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantStatsTotalAmountServiceServer).FindMonthlyTotalAmountByApikey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantStatsTotalAmountService_FindMonthlyTotalAmountByApikey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantStatsTotalAmountServiceServer).FindMonthlyTotalAmountByApikey(ctx, req.(*merchant.FindYearMerchantByApikey))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantStatsTotalAmountService_FindYearlyTotalAmountByApikey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(merchant.FindYearMerchantByApikey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantStatsTotalAmountServiceServer).FindYearlyTotalAmountByApikey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantStatsTotalAmountService_FindYearlyTotalAmountByApikey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantStatsTotalAmountServiceServer).FindYearlyTotalAmountByApikey(ctx, req.(*merchant.FindYearMerchantByApikey))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantStatsTotalAmountService_ServiceDesc is the grpc.ServiceDesc for MerchantStatsTotalAmountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantStatsTotalAmountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.merchant.stats.MerchantStatsTotalAmountService",
	HandlerType: (*MerchantStatsTotalAmountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMonthlyTotalAmountMerchant",
			Handler:    _MerchantStatsTotalAmountService_FindMonthlyTotalAmountMerchant_Handler,
		},
		{
			MethodName: "FindYearlyTotalAmountMerchant",
			Handler:    _MerchantStatsTotalAmountService_FindYearlyTotalAmountMerchant_Handler,
		},
		{
			MethodName: "FindMonthlyTotalAmountByMerchants",
			Handler:    _MerchantStatsTotalAmountService_FindMonthlyTotalAmountByMerchants_Handler,
		},
		{
			MethodName: "FindYearlyTotalAmountByMerchants",
			Handler:    _MerchantStatsTotalAmountService_FindYearlyTotalAmountByMerchants_Handler,
		},
		{
			MethodName: "FindMonthlyTotalAmountByApikey",
			Handler:    _MerchantStatsTotalAmountService_FindMonthlyTotalAmountByApikey_Handler,
		},
		{
			MethodName: "FindYearlyTotalAmountByApikey",
			Handler:    _MerchantStatsTotalAmountService_FindYearlyTotalAmountByApikey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant/stats/merchant_stats_totalamount.proto",
}
