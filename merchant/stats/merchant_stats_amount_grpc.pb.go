// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: merchant/stats/merchant_stats_amount.proto

package stats

import (
	context "context"
	merchant "github.com/MamangRust/monolith-graphql-payment-gateway-pb/merchant"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MerchantStatsAmountService_FindMonthlyAmountMerchant_FullMethodName    = "/pb.merchant.stats.MerchantStatsAmountService/FindMonthlyAmountMerchant"
	MerchantStatsAmountService_FindYearlyAmountMerchant_FullMethodName     = "/pb.merchant.stats.MerchantStatsAmountService/FindYearlyAmountMerchant"
	MerchantStatsAmountService_FindMonthlyAmountByMerchants_FullMethodName = "/pb.merchant.stats.MerchantStatsAmountService/FindMonthlyAmountByMerchants"
	MerchantStatsAmountService_FindYearlyAmountByMerchants_FullMethodName  = "/pb.merchant.stats.MerchantStatsAmountService/FindYearlyAmountByMerchants"
	MerchantStatsAmountService_FindMonthlyAmountByApikey_FullMethodName    = "/pb.merchant.stats.MerchantStatsAmountService/FindMonthlyAmountByApikey"
	MerchantStatsAmountService_FindYearlyAmountByApikey_FullMethodName     = "/pb.merchant.stats.MerchantStatsAmountService/FindYearlyAmountByApikey"
)

// MerchantStatsAmountServiceClient is the client API for MerchantStatsAmountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantStatsAmountServiceClient interface {
	FindMonthlyAmountMerchant(ctx context.Context, in *merchant.FindYearMerchant, opts ...grpc.CallOption) (*ApiResponseMerchantMonthlyAmount, error)
	FindYearlyAmountMerchant(ctx context.Context, in *merchant.FindYearMerchant, opts ...grpc.CallOption) (*ApiResponseMerchantYearlyAmount, error)
	FindMonthlyAmountByMerchants(ctx context.Context, in *merchant.FindYearMerchantById, opts ...grpc.CallOption) (*ApiResponseMerchantMonthlyAmount, error)
	FindYearlyAmountByMerchants(ctx context.Context, in *merchant.FindYearMerchantById, opts ...grpc.CallOption) (*ApiResponseMerchantYearlyAmount, error)
	FindMonthlyAmountByApikey(ctx context.Context, in *merchant.FindYearMerchantByApikey, opts ...grpc.CallOption) (*ApiResponseMerchantMonthlyAmount, error)
	FindYearlyAmountByApikey(ctx context.Context, in *merchant.FindYearMerchantByApikey, opts ...grpc.CallOption) (*ApiResponseMerchantYearlyAmount, error)
}

type merchantStatsAmountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantStatsAmountServiceClient(cc grpc.ClientConnInterface) MerchantStatsAmountServiceClient {
	return &merchantStatsAmountServiceClient{cc}
}

func (c *merchantStatsAmountServiceClient) FindMonthlyAmountMerchant(ctx context.Context, in *merchant.FindYearMerchant, opts ...grpc.CallOption) (*ApiResponseMerchantMonthlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantMonthlyAmount)
	err := c.cc.Invoke(ctx, MerchantStatsAmountService_FindMonthlyAmountMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantStatsAmountServiceClient) FindYearlyAmountMerchant(ctx context.Context, in *merchant.FindYearMerchant, opts ...grpc.CallOption) (*ApiResponseMerchantYearlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantYearlyAmount)
	err := c.cc.Invoke(ctx, MerchantStatsAmountService_FindYearlyAmountMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantStatsAmountServiceClient) FindMonthlyAmountByMerchants(ctx context.Context, in *merchant.FindYearMerchantById, opts ...grpc.CallOption) (*ApiResponseMerchantMonthlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantMonthlyAmount)
	err := c.cc.Invoke(ctx, MerchantStatsAmountService_FindMonthlyAmountByMerchants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantStatsAmountServiceClient) FindYearlyAmountByMerchants(ctx context.Context, in *merchant.FindYearMerchantById, opts ...grpc.CallOption) (*ApiResponseMerchantYearlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantYearlyAmount)
	err := c.cc.Invoke(ctx, MerchantStatsAmountService_FindYearlyAmountByMerchants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantStatsAmountServiceClient) FindMonthlyAmountByApikey(ctx context.Context, in *merchant.FindYearMerchantByApikey, opts ...grpc.CallOption) (*ApiResponseMerchantMonthlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantMonthlyAmount)
	err := c.cc.Invoke(ctx, MerchantStatsAmountService_FindMonthlyAmountByApikey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantStatsAmountServiceClient) FindYearlyAmountByApikey(ctx context.Context, in *merchant.FindYearMerchantByApikey, opts ...grpc.CallOption) (*ApiResponseMerchantYearlyAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantYearlyAmount)
	err := c.cc.Invoke(ctx, MerchantStatsAmountService_FindYearlyAmountByApikey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantStatsAmountServiceServer is the server API for MerchantStatsAmountService service.
// All implementations must embed UnimplementedMerchantStatsAmountServiceServer
// for forward compatibility.
type MerchantStatsAmountServiceServer interface {
	FindMonthlyAmountMerchant(context.Context, *merchant.FindYearMerchant) (*ApiResponseMerchantMonthlyAmount, error)
	FindYearlyAmountMerchant(context.Context, *merchant.FindYearMerchant) (*ApiResponseMerchantYearlyAmount, error)
	FindMonthlyAmountByMerchants(context.Context, *merchant.FindYearMerchantById) (*ApiResponseMerchantMonthlyAmount, error)
	FindYearlyAmountByMerchants(context.Context, *merchant.FindYearMerchantById) (*ApiResponseMerchantYearlyAmount, error)
	FindMonthlyAmountByApikey(context.Context, *merchant.FindYearMerchantByApikey) (*ApiResponseMerchantMonthlyAmount, error)
	FindYearlyAmountByApikey(context.Context, *merchant.FindYearMerchantByApikey) (*ApiResponseMerchantYearlyAmount, error)
	mustEmbedUnimplementedMerchantStatsAmountServiceServer()
}

// UnimplementedMerchantStatsAmountServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMerchantStatsAmountServiceServer struct{}

func (UnimplementedMerchantStatsAmountServiceServer) FindMonthlyAmountMerchant(context.Context, *merchant.FindYearMerchant) (*ApiResponseMerchantMonthlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyAmountMerchant not implemented")
}
func (UnimplementedMerchantStatsAmountServiceServer) FindYearlyAmountMerchant(context.Context, *merchant.FindYearMerchant) (*ApiResponseMerchantYearlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyAmountMerchant not implemented")
}
func (UnimplementedMerchantStatsAmountServiceServer) FindMonthlyAmountByMerchants(context.Context, *merchant.FindYearMerchantById) (*ApiResponseMerchantMonthlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyAmountByMerchants not implemented")
}
func (UnimplementedMerchantStatsAmountServiceServer) FindYearlyAmountByMerchants(context.Context, *merchant.FindYearMerchantById) (*ApiResponseMerchantYearlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyAmountByMerchants not implemented")
}
func (UnimplementedMerchantStatsAmountServiceServer) FindMonthlyAmountByApikey(context.Context, *merchant.FindYearMerchantByApikey) (*ApiResponseMerchantMonthlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyAmountByApikey not implemented")
}
func (UnimplementedMerchantStatsAmountServiceServer) FindYearlyAmountByApikey(context.Context, *merchant.FindYearMerchantByApikey) (*ApiResponseMerchantYearlyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyAmountByApikey not implemented")
}
func (UnimplementedMerchantStatsAmountServiceServer) mustEmbedUnimplementedMerchantStatsAmountServiceServer() {
}
func (UnimplementedMerchantStatsAmountServiceServer) testEmbeddedByValue() {}

// UnsafeMerchantStatsAmountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantStatsAmountServiceServer will
// result in compilation errors.
type UnsafeMerchantStatsAmountServiceServer interface {
	mustEmbedUnimplementedMerchantStatsAmountServiceServer()
}

func RegisterMerchantStatsAmountServiceServer(s grpc.ServiceRegistrar, srv MerchantStatsAmountServiceServer) {
	// If the following call pancis, it indicates UnimplementedMerchantStatsAmountServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MerchantStatsAmountService_ServiceDesc, srv)
}

func _MerchantStatsAmountService_FindMonthlyAmountMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(merchant.FindYearMerchant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantStatsAmountServiceServer).FindMonthlyAmountMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantStatsAmountService_FindMonthlyAmountMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantStatsAmountServiceServer).FindMonthlyAmountMerchant(ctx, req.(*merchant.FindYearMerchant))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantStatsAmountService_FindYearlyAmountMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(merchant.FindYearMerchant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantStatsAmountServiceServer).FindYearlyAmountMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantStatsAmountService_FindYearlyAmountMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantStatsAmountServiceServer).FindYearlyAmountMerchant(ctx, req.(*merchant.FindYearMerchant))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantStatsAmountService_FindMonthlyAmountByMerchants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(merchant.FindYearMerchantById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantStatsAmountServiceServer).FindMonthlyAmountByMerchants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantStatsAmountService_FindMonthlyAmountByMerchants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantStatsAmountServiceServer).FindMonthlyAmountByMerchants(ctx, req.(*merchant.FindYearMerchantById))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantStatsAmountService_FindYearlyAmountByMerchants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(merchant.FindYearMerchantById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantStatsAmountServiceServer).FindYearlyAmountByMerchants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantStatsAmountService_FindYearlyAmountByMerchants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantStatsAmountServiceServer).FindYearlyAmountByMerchants(ctx, req.(*merchant.FindYearMerchantById))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantStatsAmountService_FindMonthlyAmountByApikey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(merchant.FindYearMerchantByApikey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantStatsAmountServiceServer).FindMonthlyAmountByApikey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantStatsAmountService_FindMonthlyAmountByApikey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantStatsAmountServiceServer).FindMonthlyAmountByApikey(ctx, req.(*merchant.FindYearMerchantByApikey))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantStatsAmountService_FindYearlyAmountByApikey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(merchant.FindYearMerchantByApikey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantStatsAmountServiceServer).FindYearlyAmountByApikey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantStatsAmountService_FindYearlyAmountByApikey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantStatsAmountServiceServer).FindYearlyAmountByApikey(ctx, req.(*merchant.FindYearMerchantByApikey))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantStatsAmountService_ServiceDesc is the grpc.ServiceDesc for MerchantStatsAmountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantStatsAmountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.merchant.stats.MerchantStatsAmountService",
	HandlerType: (*MerchantStatsAmountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMonthlyAmountMerchant",
			Handler:    _MerchantStatsAmountService_FindMonthlyAmountMerchant_Handler,
		},
		{
			MethodName: "FindYearlyAmountMerchant",
			Handler:    _MerchantStatsAmountService_FindYearlyAmountMerchant_Handler,
		},
		{
			MethodName: "FindMonthlyAmountByMerchants",
			Handler:    _MerchantStatsAmountService_FindMonthlyAmountByMerchants_Handler,
		},
		{
			MethodName: "FindYearlyAmountByMerchants",
			Handler:    _MerchantStatsAmountService_FindYearlyAmountByMerchants_Handler,
		},
		{
			MethodName: "FindMonthlyAmountByApikey",
			Handler:    _MerchantStatsAmountService_FindMonthlyAmountByApikey_Handler,
		},
		{
			MethodName: "FindYearlyAmountByApikey",
			Handler:    _MerchantStatsAmountService_FindYearlyAmountByApikey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant/stats/merchant_stats_amount.proto",
}
