// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: merchant/stats/merchant_stats_method.proto

package stats

import (
	context "context"
	merchant "github.com/MamangRust/monolith-graphql-payment-gateway-pb/merchant"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MerchantStatsMethodService_FindMonthlyPaymentMethodsMerchant_FullMethodName   = "/pb.merchant.stats.MerchantStatsMethodService/FindMonthlyPaymentMethodsMerchant"
	MerchantStatsMethodService_FindYearlyPaymentMethodMerchant_FullMethodName     = "/pb.merchant.stats.MerchantStatsMethodService/FindYearlyPaymentMethodMerchant"
	MerchantStatsMethodService_FindMonthlyPaymentMethodByMerchants_FullMethodName = "/pb.merchant.stats.MerchantStatsMethodService/FindMonthlyPaymentMethodByMerchants"
	MerchantStatsMethodService_FindYearlyPaymentMethodByMerchants_FullMethodName  = "/pb.merchant.stats.MerchantStatsMethodService/FindYearlyPaymentMethodByMerchants"
	MerchantStatsMethodService_FindMonthlyPaymentMethodByApikey_FullMethodName    = "/pb.merchant.stats.MerchantStatsMethodService/FindMonthlyPaymentMethodByApikey"
	MerchantStatsMethodService_FindYearlyPaymentMethodByApikey_FullMethodName     = "/pb.merchant.stats.MerchantStatsMethodService/FindYearlyPaymentMethodByApikey"
)

// MerchantStatsMethodServiceClient is the client API for MerchantStatsMethodService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantStatsMethodServiceClient interface {
	FindMonthlyPaymentMethodsMerchant(ctx context.Context, in *merchant.FindYearMerchant, opts ...grpc.CallOption) (*ApiResponseMerchantMonthlyPaymentMethod, error)
	FindYearlyPaymentMethodMerchant(ctx context.Context, in *merchant.FindYearMerchant, opts ...grpc.CallOption) (*ApiResponseMerchantYearlyPaymentMethod, error)
	FindMonthlyPaymentMethodByMerchants(ctx context.Context, in *merchant.FindYearMerchantById, opts ...grpc.CallOption) (*ApiResponseMerchantMonthlyPaymentMethod, error)
	FindYearlyPaymentMethodByMerchants(ctx context.Context, in *merchant.FindYearMerchantById, opts ...grpc.CallOption) (*ApiResponseMerchantYearlyPaymentMethod, error)
	FindMonthlyPaymentMethodByApikey(ctx context.Context, in *merchant.FindYearMerchantByApikey, opts ...grpc.CallOption) (*ApiResponseMerchantMonthlyPaymentMethod, error)
	FindYearlyPaymentMethodByApikey(ctx context.Context, in *merchant.FindYearMerchantByApikey, opts ...grpc.CallOption) (*ApiResponseMerchantYearlyPaymentMethod, error)
}

type merchantStatsMethodServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantStatsMethodServiceClient(cc grpc.ClientConnInterface) MerchantStatsMethodServiceClient {
	return &merchantStatsMethodServiceClient{cc}
}

func (c *merchantStatsMethodServiceClient) FindMonthlyPaymentMethodsMerchant(ctx context.Context, in *merchant.FindYearMerchant, opts ...grpc.CallOption) (*ApiResponseMerchantMonthlyPaymentMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantMonthlyPaymentMethod)
	err := c.cc.Invoke(ctx, MerchantStatsMethodService_FindMonthlyPaymentMethodsMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantStatsMethodServiceClient) FindYearlyPaymentMethodMerchant(ctx context.Context, in *merchant.FindYearMerchant, opts ...grpc.CallOption) (*ApiResponseMerchantYearlyPaymentMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantYearlyPaymentMethod)
	err := c.cc.Invoke(ctx, MerchantStatsMethodService_FindYearlyPaymentMethodMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantStatsMethodServiceClient) FindMonthlyPaymentMethodByMerchants(ctx context.Context, in *merchant.FindYearMerchantById, opts ...grpc.CallOption) (*ApiResponseMerchantMonthlyPaymentMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantMonthlyPaymentMethod)
	err := c.cc.Invoke(ctx, MerchantStatsMethodService_FindMonthlyPaymentMethodByMerchants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantStatsMethodServiceClient) FindYearlyPaymentMethodByMerchants(ctx context.Context, in *merchant.FindYearMerchantById, opts ...grpc.CallOption) (*ApiResponseMerchantYearlyPaymentMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantYearlyPaymentMethod)
	err := c.cc.Invoke(ctx, MerchantStatsMethodService_FindYearlyPaymentMethodByMerchants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantStatsMethodServiceClient) FindMonthlyPaymentMethodByApikey(ctx context.Context, in *merchant.FindYearMerchantByApikey, opts ...grpc.CallOption) (*ApiResponseMerchantMonthlyPaymentMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantMonthlyPaymentMethod)
	err := c.cc.Invoke(ctx, MerchantStatsMethodService_FindMonthlyPaymentMethodByApikey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantStatsMethodServiceClient) FindYearlyPaymentMethodByApikey(ctx context.Context, in *merchant.FindYearMerchantByApikey, opts ...grpc.CallOption) (*ApiResponseMerchantYearlyPaymentMethod, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantYearlyPaymentMethod)
	err := c.cc.Invoke(ctx, MerchantStatsMethodService_FindYearlyPaymentMethodByApikey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantStatsMethodServiceServer is the server API for MerchantStatsMethodService service.
// All implementations must embed UnimplementedMerchantStatsMethodServiceServer
// for forward compatibility.
type MerchantStatsMethodServiceServer interface {
	FindMonthlyPaymentMethodsMerchant(context.Context, *merchant.FindYearMerchant) (*ApiResponseMerchantMonthlyPaymentMethod, error)
	FindYearlyPaymentMethodMerchant(context.Context, *merchant.FindYearMerchant) (*ApiResponseMerchantYearlyPaymentMethod, error)
	FindMonthlyPaymentMethodByMerchants(context.Context, *merchant.FindYearMerchantById) (*ApiResponseMerchantMonthlyPaymentMethod, error)
	FindYearlyPaymentMethodByMerchants(context.Context, *merchant.FindYearMerchantById) (*ApiResponseMerchantYearlyPaymentMethod, error)
	FindMonthlyPaymentMethodByApikey(context.Context, *merchant.FindYearMerchantByApikey) (*ApiResponseMerchantMonthlyPaymentMethod, error)
	FindYearlyPaymentMethodByApikey(context.Context, *merchant.FindYearMerchantByApikey) (*ApiResponseMerchantYearlyPaymentMethod, error)
	mustEmbedUnimplementedMerchantStatsMethodServiceServer()
}

// UnimplementedMerchantStatsMethodServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMerchantStatsMethodServiceServer struct{}

func (UnimplementedMerchantStatsMethodServiceServer) FindMonthlyPaymentMethodsMerchant(context.Context, *merchant.FindYearMerchant) (*ApiResponseMerchantMonthlyPaymentMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyPaymentMethodsMerchant not implemented")
}
func (UnimplementedMerchantStatsMethodServiceServer) FindYearlyPaymentMethodMerchant(context.Context, *merchant.FindYearMerchant) (*ApiResponseMerchantYearlyPaymentMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyPaymentMethodMerchant not implemented")
}
func (UnimplementedMerchantStatsMethodServiceServer) FindMonthlyPaymentMethodByMerchants(context.Context, *merchant.FindYearMerchantById) (*ApiResponseMerchantMonthlyPaymentMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyPaymentMethodByMerchants not implemented")
}
func (UnimplementedMerchantStatsMethodServiceServer) FindYearlyPaymentMethodByMerchants(context.Context, *merchant.FindYearMerchantById) (*ApiResponseMerchantYearlyPaymentMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyPaymentMethodByMerchants not implemented")
}
func (UnimplementedMerchantStatsMethodServiceServer) FindMonthlyPaymentMethodByApikey(context.Context, *merchant.FindYearMerchantByApikey) (*ApiResponseMerchantMonthlyPaymentMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyPaymentMethodByApikey not implemented")
}
func (UnimplementedMerchantStatsMethodServiceServer) FindYearlyPaymentMethodByApikey(context.Context, *merchant.FindYearMerchantByApikey) (*ApiResponseMerchantYearlyPaymentMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyPaymentMethodByApikey not implemented")
}
func (UnimplementedMerchantStatsMethodServiceServer) mustEmbedUnimplementedMerchantStatsMethodServiceServer() {
}
func (UnimplementedMerchantStatsMethodServiceServer) testEmbeddedByValue() {}

// UnsafeMerchantStatsMethodServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantStatsMethodServiceServer will
// result in compilation errors.
type UnsafeMerchantStatsMethodServiceServer interface {
	mustEmbedUnimplementedMerchantStatsMethodServiceServer()
}

func RegisterMerchantStatsMethodServiceServer(s grpc.ServiceRegistrar, srv MerchantStatsMethodServiceServer) {
	// If the following call pancis, it indicates UnimplementedMerchantStatsMethodServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MerchantStatsMethodService_ServiceDesc, srv)
}

func _MerchantStatsMethodService_FindMonthlyPaymentMethodsMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(merchant.FindYearMerchant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantStatsMethodServiceServer).FindMonthlyPaymentMethodsMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantStatsMethodService_FindMonthlyPaymentMethodsMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantStatsMethodServiceServer).FindMonthlyPaymentMethodsMerchant(ctx, req.(*merchant.FindYearMerchant))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantStatsMethodService_FindYearlyPaymentMethodMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(merchant.FindYearMerchant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantStatsMethodServiceServer).FindYearlyPaymentMethodMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantStatsMethodService_FindYearlyPaymentMethodMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantStatsMethodServiceServer).FindYearlyPaymentMethodMerchant(ctx, req.(*merchant.FindYearMerchant))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantStatsMethodService_FindMonthlyPaymentMethodByMerchants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(merchant.FindYearMerchantById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantStatsMethodServiceServer).FindMonthlyPaymentMethodByMerchants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantStatsMethodService_FindMonthlyPaymentMethodByMerchants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantStatsMethodServiceServer).FindMonthlyPaymentMethodByMerchants(ctx, req.(*merchant.FindYearMerchantById))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantStatsMethodService_FindYearlyPaymentMethodByMerchants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(merchant.FindYearMerchantById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantStatsMethodServiceServer).FindYearlyPaymentMethodByMerchants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantStatsMethodService_FindYearlyPaymentMethodByMerchants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantStatsMethodServiceServer).FindYearlyPaymentMethodByMerchants(ctx, req.(*merchant.FindYearMerchantById))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantStatsMethodService_FindMonthlyPaymentMethodByApikey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(merchant.FindYearMerchantByApikey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantStatsMethodServiceServer).FindMonthlyPaymentMethodByApikey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantStatsMethodService_FindMonthlyPaymentMethodByApikey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantStatsMethodServiceServer).FindMonthlyPaymentMethodByApikey(ctx, req.(*merchant.FindYearMerchantByApikey))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantStatsMethodService_FindYearlyPaymentMethodByApikey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(merchant.FindYearMerchantByApikey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantStatsMethodServiceServer).FindYearlyPaymentMethodByApikey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantStatsMethodService_FindYearlyPaymentMethodByApikey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantStatsMethodServiceServer).FindYearlyPaymentMethodByApikey(ctx, req.(*merchant.FindYearMerchantByApikey))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantStatsMethodService_ServiceDesc is the grpc.ServiceDesc for MerchantStatsMethodService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantStatsMethodService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.merchant.stats.MerchantStatsMethodService",
	HandlerType: (*MerchantStatsMethodServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMonthlyPaymentMethodsMerchant",
			Handler:    _MerchantStatsMethodService_FindMonthlyPaymentMethodsMerchant_Handler,
		},
		{
			MethodName: "FindYearlyPaymentMethodMerchant",
			Handler:    _MerchantStatsMethodService_FindYearlyPaymentMethodMerchant_Handler,
		},
		{
			MethodName: "FindMonthlyPaymentMethodByMerchants",
			Handler:    _MerchantStatsMethodService_FindMonthlyPaymentMethodByMerchants_Handler,
		},
		{
			MethodName: "FindYearlyPaymentMethodByMerchants",
			Handler:    _MerchantStatsMethodService_FindYearlyPaymentMethodByMerchants_Handler,
		},
		{
			MethodName: "FindMonthlyPaymentMethodByApikey",
			Handler:    _MerchantStatsMethodService_FindMonthlyPaymentMethodByApikey_Handler,
		},
		{
			MethodName: "FindYearlyPaymentMethodByApikey",
			Handler:    _MerchantStatsMethodService_FindYearlyPaymentMethodByApikey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant/stats/merchant_stats_method.proto",
}
