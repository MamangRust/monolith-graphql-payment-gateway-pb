// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: merchant/merchant_query.proto

package merchant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MerchantQueryService_FindAllMerchant_FullMethodName      = "/pb.merchant.MerchantQueryService/FindAllMerchant"
	MerchantQueryService_FindByIdMerchant_FullMethodName     = "/pb.merchant.MerchantQueryService/FindByIdMerchant"
	MerchantQueryService_FindByApiKey_FullMethodName         = "/pb.merchant.MerchantQueryService/FindByApiKey"
	MerchantQueryService_FindByMerchantUserId_FullMethodName = "/pb.merchant.MerchantQueryService/FindByMerchantUserId"
	MerchantQueryService_FindByActive_FullMethodName         = "/pb.merchant.MerchantQueryService/FindByActive"
	MerchantQueryService_FindByTrashed_FullMethodName        = "/pb.merchant.MerchantQueryService/FindByTrashed"
)

// MerchantQueryServiceClient is the client API for MerchantQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantQueryServiceClient interface {
	FindAllMerchant(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchant, error)
	FindByIdMerchant(ctx context.Context, in *FindByIdMerchantRequest, opts ...grpc.CallOption) (*ApiResponseMerchant, error)
	FindByApiKey(ctx context.Context, in *FindByApiKeyRequest, opts ...grpc.CallOption) (*ApiResponseMerchant, error)
	FindByMerchantUserId(ctx context.Context, in *FindByMerchantUserIdRequest, opts ...grpc.CallOption) (*ApiResponsesMerchant, error)
	FindByActive(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDeleteAt, error)
	FindByTrashed(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDeleteAt, error)
}

type merchantQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantQueryServiceClient(cc grpc.ClientConnInterface) MerchantQueryServiceClient {
	return &merchantQueryServiceClient{cc}
}

func (c *merchantQueryServiceClient) FindAllMerchant(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchant)
	err := c.cc.Invoke(ctx, MerchantQueryService_FindAllMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantQueryServiceClient) FindByIdMerchant(ctx context.Context, in *FindByIdMerchantRequest, opts ...grpc.CallOption) (*ApiResponseMerchant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchant)
	err := c.cc.Invoke(ctx, MerchantQueryService_FindByIdMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantQueryServiceClient) FindByApiKey(ctx context.Context, in *FindByApiKeyRequest, opts ...grpc.CallOption) (*ApiResponseMerchant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchant)
	err := c.cc.Invoke(ctx, MerchantQueryService_FindByApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantQueryServiceClient) FindByMerchantUserId(ctx context.Context, in *FindByMerchantUserIdRequest, opts ...grpc.CallOption) (*ApiResponsesMerchant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsesMerchant)
	err := c.cc.Invoke(ctx, MerchantQueryService_FindByMerchantUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantQueryServiceClient) FindByActive(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantDeleteAt)
	err := c.cc.Invoke(ctx, MerchantQueryService_FindByActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantQueryServiceClient) FindByTrashed(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantDeleteAt)
	err := c.cc.Invoke(ctx, MerchantQueryService_FindByTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantQueryServiceServer is the server API for MerchantQueryService service.
// All implementations must embed UnimplementedMerchantQueryServiceServer
// for forward compatibility.
type MerchantQueryServiceServer interface {
	FindAllMerchant(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchant, error)
	FindByIdMerchant(context.Context, *FindByIdMerchantRequest) (*ApiResponseMerchant, error)
	FindByApiKey(context.Context, *FindByApiKeyRequest) (*ApiResponseMerchant, error)
	FindByMerchantUserId(context.Context, *FindByMerchantUserIdRequest) (*ApiResponsesMerchant, error)
	FindByActive(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantDeleteAt, error)
	FindByTrashed(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantDeleteAt, error)
	mustEmbedUnimplementedMerchantQueryServiceServer()
}

// UnimplementedMerchantQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMerchantQueryServiceServer struct{}

func (UnimplementedMerchantQueryServiceServer) FindAllMerchant(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllMerchant not implemented")
}
func (UnimplementedMerchantQueryServiceServer) FindByIdMerchant(context.Context, *FindByIdMerchantRequest) (*ApiResponseMerchant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByIdMerchant not implemented")
}
func (UnimplementedMerchantQueryServiceServer) FindByApiKey(context.Context, *FindByApiKeyRequest) (*ApiResponseMerchant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByApiKey not implemented")
}
func (UnimplementedMerchantQueryServiceServer) FindByMerchantUserId(context.Context, *FindByMerchantUserIdRequest) (*ApiResponsesMerchant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByMerchantUserId not implemented")
}
func (UnimplementedMerchantQueryServiceServer) FindByActive(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActive not implemented")
}
func (UnimplementedMerchantQueryServiceServer) FindByTrashed(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashed not implemented")
}
func (UnimplementedMerchantQueryServiceServer) mustEmbedUnimplementedMerchantQueryServiceServer() {}
func (UnimplementedMerchantQueryServiceServer) testEmbeddedByValue()                              {}

// UnsafeMerchantQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantQueryServiceServer will
// result in compilation errors.
type UnsafeMerchantQueryServiceServer interface {
	mustEmbedUnimplementedMerchantQueryServiceServer()
}

func RegisterMerchantQueryServiceServer(s grpc.ServiceRegistrar, srv MerchantQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedMerchantQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MerchantQueryService_ServiceDesc, srv)
}

func _MerchantQueryService_FindAllMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantQueryServiceServer).FindAllMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantQueryService_FindAllMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantQueryServiceServer).FindAllMerchant(ctx, req.(*FindAllMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantQueryService_FindByIdMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantQueryServiceServer).FindByIdMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantQueryService_FindByIdMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantQueryServiceServer).FindByIdMerchant(ctx, req.(*FindByIdMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantQueryService_FindByApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantQueryServiceServer).FindByApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantQueryService_FindByApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantQueryServiceServer).FindByApiKey(ctx, req.(*FindByApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantQueryService_FindByMerchantUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByMerchantUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantQueryServiceServer).FindByMerchantUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantQueryService_FindByMerchantUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantQueryServiceServer).FindByMerchantUserId(ctx, req.(*FindByMerchantUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantQueryService_FindByActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantQueryServiceServer).FindByActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantQueryService_FindByActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantQueryServiceServer).FindByActive(ctx, req.(*FindAllMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantQueryService_FindByTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantQueryServiceServer).FindByTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantQueryService_FindByTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantQueryServiceServer).FindByTrashed(ctx, req.(*FindAllMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantQueryService_ServiceDesc is the grpc.ServiceDesc for MerchantQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.merchant.MerchantQueryService",
	HandlerType: (*MerchantQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAllMerchant",
			Handler:    _MerchantQueryService_FindAllMerchant_Handler,
		},
		{
			MethodName: "FindByIdMerchant",
			Handler:    _MerchantQueryService_FindByIdMerchant_Handler,
		},
		{
			MethodName: "FindByApiKey",
			Handler:    _MerchantQueryService_FindByApiKey_Handler,
		},
		{
			MethodName: "FindByMerchantUserId",
			Handler:    _MerchantQueryService_FindByMerchantUserId_Handler,
		},
		{
			MethodName: "FindByActive",
			Handler:    _MerchantQueryService_FindByActive_Handler,
		},
		{
			MethodName: "FindByTrashed",
			Handler:    _MerchantQueryService_FindByTrashed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant/merchant_query.proto",
}
