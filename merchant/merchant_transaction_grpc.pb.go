// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: merchant/merchant_transaction.proto

package merchant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MerchantTransactionService_FindAllTransactionMerchant_FullMethodName   = "/pb.merchant.MerchantTransactionService/FindAllTransactionMerchant"
	MerchantTransactionService_FindAllTransactionByApikey_FullMethodName   = "/pb.merchant.MerchantTransactionService/FindAllTransactionByApikey"
	MerchantTransactionService_FindAllTransactionByMerchant_FullMethodName = "/pb.merchant.MerchantTransactionService/FindAllTransactionByMerchant"
)

// MerchantTransactionServiceClient is the client API for MerchantTransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantTransactionServiceClient interface {
	FindAllTransactionMerchant(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantTransaction, error)
	FindAllTransactionByApikey(ctx context.Context, in *FindAllMerchantApikey, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantTransaction, error)
	FindAllTransactionByMerchant(ctx context.Context, in *FindAllMerchantTransaction, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantTransaction, error)
}

type merchantTransactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantTransactionServiceClient(cc grpc.ClientConnInterface) MerchantTransactionServiceClient {
	return &merchantTransactionServiceClient{cc}
}

func (c *merchantTransactionServiceClient) FindAllTransactionMerchant(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantTransaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantTransaction)
	err := c.cc.Invoke(ctx, MerchantTransactionService_FindAllTransactionMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantTransactionServiceClient) FindAllTransactionByApikey(ctx context.Context, in *FindAllMerchantApikey, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantTransaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantTransaction)
	err := c.cc.Invoke(ctx, MerchantTransactionService_FindAllTransactionByApikey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantTransactionServiceClient) FindAllTransactionByMerchant(ctx context.Context, in *FindAllMerchantTransaction, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantTransaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantTransaction)
	err := c.cc.Invoke(ctx, MerchantTransactionService_FindAllTransactionByMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantTransactionServiceServer is the server API for MerchantTransactionService service.
// All implementations must embed UnimplementedMerchantTransactionServiceServer
// for forward compatibility.
type MerchantTransactionServiceServer interface {
	FindAllTransactionMerchant(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantTransaction, error)
	FindAllTransactionByApikey(context.Context, *FindAllMerchantApikey) (*ApiResponsePaginationMerchantTransaction, error)
	FindAllTransactionByMerchant(context.Context, *FindAllMerchantTransaction) (*ApiResponsePaginationMerchantTransaction, error)
	mustEmbedUnimplementedMerchantTransactionServiceServer()
}

// UnimplementedMerchantTransactionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMerchantTransactionServiceServer struct{}

func (UnimplementedMerchantTransactionServiceServer) FindAllTransactionMerchant(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTransactionMerchant not implemented")
}
func (UnimplementedMerchantTransactionServiceServer) FindAllTransactionByApikey(context.Context, *FindAllMerchantApikey) (*ApiResponsePaginationMerchantTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTransactionByApikey not implemented")
}
func (UnimplementedMerchantTransactionServiceServer) FindAllTransactionByMerchant(context.Context, *FindAllMerchantTransaction) (*ApiResponsePaginationMerchantTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTransactionByMerchant not implemented")
}
func (UnimplementedMerchantTransactionServiceServer) mustEmbedUnimplementedMerchantTransactionServiceServer() {
}
func (UnimplementedMerchantTransactionServiceServer) testEmbeddedByValue() {}

// UnsafeMerchantTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantTransactionServiceServer will
// result in compilation errors.
type UnsafeMerchantTransactionServiceServer interface {
	mustEmbedUnimplementedMerchantTransactionServiceServer()
}

func RegisterMerchantTransactionServiceServer(s grpc.ServiceRegistrar, srv MerchantTransactionServiceServer) {
	// If the following call pancis, it indicates UnimplementedMerchantTransactionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MerchantTransactionService_ServiceDesc, srv)
}

func _MerchantTransactionService_FindAllTransactionMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantTransactionServiceServer).FindAllTransactionMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantTransactionService_FindAllTransactionMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantTransactionServiceServer).FindAllTransactionMerchant(ctx, req.(*FindAllMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantTransactionService_FindAllTransactionByApikey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantApikey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantTransactionServiceServer).FindAllTransactionByApikey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantTransactionService_FindAllTransactionByApikey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantTransactionServiceServer).FindAllTransactionByApikey(ctx, req.(*FindAllMerchantApikey))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantTransactionService_FindAllTransactionByMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantTransactionServiceServer).FindAllTransactionByMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantTransactionService_FindAllTransactionByMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantTransactionServiceServer).FindAllTransactionByMerchant(ctx, req.(*FindAllMerchantTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantTransactionService_ServiceDesc is the grpc.ServiceDesc for MerchantTransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantTransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.merchant.MerchantTransactionService",
	HandlerType: (*MerchantTransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAllTransactionMerchant",
			Handler:    _MerchantTransactionService_FindAllTransactionMerchant_Handler,
		},
		{
			MethodName: "FindAllTransactionByApikey",
			Handler:    _MerchantTransactionService_FindAllTransactionByApikey_Handler,
		},
		{
			MethodName: "FindAllTransactionByMerchant",
			Handler:    _MerchantTransactionService_FindAllTransactionByMerchant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant/merchant_transaction.proto",
}
