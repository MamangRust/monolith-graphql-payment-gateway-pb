// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: merchant/merchant_command.proto

package merchant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MerchantCommandService_CreateMerchant_FullMethodName             = "/pb.merchant.MerchantCommandService/CreateMerchant"
	MerchantCommandService_UpdateMerchant_FullMethodName             = "/pb.merchant.MerchantCommandService/UpdateMerchant"
	MerchantCommandService_UpdateMerchantStatus_FullMethodName       = "/pb.merchant.MerchantCommandService/UpdateMerchantStatus"
	MerchantCommandService_TrashedMerchant_FullMethodName            = "/pb.merchant.MerchantCommandService/TrashedMerchant"
	MerchantCommandService_RestoreMerchant_FullMethodName            = "/pb.merchant.MerchantCommandService/RestoreMerchant"
	MerchantCommandService_DeleteMerchantPermanent_FullMethodName    = "/pb.merchant.MerchantCommandService/DeleteMerchantPermanent"
	MerchantCommandService_RestoreAllMerchant_FullMethodName         = "/pb.merchant.MerchantCommandService/RestoreAllMerchant"
	MerchantCommandService_DeleteAllMerchantPermanent_FullMethodName = "/pb.merchant.MerchantCommandService/DeleteAllMerchantPermanent"
)

// MerchantCommandServiceClient is the client API for MerchantCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantCommandServiceClient interface {
	CreateMerchant(ctx context.Context, in *CreateMerchantRequest, opts ...grpc.CallOption) (*ApiResponseMerchant, error)
	UpdateMerchant(ctx context.Context, in *UpdateMerchantRequest, opts ...grpc.CallOption) (*ApiResponseMerchant, error)
	UpdateMerchantStatus(ctx context.Context, in *UpdateMerchantStatusRequest, opts ...grpc.CallOption) (*ApiResponseMerchant, error)
	TrashedMerchant(ctx context.Context, in *FindByIdMerchantRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDeleteAt, error)
	RestoreMerchant(ctx context.Context, in *FindByIdMerchantRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDeleteAt, error)
	DeleteMerchantPermanent(ctx context.Context, in *FindByIdMerchantRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDelete, error)
	RestoreAllMerchant(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantAll, error)
	DeleteAllMerchantPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantAll, error)
}

type merchantCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantCommandServiceClient(cc grpc.ClientConnInterface) MerchantCommandServiceClient {
	return &merchantCommandServiceClient{cc}
}

func (c *merchantCommandServiceClient) CreateMerchant(ctx context.Context, in *CreateMerchantRequest, opts ...grpc.CallOption) (*ApiResponseMerchant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchant)
	err := c.cc.Invoke(ctx, MerchantCommandService_CreateMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantCommandServiceClient) UpdateMerchant(ctx context.Context, in *UpdateMerchantRequest, opts ...grpc.CallOption) (*ApiResponseMerchant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchant)
	err := c.cc.Invoke(ctx, MerchantCommandService_UpdateMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantCommandServiceClient) UpdateMerchantStatus(ctx context.Context, in *UpdateMerchantStatusRequest, opts ...grpc.CallOption) (*ApiResponseMerchant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchant)
	err := c.cc.Invoke(ctx, MerchantCommandService_UpdateMerchantStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantCommandServiceClient) TrashedMerchant(ctx context.Context, in *FindByIdMerchantRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDeleteAt)
	err := c.cc.Invoke(ctx, MerchantCommandService_TrashedMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantCommandServiceClient) RestoreMerchant(ctx context.Context, in *FindByIdMerchantRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDeleteAt)
	err := c.cc.Invoke(ctx, MerchantCommandService_RestoreMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantCommandServiceClient) DeleteMerchantPermanent(ctx context.Context, in *FindByIdMerchantRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDelete)
	err := c.cc.Invoke(ctx, MerchantCommandService_DeleteMerchantPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantCommandServiceClient) RestoreAllMerchant(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantAll)
	err := c.cc.Invoke(ctx, MerchantCommandService_RestoreAllMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantCommandServiceClient) DeleteAllMerchantPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantAll)
	err := c.cc.Invoke(ctx, MerchantCommandService_DeleteAllMerchantPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantCommandServiceServer is the server API for MerchantCommandService service.
// All implementations must embed UnimplementedMerchantCommandServiceServer
// for forward compatibility.
type MerchantCommandServiceServer interface {
	CreateMerchant(context.Context, *CreateMerchantRequest) (*ApiResponseMerchant, error)
	UpdateMerchant(context.Context, *UpdateMerchantRequest) (*ApiResponseMerchant, error)
	UpdateMerchantStatus(context.Context, *UpdateMerchantStatusRequest) (*ApiResponseMerchant, error)
	TrashedMerchant(context.Context, *FindByIdMerchantRequest) (*ApiResponseMerchantDeleteAt, error)
	RestoreMerchant(context.Context, *FindByIdMerchantRequest) (*ApiResponseMerchantDeleteAt, error)
	DeleteMerchantPermanent(context.Context, *FindByIdMerchantRequest) (*ApiResponseMerchantDelete, error)
	RestoreAllMerchant(context.Context, *emptypb.Empty) (*ApiResponseMerchantAll, error)
	DeleteAllMerchantPermanent(context.Context, *emptypb.Empty) (*ApiResponseMerchantAll, error)
	mustEmbedUnimplementedMerchantCommandServiceServer()
}

// UnimplementedMerchantCommandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMerchantCommandServiceServer struct{}

func (UnimplementedMerchantCommandServiceServer) CreateMerchant(context.Context, *CreateMerchantRequest) (*ApiResponseMerchant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMerchant not implemented")
}
func (UnimplementedMerchantCommandServiceServer) UpdateMerchant(context.Context, *UpdateMerchantRequest) (*ApiResponseMerchant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMerchant not implemented")
}
func (UnimplementedMerchantCommandServiceServer) UpdateMerchantStatus(context.Context, *UpdateMerchantStatusRequest) (*ApiResponseMerchant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMerchantStatus not implemented")
}
func (UnimplementedMerchantCommandServiceServer) TrashedMerchant(context.Context, *FindByIdMerchantRequest) (*ApiResponseMerchantDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrashedMerchant not implemented")
}
func (UnimplementedMerchantCommandServiceServer) RestoreMerchant(context.Context, *FindByIdMerchantRequest) (*ApiResponseMerchantDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreMerchant not implemented")
}
func (UnimplementedMerchantCommandServiceServer) DeleteMerchantPermanent(context.Context, *FindByIdMerchantRequest) (*ApiResponseMerchantDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMerchantPermanent not implemented")
}
func (UnimplementedMerchantCommandServiceServer) RestoreAllMerchant(context.Context, *emptypb.Empty) (*ApiResponseMerchantAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllMerchant not implemented")
}
func (UnimplementedMerchantCommandServiceServer) DeleteAllMerchantPermanent(context.Context, *emptypb.Empty) (*ApiResponseMerchantAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllMerchantPermanent not implemented")
}
func (UnimplementedMerchantCommandServiceServer) mustEmbedUnimplementedMerchantCommandServiceServer() {
}
func (UnimplementedMerchantCommandServiceServer) testEmbeddedByValue() {}

// UnsafeMerchantCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantCommandServiceServer will
// result in compilation errors.
type UnsafeMerchantCommandServiceServer interface {
	mustEmbedUnimplementedMerchantCommandServiceServer()
}

func RegisterMerchantCommandServiceServer(s grpc.ServiceRegistrar, srv MerchantCommandServiceServer) {
	// If the following call pancis, it indicates UnimplementedMerchantCommandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MerchantCommandService_ServiceDesc, srv)
}

func _MerchantCommandService_CreateMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantCommandServiceServer).CreateMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantCommandService_CreateMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantCommandServiceServer).CreateMerchant(ctx, req.(*CreateMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantCommandService_UpdateMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantCommandServiceServer).UpdateMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantCommandService_UpdateMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantCommandServiceServer).UpdateMerchant(ctx, req.(*UpdateMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantCommandService_UpdateMerchantStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMerchantStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantCommandServiceServer).UpdateMerchantStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantCommandService_UpdateMerchantStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantCommandServiceServer).UpdateMerchantStatus(ctx, req.(*UpdateMerchantStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantCommandService_TrashedMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantCommandServiceServer).TrashedMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantCommandService_TrashedMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantCommandServiceServer).TrashedMerchant(ctx, req.(*FindByIdMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantCommandService_RestoreMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantCommandServiceServer).RestoreMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantCommandService_RestoreMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantCommandServiceServer).RestoreMerchant(ctx, req.(*FindByIdMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantCommandService_DeleteMerchantPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantCommandServiceServer).DeleteMerchantPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantCommandService_DeleteMerchantPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantCommandServiceServer).DeleteMerchantPermanent(ctx, req.(*FindByIdMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantCommandService_RestoreAllMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantCommandServiceServer).RestoreAllMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantCommandService_RestoreAllMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantCommandServiceServer).RestoreAllMerchant(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantCommandService_DeleteAllMerchantPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantCommandServiceServer).DeleteAllMerchantPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantCommandService_DeleteAllMerchantPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantCommandServiceServer).DeleteAllMerchantPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantCommandService_ServiceDesc is the grpc.ServiceDesc for MerchantCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.merchant.MerchantCommandService",
	HandlerType: (*MerchantCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMerchant",
			Handler:    _MerchantCommandService_CreateMerchant_Handler,
		},
		{
			MethodName: "UpdateMerchant",
			Handler:    _MerchantCommandService_UpdateMerchant_Handler,
		},
		{
			MethodName: "UpdateMerchantStatus",
			Handler:    _MerchantCommandService_UpdateMerchantStatus_Handler,
		},
		{
			MethodName: "TrashedMerchant",
			Handler:    _MerchantCommandService_TrashedMerchant_Handler,
		},
		{
			MethodName: "RestoreMerchant",
			Handler:    _MerchantCommandService_RestoreMerchant_Handler,
		},
		{
			MethodName: "DeleteMerchantPermanent",
			Handler:    _MerchantCommandService_DeleteMerchantPermanent_Handler,
		},
		{
			MethodName: "RestoreAllMerchant",
			Handler:    _MerchantCommandService_RestoreAllMerchant_Handler,
		},
		{
			MethodName: "DeleteAllMerchantPermanent",
			Handler:    _MerchantCommandService_DeleteAllMerchantPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant/merchant_command.proto",
}
