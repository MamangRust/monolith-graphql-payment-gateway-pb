// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: role/role_command.proto

package role

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RoleCommandService_CreateRole_FullMethodName             = "/pb.role.RoleCommandService/CreateRole"
	RoleCommandService_UpdateRole_FullMethodName             = "/pb.role.RoleCommandService/UpdateRole"
	RoleCommandService_TrashedRole_FullMethodName            = "/pb.role.RoleCommandService/TrashedRole"
	RoleCommandService_RestoreRole_FullMethodName            = "/pb.role.RoleCommandService/RestoreRole"
	RoleCommandService_DeleteRolePermanent_FullMethodName    = "/pb.role.RoleCommandService/DeleteRolePermanent"
	RoleCommandService_RestoreAllRole_FullMethodName         = "/pb.role.RoleCommandService/RestoreAllRole"
	RoleCommandService_DeleteAllRolePermanent_FullMethodName = "/pb.role.RoleCommandService/DeleteAllRolePermanent"
)

// RoleCommandServiceClient is the client API for RoleCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleCommandServiceClient interface {
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*ApiResponseRole, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*ApiResponseRole, error)
	TrashedRole(ctx context.Context, in *FindByIdRoleRequest, opts ...grpc.CallOption) (*ApiResponseRoleDeleteAt, error)
	RestoreRole(ctx context.Context, in *FindByIdRoleRequest, opts ...grpc.CallOption) (*ApiResponseRoleDeleteAt, error)
	DeleteRolePermanent(ctx context.Context, in *FindByIdRoleRequest, opts ...grpc.CallOption) (*ApiResponseRoleDelete, error)
	RestoreAllRole(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseRoleAll, error)
	DeleteAllRolePermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseRoleAll, error)
}

type roleCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleCommandServiceClient(cc grpc.ClientConnInterface) RoleCommandServiceClient {
	return &roleCommandServiceClient{cc}
}

func (c *roleCommandServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*ApiResponseRole, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseRole)
	err := c.cc.Invoke(ctx, RoleCommandService_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleCommandServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*ApiResponseRole, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseRole)
	err := c.cc.Invoke(ctx, RoleCommandService_UpdateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleCommandServiceClient) TrashedRole(ctx context.Context, in *FindByIdRoleRequest, opts ...grpc.CallOption) (*ApiResponseRoleDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseRoleDeleteAt)
	err := c.cc.Invoke(ctx, RoleCommandService_TrashedRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleCommandServiceClient) RestoreRole(ctx context.Context, in *FindByIdRoleRequest, opts ...grpc.CallOption) (*ApiResponseRoleDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseRoleDeleteAt)
	err := c.cc.Invoke(ctx, RoleCommandService_RestoreRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleCommandServiceClient) DeleteRolePermanent(ctx context.Context, in *FindByIdRoleRequest, opts ...grpc.CallOption) (*ApiResponseRoleDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseRoleDelete)
	err := c.cc.Invoke(ctx, RoleCommandService_DeleteRolePermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleCommandServiceClient) RestoreAllRole(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseRoleAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseRoleAll)
	err := c.cc.Invoke(ctx, RoleCommandService_RestoreAllRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleCommandServiceClient) DeleteAllRolePermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseRoleAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseRoleAll)
	err := c.cc.Invoke(ctx, RoleCommandService_DeleteAllRolePermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleCommandServiceServer is the server API for RoleCommandService service.
// All implementations must embed UnimplementedRoleCommandServiceServer
// for forward compatibility.
type RoleCommandServiceServer interface {
	CreateRole(context.Context, *CreateRoleRequest) (*ApiResponseRole, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*ApiResponseRole, error)
	TrashedRole(context.Context, *FindByIdRoleRequest) (*ApiResponseRoleDeleteAt, error)
	RestoreRole(context.Context, *FindByIdRoleRequest) (*ApiResponseRoleDeleteAt, error)
	DeleteRolePermanent(context.Context, *FindByIdRoleRequest) (*ApiResponseRoleDelete, error)
	RestoreAllRole(context.Context, *emptypb.Empty) (*ApiResponseRoleAll, error)
	DeleteAllRolePermanent(context.Context, *emptypb.Empty) (*ApiResponseRoleAll, error)
	mustEmbedUnimplementedRoleCommandServiceServer()
}

// UnimplementedRoleCommandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoleCommandServiceServer struct{}

func (UnimplementedRoleCommandServiceServer) CreateRole(context.Context, *CreateRoleRequest) (*ApiResponseRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedRoleCommandServiceServer) UpdateRole(context.Context, *UpdateRoleRequest) (*ApiResponseRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedRoleCommandServiceServer) TrashedRole(context.Context, *FindByIdRoleRequest) (*ApiResponseRoleDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrashedRole not implemented")
}
func (UnimplementedRoleCommandServiceServer) RestoreRole(context.Context, *FindByIdRoleRequest) (*ApiResponseRoleDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreRole not implemented")
}
func (UnimplementedRoleCommandServiceServer) DeleteRolePermanent(context.Context, *FindByIdRoleRequest) (*ApiResponseRoleDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRolePermanent not implemented")
}
func (UnimplementedRoleCommandServiceServer) RestoreAllRole(context.Context, *emptypb.Empty) (*ApiResponseRoleAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllRole not implemented")
}
func (UnimplementedRoleCommandServiceServer) DeleteAllRolePermanent(context.Context, *emptypb.Empty) (*ApiResponseRoleAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllRolePermanent not implemented")
}
func (UnimplementedRoleCommandServiceServer) mustEmbedUnimplementedRoleCommandServiceServer() {}
func (UnimplementedRoleCommandServiceServer) testEmbeddedByValue()                            {}

// UnsafeRoleCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleCommandServiceServer will
// result in compilation errors.
type UnsafeRoleCommandServiceServer interface {
	mustEmbedUnimplementedRoleCommandServiceServer()
}

func RegisterRoleCommandServiceServer(s grpc.ServiceRegistrar, srv RoleCommandServiceServer) {
	// If the following call pancis, it indicates UnimplementedRoleCommandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoleCommandService_ServiceDesc, srv)
}

func _RoleCommandService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleCommandServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleCommandService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleCommandServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleCommandService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleCommandServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleCommandService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleCommandServiceServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleCommandService_TrashedRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleCommandServiceServer).TrashedRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleCommandService_TrashedRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleCommandServiceServer).TrashedRole(ctx, req.(*FindByIdRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleCommandService_RestoreRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleCommandServiceServer).RestoreRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleCommandService_RestoreRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleCommandServiceServer).RestoreRole(ctx, req.(*FindByIdRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleCommandService_DeleteRolePermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleCommandServiceServer).DeleteRolePermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleCommandService_DeleteRolePermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleCommandServiceServer).DeleteRolePermanent(ctx, req.(*FindByIdRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleCommandService_RestoreAllRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleCommandServiceServer).RestoreAllRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleCommandService_RestoreAllRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleCommandServiceServer).RestoreAllRole(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleCommandService_DeleteAllRolePermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleCommandServiceServer).DeleteAllRolePermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleCommandService_DeleteAllRolePermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleCommandServiceServer).DeleteAllRolePermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleCommandService_ServiceDesc is the grpc.ServiceDesc for RoleCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.role.RoleCommandService",
	HandlerType: (*RoleCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRole",
			Handler:    _RoleCommandService_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _RoleCommandService_UpdateRole_Handler,
		},
		{
			MethodName: "TrashedRole",
			Handler:    _RoleCommandService_TrashedRole_Handler,
		},
		{
			MethodName: "RestoreRole",
			Handler:    _RoleCommandService_RestoreRole_Handler,
		},
		{
			MethodName: "DeleteRolePermanent",
			Handler:    _RoleCommandService_DeleteRolePermanent_Handler,
		},
		{
			MethodName: "RestoreAllRole",
			Handler:    _RoleCommandService_RestoreAllRole_Handler,
		},
		{
			MethodName: "DeleteAllRolePermanent",
			Handler:    _RoleCommandService_DeleteAllRolePermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "role/role_command.proto",
}
