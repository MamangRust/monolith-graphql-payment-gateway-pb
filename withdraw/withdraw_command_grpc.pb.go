// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: withdraw/withdraw_command.proto

package withdraw

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WithdrawCommandService_CreateWithdraw_FullMethodName             = "/pb.withdraw.WithdrawCommandService/CreateWithdraw"
	WithdrawCommandService_UpdateWithdraw_FullMethodName             = "/pb.withdraw.WithdrawCommandService/UpdateWithdraw"
	WithdrawCommandService_TrashedWithdraw_FullMethodName            = "/pb.withdraw.WithdrawCommandService/TrashedWithdraw"
	WithdrawCommandService_RestoreWithdraw_FullMethodName            = "/pb.withdraw.WithdrawCommandService/RestoreWithdraw"
	WithdrawCommandService_DeleteWithdrawPermanent_FullMethodName    = "/pb.withdraw.WithdrawCommandService/DeleteWithdrawPermanent"
	WithdrawCommandService_RestoreAllWithdraw_FullMethodName         = "/pb.withdraw.WithdrawCommandService/RestoreAllWithdraw"
	WithdrawCommandService_DeleteAllWithdrawPermanent_FullMethodName = "/pb.withdraw.WithdrawCommandService/DeleteAllWithdrawPermanent"
)

// WithdrawCommandServiceClient is the client API for WithdrawCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WithdrawCommandServiceClient interface {
	CreateWithdraw(ctx context.Context, in *CreateWithdrawRequest, opts ...grpc.CallOption) (*ApiResponseWithdraw, error)
	UpdateWithdraw(ctx context.Context, in *UpdateWithdrawRequest, opts ...grpc.CallOption) (*ApiResponseWithdraw, error)
	TrashedWithdraw(ctx context.Context, in *FindByIdWithdrawRequest, opts ...grpc.CallOption) (*ApIResponseWithdrawDeleteAt, error)
	RestoreWithdraw(ctx context.Context, in *FindByIdWithdrawRequest, opts ...grpc.CallOption) (*ApIResponseWithdrawDeleteAt, error)
	DeleteWithdrawPermanent(ctx context.Context, in *FindByIdWithdrawRequest, opts ...grpc.CallOption) (*ApiResponseWithdrawDelete, error)
	RestoreAllWithdraw(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseWithdrawAll, error)
	DeleteAllWithdrawPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseWithdrawAll, error)
}

type withdrawCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWithdrawCommandServiceClient(cc grpc.ClientConnInterface) WithdrawCommandServiceClient {
	return &withdrawCommandServiceClient{cc}
}

func (c *withdrawCommandServiceClient) CreateWithdraw(ctx context.Context, in *CreateWithdrawRequest, opts ...grpc.CallOption) (*ApiResponseWithdraw, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseWithdraw)
	err := c.cc.Invoke(ctx, WithdrawCommandService_CreateWithdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawCommandServiceClient) UpdateWithdraw(ctx context.Context, in *UpdateWithdrawRequest, opts ...grpc.CallOption) (*ApiResponseWithdraw, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseWithdraw)
	err := c.cc.Invoke(ctx, WithdrawCommandService_UpdateWithdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawCommandServiceClient) TrashedWithdraw(ctx context.Context, in *FindByIdWithdrawRequest, opts ...grpc.CallOption) (*ApIResponseWithdrawDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApIResponseWithdrawDeleteAt)
	err := c.cc.Invoke(ctx, WithdrawCommandService_TrashedWithdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawCommandServiceClient) RestoreWithdraw(ctx context.Context, in *FindByIdWithdrawRequest, opts ...grpc.CallOption) (*ApIResponseWithdrawDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApIResponseWithdrawDeleteAt)
	err := c.cc.Invoke(ctx, WithdrawCommandService_RestoreWithdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawCommandServiceClient) DeleteWithdrawPermanent(ctx context.Context, in *FindByIdWithdrawRequest, opts ...grpc.CallOption) (*ApiResponseWithdrawDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseWithdrawDelete)
	err := c.cc.Invoke(ctx, WithdrawCommandService_DeleteWithdrawPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawCommandServiceClient) RestoreAllWithdraw(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseWithdrawAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseWithdrawAll)
	err := c.cc.Invoke(ctx, WithdrawCommandService_RestoreAllWithdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawCommandServiceClient) DeleteAllWithdrawPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseWithdrawAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseWithdrawAll)
	err := c.cc.Invoke(ctx, WithdrawCommandService_DeleteAllWithdrawPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WithdrawCommandServiceServer is the server API for WithdrawCommandService service.
// All implementations must embed UnimplementedWithdrawCommandServiceServer
// for forward compatibility.
type WithdrawCommandServiceServer interface {
	CreateWithdraw(context.Context, *CreateWithdrawRequest) (*ApiResponseWithdraw, error)
	UpdateWithdraw(context.Context, *UpdateWithdrawRequest) (*ApiResponseWithdraw, error)
	TrashedWithdraw(context.Context, *FindByIdWithdrawRequest) (*ApIResponseWithdrawDeleteAt, error)
	RestoreWithdraw(context.Context, *FindByIdWithdrawRequest) (*ApIResponseWithdrawDeleteAt, error)
	DeleteWithdrawPermanent(context.Context, *FindByIdWithdrawRequest) (*ApiResponseWithdrawDelete, error)
	RestoreAllWithdraw(context.Context, *emptypb.Empty) (*ApiResponseWithdrawAll, error)
	DeleteAllWithdrawPermanent(context.Context, *emptypb.Empty) (*ApiResponseWithdrawAll, error)
	mustEmbedUnimplementedWithdrawCommandServiceServer()
}

// UnimplementedWithdrawCommandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWithdrawCommandServiceServer struct{}

func (UnimplementedWithdrawCommandServiceServer) CreateWithdraw(context.Context, *CreateWithdrawRequest) (*ApiResponseWithdraw, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWithdraw not implemented")
}
func (UnimplementedWithdrawCommandServiceServer) UpdateWithdraw(context.Context, *UpdateWithdrawRequest) (*ApiResponseWithdraw, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWithdraw not implemented")
}
func (UnimplementedWithdrawCommandServiceServer) TrashedWithdraw(context.Context, *FindByIdWithdrawRequest) (*ApIResponseWithdrawDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrashedWithdraw not implemented")
}
func (UnimplementedWithdrawCommandServiceServer) RestoreWithdraw(context.Context, *FindByIdWithdrawRequest) (*ApIResponseWithdrawDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreWithdraw not implemented")
}
func (UnimplementedWithdrawCommandServiceServer) DeleteWithdrawPermanent(context.Context, *FindByIdWithdrawRequest) (*ApiResponseWithdrawDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWithdrawPermanent not implemented")
}
func (UnimplementedWithdrawCommandServiceServer) RestoreAllWithdraw(context.Context, *emptypb.Empty) (*ApiResponseWithdrawAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllWithdraw not implemented")
}
func (UnimplementedWithdrawCommandServiceServer) DeleteAllWithdrawPermanent(context.Context, *emptypb.Empty) (*ApiResponseWithdrawAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllWithdrawPermanent not implemented")
}
func (UnimplementedWithdrawCommandServiceServer) mustEmbedUnimplementedWithdrawCommandServiceServer() {
}
func (UnimplementedWithdrawCommandServiceServer) testEmbeddedByValue() {}

// UnsafeWithdrawCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WithdrawCommandServiceServer will
// result in compilation errors.
type UnsafeWithdrawCommandServiceServer interface {
	mustEmbedUnimplementedWithdrawCommandServiceServer()
}

func RegisterWithdrawCommandServiceServer(s grpc.ServiceRegistrar, srv WithdrawCommandServiceServer) {
	// If the following call pancis, it indicates UnimplementedWithdrawCommandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WithdrawCommandService_ServiceDesc, srv)
}

func _WithdrawCommandService_CreateWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawCommandServiceServer).CreateWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawCommandService_CreateWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawCommandServiceServer).CreateWithdraw(ctx, req.(*CreateWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawCommandService_UpdateWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawCommandServiceServer).UpdateWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawCommandService_UpdateWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawCommandServiceServer).UpdateWithdraw(ctx, req.(*UpdateWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawCommandService_TrashedWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawCommandServiceServer).TrashedWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawCommandService_TrashedWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawCommandServiceServer).TrashedWithdraw(ctx, req.(*FindByIdWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawCommandService_RestoreWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawCommandServiceServer).RestoreWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawCommandService_RestoreWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawCommandServiceServer).RestoreWithdraw(ctx, req.(*FindByIdWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawCommandService_DeleteWithdrawPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawCommandServiceServer).DeleteWithdrawPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawCommandService_DeleteWithdrawPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawCommandServiceServer).DeleteWithdrawPermanent(ctx, req.(*FindByIdWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawCommandService_RestoreAllWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawCommandServiceServer).RestoreAllWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawCommandService_RestoreAllWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawCommandServiceServer).RestoreAllWithdraw(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawCommandService_DeleteAllWithdrawPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawCommandServiceServer).DeleteAllWithdrawPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawCommandService_DeleteAllWithdrawPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawCommandServiceServer).DeleteAllWithdrawPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// WithdrawCommandService_ServiceDesc is the grpc.ServiceDesc for WithdrawCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WithdrawCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.withdraw.WithdrawCommandService",
	HandlerType: (*WithdrawCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWithdraw",
			Handler:    _WithdrawCommandService_CreateWithdraw_Handler,
		},
		{
			MethodName: "UpdateWithdraw",
			Handler:    _WithdrawCommandService_UpdateWithdraw_Handler,
		},
		{
			MethodName: "TrashedWithdraw",
			Handler:    _WithdrawCommandService_TrashedWithdraw_Handler,
		},
		{
			MethodName: "RestoreWithdraw",
			Handler:    _WithdrawCommandService_RestoreWithdraw_Handler,
		},
		{
			MethodName: "DeleteWithdrawPermanent",
			Handler:    _WithdrawCommandService_DeleteWithdrawPermanent_Handler,
		},
		{
			MethodName: "RestoreAllWithdraw",
			Handler:    _WithdrawCommandService_RestoreAllWithdraw_Handler,
		},
		{
			MethodName: "DeleteAllWithdrawPermanent",
			Handler:    _WithdrawCommandService_DeleteAllWithdrawPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "withdraw/withdraw_command.proto",
}
