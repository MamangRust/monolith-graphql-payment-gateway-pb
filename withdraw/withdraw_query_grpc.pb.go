// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: withdraw/withdraw_query.proto

package withdraw

import (
	context "context"
	card "github.com/MamangRust/monolith-graphql-payment-gateway-pb/card"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WithdrawQueryService_FindAllWithdraw_FullMethodName             = "/pb.withdraw.WithdrawQueryService/FindAllWithdraw"
	WithdrawQueryService_FindAllWithdrawByCardNumber_FullMethodName = "/pb.withdraw.WithdrawQueryService/FindAllWithdrawByCardNumber"
	WithdrawQueryService_FindByIdWithdraw_FullMethodName            = "/pb.withdraw.WithdrawQueryService/FindByIdWithdraw"
	WithdrawQueryService_FindByCardNumber_FullMethodName            = "/pb.withdraw.WithdrawQueryService/FindByCardNumber"
	WithdrawQueryService_FindByActive_FullMethodName                = "/pb.withdraw.WithdrawQueryService/FindByActive"
	WithdrawQueryService_FindByTrashed_FullMethodName               = "/pb.withdraw.WithdrawQueryService/FindByTrashed"
)

// WithdrawQueryServiceClient is the client API for WithdrawQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WithdrawQueryServiceClient interface {
	FindAllWithdraw(ctx context.Context, in *FindAllWithdrawRequest, opts ...grpc.CallOption) (*ApiResponsePaginationWithdraw, error)
	FindAllWithdrawByCardNumber(ctx context.Context, in *FindAllWithdrawByCardNumberRequest, opts ...grpc.CallOption) (*ApiResponsePaginationWithdraw, error)
	FindByIdWithdraw(ctx context.Context, in *FindByIdWithdrawRequest, opts ...grpc.CallOption) (*ApiResponseWithdraw, error)
	FindByCardNumber(ctx context.Context, in *card.FindByCardNumberRequest, opts ...grpc.CallOption) (*ApiResponsesWithdraw, error)
	FindByActive(ctx context.Context, in *FindAllWithdrawRequest, opts ...grpc.CallOption) (*ApiResponsePaginationWithdrawDeleteAt, error)
	FindByTrashed(ctx context.Context, in *FindAllWithdrawRequest, opts ...grpc.CallOption) (*ApiResponsePaginationWithdrawDeleteAt, error)
}

type withdrawQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWithdrawQueryServiceClient(cc grpc.ClientConnInterface) WithdrawQueryServiceClient {
	return &withdrawQueryServiceClient{cc}
}

func (c *withdrawQueryServiceClient) FindAllWithdraw(ctx context.Context, in *FindAllWithdrawRequest, opts ...grpc.CallOption) (*ApiResponsePaginationWithdraw, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationWithdraw)
	err := c.cc.Invoke(ctx, WithdrawQueryService_FindAllWithdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawQueryServiceClient) FindAllWithdrawByCardNumber(ctx context.Context, in *FindAllWithdrawByCardNumberRequest, opts ...grpc.CallOption) (*ApiResponsePaginationWithdraw, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationWithdraw)
	err := c.cc.Invoke(ctx, WithdrawQueryService_FindAllWithdrawByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawQueryServiceClient) FindByIdWithdraw(ctx context.Context, in *FindByIdWithdrawRequest, opts ...grpc.CallOption) (*ApiResponseWithdraw, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseWithdraw)
	err := c.cc.Invoke(ctx, WithdrawQueryService_FindByIdWithdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawQueryServiceClient) FindByCardNumber(ctx context.Context, in *card.FindByCardNumberRequest, opts ...grpc.CallOption) (*ApiResponsesWithdraw, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsesWithdraw)
	err := c.cc.Invoke(ctx, WithdrawQueryService_FindByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawQueryServiceClient) FindByActive(ctx context.Context, in *FindAllWithdrawRequest, opts ...grpc.CallOption) (*ApiResponsePaginationWithdrawDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationWithdrawDeleteAt)
	err := c.cc.Invoke(ctx, WithdrawQueryService_FindByActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawQueryServiceClient) FindByTrashed(ctx context.Context, in *FindAllWithdrawRequest, opts ...grpc.CallOption) (*ApiResponsePaginationWithdrawDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationWithdrawDeleteAt)
	err := c.cc.Invoke(ctx, WithdrawQueryService_FindByTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WithdrawQueryServiceServer is the server API for WithdrawQueryService service.
// All implementations must embed UnimplementedWithdrawQueryServiceServer
// for forward compatibility.
type WithdrawQueryServiceServer interface {
	FindAllWithdraw(context.Context, *FindAllWithdrawRequest) (*ApiResponsePaginationWithdraw, error)
	FindAllWithdrawByCardNumber(context.Context, *FindAllWithdrawByCardNumberRequest) (*ApiResponsePaginationWithdraw, error)
	FindByIdWithdraw(context.Context, *FindByIdWithdrawRequest) (*ApiResponseWithdraw, error)
	FindByCardNumber(context.Context, *card.FindByCardNumberRequest) (*ApiResponsesWithdraw, error)
	FindByActive(context.Context, *FindAllWithdrawRequest) (*ApiResponsePaginationWithdrawDeleteAt, error)
	FindByTrashed(context.Context, *FindAllWithdrawRequest) (*ApiResponsePaginationWithdrawDeleteAt, error)
	mustEmbedUnimplementedWithdrawQueryServiceServer()
}

// UnimplementedWithdrawQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWithdrawQueryServiceServer struct{}

func (UnimplementedWithdrawQueryServiceServer) FindAllWithdraw(context.Context, *FindAllWithdrawRequest) (*ApiResponsePaginationWithdraw, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllWithdraw not implemented")
}
func (UnimplementedWithdrawQueryServiceServer) FindAllWithdrawByCardNumber(context.Context, *FindAllWithdrawByCardNumberRequest) (*ApiResponsePaginationWithdraw, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllWithdrawByCardNumber not implemented")
}
func (UnimplementedWithdrawQueryServiceServer) FindByIdWithdraw(context.Context, *FindByIdWithdrawRequest) (*ApiResponseWithdraw, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByIdWithdraw not implemented")
}
func (UnimplementedWithdrawQueryServiceServer) FindByCardNumber(context.Context, *card.FindByCardNumberRequest) (*ApiResponsesWithdraw, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByCardNumber not implemented")
}
func (UnimplementedWithdrawQueryServiceServer) FindByActive(context.Context, *FindAllWithdrawRequest) (*ApiResponsePaginationWithdrawDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActive not implemented")
}
func (UnimplementedWithdrawQueryServiceServer) FindByTrashed(context.Context, *FindAllWithdrawRequest) (*ApiResponsePaginationWithdrawDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashed not implemented")
}
func (UnimplementedWithdrawQueryServiceServer) mustEmbedUnimplementedWithdrawQueryServiceServer() {}
func (UnimplementedWithdrawQueryServiceServer) testEmbeddedByValue()                              {}

// UnsafeWithdrawQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WithdrawQueryServiceServer will
// result in compilation errors.
type UnsafeWithdrawQueryServiceServer interface {
	mustEmbedUnimplementedWithdrawQueryServiceServer()
}

func RegisterWithdrawQueryServiceServer(s grpc.ServiceRegistrar, srv WithdrawQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedWithdrawQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WithdrawQueryService_ServiceDesc, srv)
}

func _WithdrawQueryService_FindAllWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawQueryServiceServer).FindAllWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawQueryService_FindAllWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawQueryServiceServer).FindAllWithdraw(ctx, req.(*FindAllWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawQueryService_FindAllWithdrawByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllWithdrawByCardNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawQueryServiceServer).FindAllWithdrawByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawQueryService_FindAllWithdrawByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawQueryServiceServer).FindAllWithdrawByCardNumber(ctx, req.(*FindAllWithdrawByCardNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawQueryService_FindByIdWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawQueryServiceServer).FindByIdWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawQueryService_FindByIdWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawQueryServiceServer).FindByIdWithdraw(ctx, req.(*FindByIdWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawQueryService_FindByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(card.FindByCardNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawQueryServiceServer).FindByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawQueryService_FindByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawQueryServiceServer).FindByCardNumber(ctx, req.(*card.FindByCardNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawQueryService_FindByActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawQueryServiceServer).FindByActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawQueryService_FindByActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawQueryServiceServer).FindByActive(ctx, req.(*FindAllWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawQueryService_FindByTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawQueryServiceServer).FindByTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawQueryService_FindByTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawQueryServiceServer).FindByTrashed(ctx, req.(*FindAllWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WithdrawQueryService_ServiceDesc is the grpc.ServiceDesc for WithdrawQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WithdrawQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.withdraw.WithdrawQueryService",
	HandlerType: (*WithdrawQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAllWithdraw",
			Handler:    _WithdrawQueryService_FindAllWithdraw_Handler,
		},
		{
			MethodName: "FindAllWithdrawByCardNumber",
			Handler:    _WithdrawQueryService_FindAllWithdrawByCardNumber_Handler,
		},
		{
			MethodName: "FindByIdWithdraw",
			Handler:    _WithdrawQueryService_FindByIdWithdraw_Handler,
		},
		{
			MethodName: "FindByCardNumber",
			Handler:    _WithdrawQueryService_FindByCardNumber_Handler,
		},
		{
			MethodName: "FindByActive",
			Handler:    _WithdrawQueryService_FindByActive_Handler,
		},
		{
			MethodName: "FindByTrashed",
			Handler:    _WithdrawQueryService_FindByTrashed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "withdraw/withdraw_query.proto",
}
