// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: withdraw/stats/withdraw_stats_amount.proto

package stats

import (
	context "context"
	withdraw "github.com/MamangRust/monolith-graphql-payment-gateway-pb/withdraw"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WithdrawStatsAmountService_FindMonthlyWithdraws_FullMethodName             = "/pb.withdraw.stats.WithdrawStatsAmountService/FindMonthlyWithdraws"
	WithdrawStatsAmountService_FindYearlyWithdraws_FullMethodName              = "/pb.withdraw.stats.WithdrawStatsAmountService/FindYearlyWithdraws"
	WithdrawStatsAmountService_FindMonthlyWithdrawsByCardNumber_FullMethodName = "/pb.withdraw.stats.WithdrawStatsAmountService/FindMonthlyWithdrawsByCardNumber"
	WithdrawStatsAmountService_FindYearlyWithdrawsByCardNumber_FullMethodName  = "/pb.withdraw.stats.WithdrawStatsAmountService/FindYearlyWithdrawsByCardNumber"
)

// WithdrawStatsAmountServiceClient is the client API for WithdrawStatsAmountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WithdrawStatsAmountServiceClient interface {
	FindMonthlyWithdraws(ctx context.Context, in *withdraw.FindYearWithdrawStatus, opts ...grpc.CallOption) (*ApiResponseWithdrawMonthAmount, error)
	FindYearlyWithdraws(ctx context.Context, in *withdraw.FindYearWithdrawStatus, opts ...grpc.CallOption) (*ApiResponseWithdrawYearAmount, error)
	FindMonthlyWithdrawsByCardNumber(ctx context.Context, in *withdraw.FindYearWithdrawCardNumber, opts ...grpc.CallOption) (*ApiResponseWithdrawMonthAmount, error)
	FindYearlyWithdrawsByCardNumber(ctx context.Context, in *withdraw.FindYearWithdrawCardNumber, opts ...grpc.CallOption) (*ApiResponseWithdrawYearAmount, error)
}

type withdrawStatsAmountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWithdrawStatsAmountServiceClient(cc grpc.ClientConnInterface) WithdrawStatsAmountServiceClient {
	return &withdrawStatsAmountServiceClient{cc}
}

func (c *withdrawStatsAmountServiceClient) FindMonthlyWithdraws(ctx context.Context, in *withdraw.FindYearWithdrawStatus, opts ...grpc.CallOption) (*ApiResponseWithdrawMonthAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseWithdrawMonthAmount)
	err := c.cc.Invoke(ctx, WithdrawStatsAmountService_FindMonthlyWithdraws_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawStatsAmountServiceClient) FindYearlyWithdraws(ctx context.Context, in *withdraw.FindYearWithdrawStatus, opts ...grpc.CallOption) (*ApiResponseWithdrawYearAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseWithdrawYearAmount)
	err := c.cc.Invoke(ctx, WithdrawStatsAmountService_FindYearlyWithdraws_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawStatsAmountServiceClient) FindMonthlyWithdrawsByCardNumber(ctx context.Context, in *withdraw.FindYearWithdrawCardNumber, opts ...grpc.CallOption) (*ApiResponseWithdrawMonthAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseWithdrawMonthAmount)
	err := c.cc.Invoke(ctx, WithdrawStatsAmountService_FindMonthlyWithdrawsByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawStatsAmountServiceClient) FindYearlyWithdrawsByCardNumber(ctx context.Context, in *withdraw.FindYearWithdrawCardNumber, opts ...grpc.CallOption) (*ApiResponseWithdrawYearAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseWithdrawYearAmount)
	err := c.cc.Invoke(ctx, WithdrawStatsAmountService_FindYearlyWithdrawsByCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WithdrawStatsAmountServiceServer is the server API for WithdrawStatsAmountService service.
// All implementations must embed UnimplementedWithdrawStatsAmountServiceServer
// for forward compatibility.
type WithdrawStatsAmountServiceServer interface {
	FindMonthlyWithdraws(context.Context, *withdraw.FindYearWithdrawStatus) (*ApiResponseWithdrawMonthAmount, error)
	FindYearlyWithdraws(context.Context, *withdraw.FindYearWithdrawStatus) (*ApiResponseWithdrawYearAmount, error)
	FindMonthlyWithdrawsByCardNumber(context.Context, *withdraw.FindYearWithdrawCardNumber) (*ApiResponseWithdrawMonthAmount, error)
	FindYearlyWithdrawsByCardNumber(context.Context, *withdraw.FindYearWithdrawCardNumber) (*ApiResponseWithdrawYearAmount, error)
	mustEmbedUnimplementedWithdrawStatsAmountServiceServer()
}

// UnimplementedWithdrawStatsAmountServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWithdrawStatsAmountServiceServer struct{}

func (UnimplementedWithdrawStatsAmountServiceServer) FindMonthlyWithdraws(context.Context, *withdraw.FindYearWithdrawStatus) (*ApiResponseWithdrawMonthAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyWithdraws not implemented")
}
func (UnimplementedWithdrawStatsAmountServiceServer) FindYearlyWithdraws(context.Context, *withdraw.FindYearWithdrawStatus) (*ApiResponseWithdrawYearAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyWithdraws not implemented")
}
func (UnimplementedWithdrawStatsAmountServiceServer) FindMonthlyWithdrawsByCardNumber(context.Context, *withdraw.FindYearWithdrawCardNumber) (*ApiResponseWithdrawMonthAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyWithdrawsByCardNumber not implemented")
}
func (UnimplementedWithdrawStatsAmountServiceServer) FindYearlyWithdrawsByCardNumber(context.Context, *withdraw.FindYearWithdrawCardNumber) (*ApiResponseWithdrawYearAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyWithdrawsByCardNumber not implemented")
}
func (UnimplementedWithdrawStatsAmountServiceServer) mustEmbedUnimplementedWithdrawStatsAmountServiceServer() {
}
func (UnimplementedWithdrawStatsAmountServiceServer) testEmbeddedByValue() {}

// UnsafeWithdrawStatsAmountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WithdrawStatsAmountServiceServer will
// result in compilation errors.
type UnsafeWithdrawStatsAmountServiceServer interface {
	mustEmbedUnimplementedWithdrawStatsAmountServiceServer()
}

func RegisterWithdrawStatsAmountServiceServer(s grpc.ServiceRegistrar, srv WithdrawStatsAmountServiceServer) {
	// If the following call pancis, it indicates UnimplementedWithdrawStatsAmountServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WithdrawStatsAmountService_ServiceDesc, srv)
}

func _WithdrawStatsAmountService_FindMonthlyWithdraws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(withdraw.FindYearWithdrawStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawStatsAmountServiceServer).FindMonthlyWithdraws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawStatsAmountService_FindMonthlyWithdraws_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawStatsAmountServiceServer).FindMonthlyWithdraws(ctx, req.(*withdraw.FindYearWithdrawStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawStatsAmountService_FindYearlyWithdraws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(withdraw.FindYearWithdrawStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawStatsAmountServiceServer).FindYearlyWithdraws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawStatsAmountService_FindYearlyWithdraws_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawStatsAmountServiceServer).FindYearlyWithdraws(ctx, req.(*withdraw.FindYearWithdrawStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawStatsAmountService_FindMonthlyWithdrawsByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(withdraw.FindYearWithdrawCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawStatsAmountServiceServer).FindMonthlyWithdrawsByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawStatsAmountService_FindMonthlyWithdrawsByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawStatsAmountServiceServer).FindMonthlyWithdrawsByCardNumber(ctx, req.(*withdraw.FindYearWithdrawCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawStatsAmountService_FindYearlyWithdrawsByCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(withdraw.FindYearWithdrawCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawStatsAmountServiceServer).FindYearlyWithdrawsByCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawStatsAmountService_FindYearlyWithdrawsByCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawStatsAmountServiceServer).FindYearlyWithdrawsByCardNumber(ctx, req.(*withdraw.FindYearWithdrawCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

// WithdrawStatsAmountService_ServiceDesc is the grpc.ServiceDesc for WithdrawStatsAmountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WithdrawStatsAmountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.withdraw.stats.WithdrawStatsAmountService",
	HandlerType: (*WithdrawStatsAmountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMonthlyWithdraws",
			Handler:    _WithdrawStatsAmountService_FindMonthlyWithdraws_Handler,
		},
		{
			MethodName: "FindYearlyWithdraws",
			Handler:    _WithdrawStatsAmountService_FindYearlyWithdraws_Handler,
		},
		{
			MethodName: "FindMonthlyWithdrawsByCardNumber",
			Handler:    _WithdrawStatsAmountService_FindMonthlyWithdrawsByCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyWithdrawsByCardNumber",
			Handler:    _WithdrawStatsAmountService_FindYearlyWithdrawsByCardNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "withdraw/stats/withdraw_stats_amount.proto",
}
