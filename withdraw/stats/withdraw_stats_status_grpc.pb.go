// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: withdraw/stats/withdraw_stats_status.proto

package stats

import (
	context "context"
	withdraw "github.com/MamangRust/monolith-graphql-payment-gateway-pb/withdraw"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WithdrawStatsStatusService_FindMonthlyWithdrawStatusSuccess_FullMethodName           = "/pb.withdraw.stats.WithdrawStatsStatusService/FindMonthlyWithdrawStatusSuccess"
	WithdrawStatsStatusService_FindYearlyWithdrawStatusSuccess_FullMethodName            = "/pb.withdraw.stats.WithdrawStatsStatusService/FindYearlyWithdrawStatusSuccess"
	WithdrawStatsStatusService_FindMonthlyWithdrawStatusFailed_FullMethodName            = "/pb.withdraw.stats.WithdrawStatsStatusService/FindMonthlyWithdrawStatusFailed"
	WithdrawStatsStatusService_FindYearlyWithdrawStatusFailed_FullMethodName             = "/pb.withdraw.stats.WithdrawStatsStatusService/FindYearlyWithdrawStatusFailed"
	WithdrawStatsStatusService_FindMonthlyWithdrawStatusSuccessCardNumber_FullMethodName = "/pb.withdraw.stats.WithdrawStatsStatusService/FindMonthlyWithdrawStatusSuccessCardNumber"
	WithdrawStatsStatusService_FindYearlyWithdrawStatusSuccessCardNumber_FullMethodName  = "/pb.withdraw.stats.WithdrawStatsStatusService/FindYearlyWithdrawStatusSuccessCardNumber"
	WithdrawStatsStatusService_FindMonthlyWithdrawStatusFailedCardNumber_FullMethodName  = "/pb.withdraw.stats.WithdrawStatsStatusService/FindMonthlyWithdrawStatusFailedCardNumber"
	WithdrawStatsStatusService_FindYearlyWithdrawStatusFailedCardNumber_FullMethodName   = "/pb.withdraw.stats.WithdrawStatsStatusService/FindYearlyWithdrawStatusFailedCardNumber"
)

// WithdrawStatsStatusServiceClient is the client API for WithdrawStatsStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WithdrawStatsStatusServiceClient interface {
	FindMonthlyWithdrawStatusSuccess(ctx context.Context, in *withdraw.FindMonthlyWithdrawStatus, opts ...grpc.CallOption) (*ApiResponseWithdrawMonthStatusSuccess, error)
	FindYearlyWithdrawStatusSuccess(ctx context.Context, in *withdraw.FindYearWithdrawStatus, opts ...grpc.CallOption) (*ApiResponseWithdrawYearStatusSuccess, error)
	FindMonthlyWithdrawStatusFailed(ctx context.Context, in *withdraw.FindMonthlyWithdrawStatus, opts ...grpc.CallOption) (*ApiResponseWithdrawMonthStatusFailed, error)
	FindYearlyWithdrawStatusFailed(ctx context.Context, in *withdraw.FindYearWithdrawStatus, opts ...grpc.CallOption) (*ApiResponseWithdrawYearStatusFailed, error)
	FindMonthlyWithdrawStatusSuccessCardNumber(ctx context.Context, in *withdraw.FindMonthlyWithdrawStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseWithdrawMonthStatusSuccess, error)
	FindYearlyWithdrawStatusSuccessCardNumber(ctx context.Context, in *withdraw.FindYearWithdrawStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseWithdrawYearStatusSuccess, error)
	FindMonthlyWithdrawStatusFailedCardNumber(ctx context.Context, in *withdraw.FindMonthlyWithdrawStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseWithdrawMonthStatusFailed, error)
	FindYearlyWithdrawStatusFailedCardNumber(ctx context.Context, in *withdraw.FindYearWithdrawStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseWithdrawYearStatusFailed, error)
}

type withdrawStatsStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWithdrawStatsStatusServiceClient(cc grpc.ClientConnInterface) WithdrawStatsStatusServiceClient {
	return &withdrawStatsStatusServiceClient{cc}
}

func (c *withdrawStatsStatusServiceClient) FindMonthlyWithdrawStatusSuccess(ctx context.Context, in *withdraw.FindMonthlyWithdrawStatus, opts ...grpc.CallOption) (*ApiResponseWithdrawMonthStatusSuccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseWithdrawMonthStatusSuccess)
	err := c.cc.Invoke(ctx, WithdrawStatsStatusService_FindMonthlyWithdrawStatusSuccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawStatsStatusServiceClient) FindYearlyWithdrawStatusSuccess(ctx context.Context, in *withdraw.FindYearWithdrawStatus, opts ...grpc.CallOption) (*ApiResponseWithdrawYearStatusSuccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseWithdrawYearStatusSuccess)
	err := c.cc.Invoke(ctx, WithdrawStatsStatusService_FindYearlyWithdrawStatusSuccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawStatsStatusServiceClient) FindMonthlyWithdrawStatusFailed(ctx context.Context, in *withdraw.FindMonthlyWithdrawStatus, opts ...grpc.CallOption) (*ApiResponseWithdrawMonthStatusFailed, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseWithdrawMonthStatusFailed)
	err := c.cc.Invoke(ctx, WithdrawStatsStatusService_FindMonthlyWithdrawStatusFailed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawStatsStatusServiceClient) FindYearlyWithdrawStatusFailed(ctx context.Context, in *withdraw.FindYearWithdrawStatus, opts ...grpc.CallOption) (*ApiResponseWithdrawYearStatusFailed, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseWithdrawYearStatusFailed)
	err := c.cc.Invoke(ctx, WithdrawStatsStatusService_FindYearlyWithdrawStatusFailed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawStatsStatusServiceClient) FindMonthlyWithdrawStatusSuccessCardNumber(ctx context.Context, in *withdraw.FindMonthlyWithdrawStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseWithdrawMonthStatusSuccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseWithdrawMonthStatusSuccess)
	err := c.cc.Invoke(ctx, WithdrawStatsStatusService_FindMonthlyWithdrawStatusSuccessCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawStatsStatusServiceClient) FindYearlyWithdrawStatusSuccessCardNumber(ctx context.Context, in *withdraw.FindYearWithdrawStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseWithdrawYearStatusSuccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseWithdrawYearStatusSuccess)
	err := c.cc.Invoke(ctx, WithdrawStatsStatusService_FindYearlyWithdrawStatusSuccessCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawStatsStatusServiceClient) FindMonthlyWithdrawStatusFailedCardNumber(ctx context.Context, in *withdraw.FindMonthlyWithdrawStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseWithdrawMonthStatusFailed, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseWithdrawMonthStatusFailed)
	err := c.cc.Invoke(ctx, WithdrawStatsStatusService_FindMonthlyWithdrawStatusFailedCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawStatsStatusServiceClient) FindYearlyWithdrawStatusFailedCardNumber(ctx context.Context, in *withdraw.FindYearWithdrawStatusCardNumber, opts ...grpc.CallOption) (*ApiResponseWithdrawYearStatusFailed, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseWithdrawYearStatusFailed)
	err := c.cc.Invoke(ctx, WithdrawStatsStatusService_FindYearlyWithdrawStatusFailedCardNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WithdrawStatsStatusServiceServer is the server API for WithdrawStatsStatusService service.
// All implementations must embed UnimplementedWithdrawStatsStatusServiceServer
// for forward compatibility.
type WithdrawStatsStatusServiceServer interface {
	FindMonthlyWithdrawStatusSuccess(context.Context, *withdraw.FindMonthlyWithdrawStatus) (*ApiResponseWithdrawMonthStatusSuccess, error)
	FindYearlyWithdrawStatusSuccess(context.Context, *withdraw.FindYearWithdrawStatus) (*ApiResponseWithdrawYearStatusSuccess, error)
	FindMonthlyWithdrawStatusFailed(context.Context, *withdraw.FindMonthlyWithdrawStatus) (*ApiResponseWithdrawMonthStatusFailed, error)
	FindYearlyWithdrawStatusFailed(context.Context, *withdraw.FindYearWithdrawStatus) (*ApiResponseWithdrawYearStatusFailed, error)
	FindMonthlyWithdrawStatusSuccessCardNumber(context.Context, *withdraw.FindMonthlyWithdrawStatusCardNumber) (*ApiResponseWithdrawMonthStatusSuccess, error)
	FindYearlyWithdrawStatusSuccessCardNumber(context.Context, *withdraw.FindYearWithdrawStatusCardNumber) (*ApiResponseWithdrawYearStatusSuccess, error)
	FindMonthlyWithdrawStatusFailedCardNumber(context.Context, *withdraw.FindMonthlyWithdrawStatusCardNumber) (*ApiResponseWithdrawMonthStatusFailed, error)
	FindYearlyWithdrawStatusFailedCardNumber(context.Context, *withdraw.FindYearWithdrawStatusCardNumber) (*ApiResponseWithdrawYearStatusFailed, error)
	mustEmbedUnimplementedWithdrawStatsStatusServiceServer()
}

// UnimplementedWithdrawStatsStatusServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWithdrawStatsStatusServiceServer struct{}

func (UnimplementedWithdrawStatsStatusServiceServer) FindMonthlyWithdrawStatusSuccess(context.Context, *withdraw.FindMonthlyWithdrawStatus) (*ApiResponseWithdrawMonthStatusSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyWithdrawStatusSuccess not implemented")
}
func (UnimplementedWithdrawStatsStatusServiceServer) FindYearlyWithdrawStatusSuccess(context.Context, *withdraw.FindYearWithdrawStatus) (*ApiResponseWithdrawYearStatusSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyWithdrawStatusSuccess not implemented")
}
func (UnimplementedWithdrawStatsStatusServiceServer) FindMonthlyWithdrawStatusFailed(context.Context, *withdraw.FindMonthlyWithdrawStatus) (*ApiResponseWithdrawMonthStatusFailed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyWithdrawStatusFailed not implemented")
}
func (UnimplementedWithdrawStatsStatusServiceServer) FindYearlyWithdrawStatusFailed(context.Context, *withdraw.FindYearWithdrawStatus) (*ApiResponseWithdrawYearStatusFailed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyWithdrawStatusFailed not implemented")
}
func (UnimplementedWithdrawStatsStatusServiceServer) FindMonthlyWithdrawStatusSuccessCardNumber(context.Context, *withdraw.FindMonthlyWithdrawStatusCardNumber) (*ApiResponseWithdrawMonthStatusSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyWithdrawStatusSuccessCardNumber not implemented")
}
func (UnimplementedWithdrawStatsStatusServiceServer) FindYearlyWithdrawStatusSuccessCardNumber(context.Context, *withdraw.FindYearWithdrawStatusCardNumber) (*ApiResponseWithdrawYearStatusSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyWithdrawStatusSuccessCardNumber not implemented")
}
func (UnimplementedWithdrawStatsStatusServiceServer) FindMonthlyWithdrawStatusFailedCardNumber(context.Context, *withdraw.FindMonthlyWithdrawStatusCardNumber) (*ApiResponseWithdrawMonthStatusFailed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMonthlyWithdrawStatusFailedCardNumber not implemented")
}
func (UnimplementedWithdrawStatsStatusServiceServer) FindYearlyWithdrawStatusFailedCardNumber(context.Context, *withdraw.FindYearWithdrawStatusCardNumber) (*ApiResponseWithdrawYearStatusFailed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindYearlyWithdrawStatusFailedCardNumber not implemented")
}
func (UnimplementedWithdrawStatsStatusServiceServer) mustEmbedUnimplementedWithdrawStatsStatusServiceServer() {
}
func (UnimplementedWithdrawStatsStatusServiceServer) testEmbeddedByValue() {}

// UnsafeWithdrawStatsStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WithdrawStatsStatusServiceServer will
// result in compilation errors.
type UnsafeWithdrawStatsStatusServiceServer interface {
	mustEmbedUnimplementedWithdrawStatsStatusServiceServer()
}

func RegisterWithdrawStatsStatusServiceServer(s grpc.ServiceRegistrar, srv WithdrawStatsStatusServiceServer) {
	// If the following call pancis, it indicates UnimplementedWithdrawStatsStatusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WithdrawStatsStatusService_ServiceDesc, srv)
}

func _WithdrawStatsStatusService_FindMonthlyWithdrawStatusSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(withdraw.FindMonthlyWithdrawStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawStatsStatusServiceServer).FindMonthlyWithdrawStatusSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawStatsStatusService_FindMonthlyWithdrawStatusSuccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawStatsStatusServiceServer).FindMonthlyWithdrawStatusSuccess(ctx, req.(*withdraw.FindMonthlyWithdrawStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawStatsStatusService_FindYearlyWithdrawStatusSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(withdraw.FindYearWithdrawStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawStatsStatusServiceServer).FindYearlyWithdrawStatusSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawStatsStatusService_FindYearlyWithdrawStatusSuccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawStatsStatusServiceServer).FindYearlyWithdrawStatusSuccess(ctx, req.(*withdraw.FindYearWithdrawStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawStatsStatusService_FindMonthlyWithdrawStatusFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(withdraw.FindMonthlyWithdrawStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawStatsStatusServiceServer).FindMonthlyWithdrawStatusFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawStatsStatusService_FindMonthlyWithdrawStatusFailed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawStatsStatusServiceServer).FindMonthlyWithdrawStatusFailed(ctx, req.(*withdraw.FindMonthlyWithdrawStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawStatsStatusService_FindYearlyWithdrawStatusFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(withdraw.FindYearWithdrawStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawStatsStatusServiceServer).FindYearlyWithdrawStatusFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawStatsStatusService_FindYearlyWithdrawStatusFailed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawStatsStatusServiceServer).FindYearlyWithdrawStatusFailed(ctx, req.(*withdraw.FindYearWithdrawStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawStatsStatusService_FindMonthlyWithdrawStatusSuccessCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(withdraw.FindMonthlyWithdrawStatusCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawStatsStatusServiceServer).FindMonthlyWithdrawStatusSuccessCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawStatsStatusService_FindMonthlyWithdrawStatusSuccessCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawStatsStatusServiceServer).FindMonthlyWithdrawStatusSuccessCardNumber(ctx, req.(*withdraw.FindMonthlyWithdrawStatusCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawStatsStatusService_FindYearlyWithdrawStatusSuccessCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(withdraw.FindYearWithdrawStatusCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawStatsStatusServiceServer).FindYearlyWithdrawStatusSuccessCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawStatsStatusService_FindYearlyWithdrawStatusSuccessCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawStatsStatusServiceServer).FindYearlyWithdrawStatusSuccessCardNumber(ctx, req.(*withdraw.FindYearWithdrawStatusCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawStatsStatusService_FindMonthlyWithdrawStatusFailedCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(withdraw.FindMonthlyWithdrawStatusCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawStatsStatusServiceServer).FindMonthlyWithdrawStatusFailedCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawStatsStatusService_FindMonthlyWithdrawStatusFailedCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawStatsStatusServiceServer).FindMonthlyWithdrawStatusFailedCardNumber(ctx, req.(*withdraw.FindMonthlyWithdrawStatusCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawStatsStatusService_FindYearlyWithdrawStatusFailedCardNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(withdraw.FindYearWithdrawStatusCardNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawStatsStatusServiceServer).FindYearlyWithdrawStatusFailedCardNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawStatsStatusService_FindYearlyWithdrawStatusFailedCardNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawStatsStatusServiceServer).FindYearlyWithdrawStatusFailedCardNumber(ctx, req.(*withdraw.FindYearWithdrawStatusCardNumber))
	}
	return interceptor(ctx, in, info, handler)
}

// WithdrawStatsStatusService_ServiceDesc is the grpc.ServiceDesc for WithdrawStatsStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WithdrawStatsStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.withdraw.stats.WithdrawStatsStatusService",
	HandlerType: (*WithdrawStatsStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMonthlyWithdrawStatusSuccess",
			Handler:    _WithdrawStatsStatusService_FindMonthlyWithdrawStatusSuccess_Handler,
		},
		{
			MethodName: "FindYearlyWithdrawStatusSuccess",
			Handler:    _WithdrawStatsStatusService_FindYearlyWithdrawStatusSuccess_Handler,
		},
		{
			MethodName: "FindMonthlyWithdrawStatusFailed",
			Handler:    _WithdrawStatsStatusService_FindMonthlyWithdrawStatusFailed_Handler,
		},
		{
			MethodName: "FindYearlyWithdrawStatusFailed",
			Handler:    _WithdrawStatsStatusService_FindYearlyWithdrawStatusFailed_Handler,
		},
		{
			MethodName: "FindMonthlyWithdrawStatusSuccessCardNumber",
			Handler:    _WithdrawStatsStatusService_FindMonthlyWithdrawStatusSuccessCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyWithdrawStatusSuccessCardNumber",
			Handler:    _WithdrawStatsStatusService_FindYearlyWithdrawStatusSuccessCardNumber_Handler,
		},
		{
			MethodName: "FindMonthlyWithdrawStatusFailedCardNumber",
			Handler:    _WithdrawStatsStatusService_FindMonthlyWithdrawStatusFailedCardNumber_Handler,
		},
		{
			MethodName: "FindYearlyWithdrawStatusFailedCardNumber",
			Handler:    _WithdrawStatsStatusService_FindYearlyWithdrawStatusFailedCardNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "withdraw/stats/withdraw_stats_status.proto",
}
